// ignore_for_file: non_constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to ObjectBox C-API
class ObjectBoxC {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  ObjectBoxC(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  /// /// Return the version of the library as ints. Pointers may be null
  void obx_version(
    ffi.Pointer<ffi.Int32> major,
    ffi.Pointer<ffi.Int32> minor,
    ffi.Pointer<ffi.Int32> patch,
  ) {
    _obx_version ??=
        _dylib.lookupFunction<_c_obx_version, _dart_obx_version>('obx_version');
    return _obx_version(
      major,
      minor,
      patch,
    );
  }

  _dart_obx_version _obx_version;

  /// /// Check if the version of the library is equal to or higher than the given version ints.
  bool obx_version_is_at_least(
    int major,
    int minor,
    int patch,
  ) {
    _obx_version_is_at_least ??= _dylib.lookupFunction<
        _c_obx_version_is_at_least,
        _dart_obx_version_is_at_least>('obx_version_is_at_least');
    return _obx_version_is_at_least(
          major,
          minor,
          patch,
        ) !=
        0;
  }

  _dart_obx_version_is_at_least _obx_version_is_at_least;

  /// /// Return the version of the library to be printed.
  /// /// The format may change in any future release; only use for information purposes.
  /// /// @see obx_version() and obx_version_is_at_least()
  ffi.Pointer<ffi.Int8> obx_version_string() {
    _obx_version_string ??=
        _dylib.lookupFunction<_c_obx_version_string, _dart_obx_version_string>(
            'obx_version_string');
    return _obx_version_string();
  }

  _dart_obx_version_string _obx_version_string;

  /// /// Return the version of the ObjectBox core to be printed.
  /// /// The format may change in any future release; only use for information purposes.
  /// /// @see obx_version() and obx_version_is_at_least()
  ffi.Pointer<ffi.Int8> obx_version_core_string() {
    _obx_version_core_string ??= _dylib.lookupFunction<
        _c_obx_version_core_string,
        _dart_obx_version_core_string>('obx_version_core_string');
    return _obx_version_core_string();
  }

  _dart_obx_version_core_string _obx_version_core_string;

  /// /// Checks whether the given feature is available in the currently loaded library.
  bool obx_has_feature(
    int feature,
  ) {
    _obx_has_feature ??=
        _dylib.lookupFunction<_c_obx_has_feature, _dart_obx_has_feature>(
            'obx_has_feature');
    return _obx_has_feature(
          feature,
        ) !=
        0;
  }

  _dart_obx_has_feature _obx_has_feature;

  /// /// Check whether functions returning OBX_bytes_array are fully supported (depends on build, invariant during runtime)
  /// /// @deprecated use obx_has_feature(OBXFeature_BytesArray) instead
  bool obx_supports_bytes_array() {
    _obx_supports_bytes_array ??= _dylib.lookupFunction<
        _c_obx_supports_bytes_array,
        _dart_obx_supports_bytes_array>('obx_supports_bytes_array');
    return _obx_supports_bytes_array() != 0;
  }

  _dart_obx_supports_bytes_array _obx_supports_bytes_array;

  /// /// Check whether time series functions are available in the version of this library
  /// /// @deprecated use obx_has_feature(OBXFeature_TimeSeries) instead
  bool obx_supports_time_series() {
    _obx_supports_time_series ??= _dylib.lookupFunction<
        _c_obx_supports_time_series,
        _dart_obx_supports_time_series>('obx_supports_time_series');
    return _obx_supports_time_series() != 0;
  }

  _dart_obx_supports_time_series _obx_supports_time_series;

  /// /// Delete the store files from the given directory
  int obx_remove_db_files(
    ffi.Pointer<ffi.Int8> directory,
  ) {
    _obx_remove_db_files ??= _dylib.lookupFunction<_c_obx_remove_db_files,
        _dart_obx_remove_db_files>('obx_remove_db_files');
    return _obx_remove_db_files(
      directory,
    );
  }

  _dart_obx_remove_db_files _obx_remove_db_files;

  /// /// Return the error status on the current thread and clear the error state.
  /// /// The buffer returned in out_message is valid only until the next call into ObjectBox.
  /// /// @param out_error receives the error code; optional: may be NULL
  /// /// @param out_message receives the pointer to the error messages; optional: may be NULL
  /// /// @returns true if an error was pending
  bool obx_last_error_pop(
    ffi.Pointer<ffi.Int32> out_error,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> out_message,
  ) {
    _obx_last_error_pop ??=
        _dylib.lookupFunction<_c_obx_last_error_pop, _dart_obx_last_error_pop>(
            'obx_last_error_pop');
    return _obx_last_error_pop(
          out_error,
          out_message,
        ) !=
        0;
  }

  _dart_obx_last_error_pop _obx_last_error_pop;

  /// /// The last error raised by an ObjectBox API call on the current thread, or OBX_SUCCESS if no error occurred yet.
  /// /// Note that API calls do not clear this error code (also true for this method).
  /// /// Thus, if you receive an error from this, it's usually a good idea to call obx_last_error_clear() to clear the error
  /// /// state (or use obx_last_error_pop()) for future API calls.
  int obx_last_error_code() {
    _obx_last_error_code ??= _dylib.lookupFunction<_c_obx_last_error_code,
        _dart_obx_last_error_code>('obx_last_error_code');
    return _obx_last_error_code();
  }

  _dart_obx_last_error_code _obx_last_error_code;

  /// /// The error message string attached to the error returned by obx_last_error_code().
  /// /// Like obx_last_error_code(), this is bound to the current thread, and this call does not clear the error state.
  /// /// The buffer returned is valid only until the next call into ObjectBox.
  ffi.Pointer<ffi.Int8> obx_last_error_message() {
    _obx_last_error_message ??= _dylib.lookupFunction<_c_obx_last_error_message,
        _dart_obx_last_error_message>('obx_last_error_message');
    return _obx_last_error_message();
  }

  _dart_obx_last_error_message _obx_last_error_message;

  /// /// The underlying error for the error returned by obx_last_error_code(). Where obx_last_error_code() may be a generic
  /// /// error like OBX_ERROR_STORAGE_GENERAL, this will give a further underlying and possibly platform-specific error code.
  int obx_last_error_secondary() {
    _obx_last_error_secondary ??= _dylib.lookupFunction<
        _c_obx_last_error_secondary,
        _dart_obx_last_error_secondary>('obx_last_error_secondary');
    return _obx_last_error_secondary();
  }

  _dart_obx_last_error_secondary _obx_last_error_secondary;

  /// /// Clear the error state on the current thread; e.g. obx_last_error_code() will now return OBX_SUCCESS.
  /// /// Note that clearing the error state does not happen automatically;
  /// /// API calls set the error state when they produce an error, but do not clear it on success.
  /// /// See also: obx_last_error_pop() to retrieve the error state and clear it.
  void obx_last_error_clear() {
    _obx_last_error_clear ??= _dylib.lookupFunction<_c_obx_last_error_clear,
        _dart_obx_last_error_clear>('obx_last_error_clear');
    return _obx_last_error_clear();
  }

  _dart_obx_last_error_clear _obx_last_error_clear;

  /// /// Set the last error code and test - reserved for internal use from generated code.
  bool obx_last_error_set(
    int code,
    int secondary,
    ffi.Pointer<ffi.Int8> message,
  ) {
    _obx_last_error_set ??=
        _dylib.lookupFunction<_c_obx_last_error_set, _dart_obx_last_error_set>(
            'obx_last_error_set');
    return _obx_last_error_set(
          code,
          secondary,
          message,
        ) !=
        0;
  }

  _dart_obx_last_error_set _obx_last_error_set;

  /// /// Create an (empty) data meta model which is to be consumed by obx_opt_model().
  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details.
  /// ///               Note that obx_model_* functions handle OBX_model NULL pointers (will indicate an error but not crash).
  ffi.Pointer<OBX_model> obx_model() {
    _obx_model ??=
        _dylib.lookupFunction<_c_obx_model, _dart_obx_model>('obx_model');
    return _obx_model();
  }

  _dart_obx_model _obx_model;

  /// /// Only call when not calling obx_store_open() (which will free it internally)
  /// /// @param model NULL-able; returns OBX_SUCCESS if model is NULL
  int obx_model_free(
    ffi.Pointer<OBX_model> model,
  ) {
    _obx_model_free ??=
        _dylib.lookupFunction<_c_obx_model_free, _dart_obx_model_free>(
            'obx_model_free');
    return _obx_model_free(
      model,
    );
  }

  _dart_obx_model_free _obx_model_free;

  /// /// To minimise the amount of error handling code required when building a model, the first error is stored and can be
  /// /// obtained here. All the obx_model_XXX functions are null operations after the first model error has occurred.
  /// /// @param model NULL-able; returns OBX_ERROR_ILLEGAL_ARGUMENT if model is NULL
  int obx_model_error_code(
    ffi.Pointer<OBX_model> model,
  ) {
    _obx_model_error_code ??= _dylib.lookupFunction<_c_obx_model_error_code,
        _dart_obx_model_error_code>('obx_model_error_code');
    return _obx_model_error_code(
      model,
    );
  }

  _dart_obx_model_error_code _obx_model_error_code;

  /// /// To minimise the amount of error handling code required when building a model, the first error is stored and can be
  /// /// obtained here. All the obx_model_XXX functions are null operations after the first model error has occurred.
  /// /// @param model NULL-able; returns NULL if model is NULL
  ffi.Pointer<ffi.Int8> obx_model_error_message(
    ffi.Pointer<OBX_model> model,
  ) {
    _obx_model_error_message ??= _dylib.lookupFunction<
        _c_obx_model_error_message,
        _dart_obx_model_error_message>('obx_model_error_message');
    return _obx_model_error_message(
      model,
    );
  }

  _dart_obx_model_error_message _obx_model_error_message;

  /// /// Starts the definition of a new entity type for the meta data model.
  /// /// After this, call obx_model_property() to add properties to the entity type.
  /// /// @param name A human readable name for the entity. Must be unique within the model
  /// /// @param entity_id Must be unique within this version of the model
  /// /// @param entity_uid Used to identify entities between versions of the model. Must be globally unique.
  int obx_model_entity(
    ffi.Pointer<OBX_model> model,
    ffi.Pointer<ffi.Int8> name,
    int entity_id,
    int entity_uid,
  ) {
    _obx_model_entity ??=
        _dylib.lookupFunction<_c_obx_model_entity, _dart_obx_model_entity>(
            'obx_model_entity');
    return _obx_model_entity(
      model,
      name,
      entity_id,
      entity_uid,
    );
  }

  _dart_obx_model_entity _obx_model_entity;

  /// /// Refine the definition of the entity declared by the most recent obx_model_entity() call, specifying flags.
  int obx_model_entity_flags(
    ffi.Pointer<OBX_model> model,
    int flags,
  ) {
    _obx_model_entity_flags ??= _dylib.lookupFunction<_c_obx_model_entity_flags,
        _dart_obx_model_entity_flags>('obx_model_entity_flags');
    return _obx_model_entity_flags(
      model,
      flags,
    );
  }

  _dart_obx_model_entity_flags _obx_model_entity_flags;

  /// /// Starts the definition of a new property for the entity type of the last obx_model_entity() call.
  /// /// @param name A human readable name for the property. Must be unique within the entity
  /// /// @param type The type of property required
  /// /// @param property_id Must be unique within the entity
  /// /// @param property_uid Used to identify properties between versions of the entity. Must be global unique.
  int obx_model_property(
    ffi.Pointer<OBX_model> model,
    ffi.Pointer<ffi.Int8> name,
    int type,
    int property_id,
    int property_uid,
  ) {
    _obx_model_property ??=
        _dylib.lookupFunction<_c_obx_model_property, _dart_obx_model_property>(
            'obx_model_property');
    return _obx_model_property(
      model,
      name,
      type,
      property_id,
      property_uid,
    );
  }

  _dart_obx_model_property _obx_model_property;

  /// /// Refine the definition of the property declared by the most recent obx_model_property() call, specifying flags.
  int obx_model_property_flags(
    ffi.Pointer<OBX_model> model,
    int flags,
  ) {
    _obx_model_property_flags ??= _dylib.lookupFunction<
        _c_obx_model_property_flags,
        _dart_obx_model_property_flags>('obx_model_property_flags');
    return _obx_model_property_flags(
      model,
      flags,
    );
  }

  _dart_obx_model_property_flags _obx_model_property_flags;

  /// /// Refine the definition of the property declared by the most recent obx_model_property() call, declaring it a
  /// /// relation.
  /// /// @param target_entity The name of the entity linked to by the relation
  /// /// @param index_id Must be unique within this version of the model
  /// /// @param index_uid Used to identify relations between versions of the model. Must be globally unique.
  int obx_model_property_relation(
    ffi.Pointer<OBX_model> model,
    ffi.Pointer<ffi.Int8> target_entity,
    int index_id,
    int index_uid,
  ) {
    _obx_model_property_relation ??= _dylib.lookupFunction<
        _c_obx_model_property_relation,
        _dart_obx_model_property_relation>('obx_model_property_relation');
    return _obx_model_property_relation(
      model,
      target_entity,
      index_id,
      index_uid,
    );
  }

  _dart_obx_model_property_relation _obx_model_property_relation;

  /// /// Refine the definition of the property declared by the most recent obx_model_property() call, adding an index.
  /// /// @param index_id Must be unique within this version of the model
  /// /// @param index_uid Used to identify relations between versions of the model. Must be globally unique.
  int obx_model_property_index_id(
    ffi.Pointer<OBX_model> model,
    int index_id,
    int index_uid,
  ) {
    _obx_model_property_index_id ??= _dylib.lookupFunction<
        _c_obx_model_property_index_id,
        _dart_obx_model_property_index_id>('obx_model_property_index_id');
    return _obx_model_property_index_id(
      model,
      index_id,
      index_uid,
    );
  }

  _dart_obx_model_property_index_id _obx_model_property_index_id;

  /// /// Add a standalone relation between the active entity and the target entity to the model
  /// /// @param relation_id Must be unique within this version of the model
  /// /// @param relation_uid Used to identify relations between versions of the model. Must be globally unique.
  /// /// @param target_id The id of the target entity of the relation
  /// /// @param target_uid The uid of the target entity of the relation
  int obx_model_relation(
    ffi.Pointer<OBX_model> model,
    int relation_id,
    int relation_uid,
    int target_id,
    int target_uid,
  ) {
    _obx_model_relation ??=
        _dylib.lookupFunction<_c_obx_model_relation, _dart_obx_model_relation>(
            'obx_model_relation');
    return _obx_model_relation(
      model,
      relation_id,
      relation_uid,
      target_id,
      target_uid,
    );
  }

  _dart_obx_model_relation _obx_model_relation;

  /// /// Set the highest ever known entity id in the model. Should always be equal to or higher than the
  /// /// last entity id of the previous version of the model
  void obx_model_last_entity_id(
    ffi.Pointer<OBX_model> arg0,
    int entity_id,
    int entity_uid,
  ) {
    _obx_model_last_entity_id ??= _dylib.lookupFunction<
        _c_obx_model_last_entity_id,
        _dart_obx_model_last_entity_id>('obx_model_last_entity_id');
    return _obx_model_last_entity_id(
      arg0,
      entity_id,
      entity_uid,
    );
  }

  _dart_obx_model_last_entity_id _obx_model_last_entity_id;

  /// /// Set the highest ever known index id in the model. Should always be equal to or higher than the
  /// /// last index id of the previous version of the model
  void obx_model_last_index_id(
    ffi.Pointer<OBX_model> model,
    int index_id,
    int index_uid,
  ) {
    _obx_model_last_index_id ??= _dylib.lookupFunction<
        _c_obx_model_last_index_id,
        _dart_obx_model_last_index_id>('obx_model_last_index_id');
    return _obx_model_last_index_id(
      model,
      index_id,
      index_uid,
    );
  }

  _dart_obx_model_last_index_id _obx_model_last_index_id;

  /// /// Set the highest every known relation id in the model. Should always be equal to or higher than the
  /// /// last relation id of the previous version of the model.
  void obx_model_last_relation_id(
    ffi.Pointer<OBX_model> model,
    int relation_id,
    int relation_uid,
  ) {
    _obx_model_last_relation_id ??= _dylib.lookupFunction<
        _c_obx_model_last_relation_id,
        _dart_obx_model_last_relation_id>('obx_model_last_relation_id');
    return _obx_model_last_relation_id(
      model,
      relation_id,
      relation_uid,
    );
  }

  _dart_obx_model_last_relation_id _obx_model_last_relation_id;

  /// /// Set the highest ever known property id in the entity. Should always be equal to or higher than the
  /// /// last property id of the previous version of the entity.
  int obx_model_entity_last_property_id(
    ffi.Pointer<OBX_model> model,
    int property_id,
    int property_uid,
  ) {
    _obx_model_entity_last_property_id ??= _dylib.lookupFunction<
            _c_obx_model_entity_last_property_id,
            _dart_obx_model_entity_last_property_id>(
        'obx_model_entity_last_property_id');
    return _obx_model_entity_last_property_id(
      model,
      property_id,
      property_uid,
    );
  }

  _dart_obx_model_entity_last_property_id _obx_model_entity_last_property_id;

  /// /// Create a default set of store options.
  /// /// @returns NULL on failure, a default set of options on success
  ffi.Pointer<OBX_store_options> obx_opt() {
    _obx_opt ??= _dylib.lookupFunction<_c_obx_opt, _dart_obx_opt>('obx_opt');
    return _obx_opt();
  }

  _dart_obx_opt _obx_opt;

  /// /// Set the store directory on the options. The default is "objectbox".
  int obx_opt_directory(
    ffi.Pointer<OBX_store_options> opt,
    ffi.Pointer<ffi.Int8> dir,
  ) {
    _obx_opt_directory ??=
        _dylib.lookupFunction<_c_obx_opt_directory, _dart_obx_opt_directory>(
            'obx_opt_directory');
    return _obx_opt_directory(
      opt,
      dir,
    );
  }

  _dart_obx_opt_directory _obx_opt_directory;

  /// /// Set the maximum db size on the options. The default is 1Gb.
  void obx_opt_max_db_size_in_kb(
    ffi.Pointer<OBX_store_options> opt,
    int size_in_kb,
  ) {
    _obx_opt_max_db_size_in_kb ??= _dylib.lookupFunction<
        _c_obx_opt_max_db_size_in_kb,
        _dart_obx_opt_max_db_size_in_kb>('obx_opt_max_db_size_in_kb');
    return _obx_opt_max_db_size_in_kb(
      opt,
      size_in_kb,
    );
  }

  _dart_obx_opt_max_db_size_in_kb _obx_opt_max_db_size_in_kb;

  /// /// Set the file mode on the options. The default is 0644 (unix-style)
  void obx_opt_file_mode(
    ffi.Pointer<OBX_store_options> opt,
    int file_mode,
  ) {
    _obx_opt_file_mode ??=
        _dylib.lookupFunction<_c_obx_opt_file_mode, _dart_obx_opt_file_mode>(
            'obx_opt_file_mode');
    return _obx_opt_file_mode(
      opt,
      file_mode,
    );
  }

  _dart_obx_opt_file_mode _obx_opt_file_mode;

  /// /// Set the maximum number of readers on the options.
  /// /// "Readers" are an finite resource for which we need to define a maximum number upfront.
  /// /// The default value is enough for most apps and usually you can ignore it completely.
  /// /// However, if you get the OBX_ERROR_MAX_READERS_EXCEEDED error, you should verify your threading.
  /// /// For each thread, ObjectBox uses multiple readers.
  /// /// Their number (per thread) depends on number of types, relations, and usage patterns.
  /// /// Thus, if you are working with many threads (e.g. in a server-like scenario), it can make sense to increase the
  /// /// maximum number of readers.
  /// /// Note: The internal default is currently around 120. So when hitting this limit, try values around 200-500.
  void obx_opt_max_readers(
    ffi.Pointer<OBX_store_options> opt,
    int max_readers,
  ) {
    _obx_opt_max_readers ??= _dylib.lookupFunction<_c_obx_opt_max_readers,
        _dart_obx_opt_max_readers>('obx_opt_max_readers');
    return _obx_opt_max_readers(
      opt,
      max_readers,
    );
  }

  _dart_obx_opt_max_readers _obx_opt_max_readers;

  /// /// Set the model on the options. The default is no model.
  /// /// NOTE: the model is always freed by this function, including when an error occurs.
  int obx_opt_model(
    ffi.Pointer<OBX_store_options> opt,
    ffi.Pointer<OBX_model> model,
  ) {
    _obx_opt_model ??= _dylib
        .lookupFunction<_c_obx_opt_model, _dart_obx_opt_model>('obx_opt_model');
    return _obx_opt_model(
      opt,
      model,
    );
  }

  _dart_obx_opt_model _obx_opt_model;

  /// /// Set the model on the options copying the given bytes. The default is no model.
  int obx_opt_model_bytes(
    ffi.Pointer<OBX_store_options> opt,
    ffi.Pointer<ffi.Void> bytes,
    int size,
  ) {
    _obx_opt_model_bytes ??= _dylib.lookupFunction<_c_obx_opt_model_bytes,
        _dart_obx_opt_model_bytes>('obx_opt_model_bytes');
    return _obx_opt_model_bytes(
      opt,
      bytes,
      size,
    );
  }

  _dart_obx_opt_model_bytes _obx_opt_model_bytes;

  /// /// Like obx_opt_model_bytes BUT WITHOUT copying the given bytes.
  /// /// Thus, you must keep the bytes available until after the store is created.
  int obx_opt_model_bytes_direct(
    ffi.Pointer<OBX_store_options> opt,
    ffi.Pointer<ffi.Void> bytes,
    int size,
  ) {
    _obx_opt_model_bytes_direct ??= _dylib.lookupFunction<
        _c_obx_opt_model_bytes_direct,
        _dart_obx_opt_model_bytes_direct>('obx_opt_model_bytes_direct');
    return _obx_opt_model_bytes_direct(
      opt,
      bytes,
      size,
    );
  }

  _dart_obx_opt_model_bytes_direct _obx_opt_model_bytes_direct;

  /// /// When the DB is opened initially, ObjectBox can do a consistency check on the given amount of pages.
  /// /// Reliable file systems already guarantee consistency, so this is primarily meant to deal with unreliable
  /// /// OSes, file systems, or hardware. Thus, usually a low number (e.g. 1-20) is sufficient and does not impact
  /// /// startup performance significantly. To completely disable this you can pass 0, but we recommend a setting of
  /// /// at least 1.
  /// /// Note: ObjectBox builds upon ACID storage, which guarantees consistency given that the file system is working
  /// /// correctly (in particular fsync).
  /// /// @param page_limit limits the number of checked pages (currently defaults to 0, but will be increased in the future)
  /// /// @param leaf_level enable for visiting leaf pages (defaults to false)
  void obx_opt_validate_on_open(
    ffi.Pointer<OBX_store_options> opt,
    int page_limit,
    bool leaf_level,
  ) {
    _obx_opt_validate_on_open ??= _dylib.lookupFunction<
        _c_obx_opt_validate_on_open,
        _dart_obx_opt_validate_on_open>('obx_opt_validate_on_open');
    return _obx_opt_validate_on_open(
      opt,
      page_limit,
      leaf_level ? 1 : 0,
    );
  }

  _dart_obx_opt_validate_on_open _obx_opt_validate_on_open;

  /// /// Don't touch unless you know exactly what you are doing:
  /// /// Advanced setting typically meant for language bindings (not end users). See OBXPutPaddingMode description.
  void obx_opt_put_padding_mode(
    ffi.Pointer<OBX_store_options> opt,
    int mode,
  ) {
    _obx_opt_put_padding_mode ??= _dylib.lookupFunction<
        _c_obx_opt_put_padding_mode,
        _dart_obx_opt_put_padding_mode>('obx_opt_put_padding_mode');
    return _obx_opt_put_padding_mode(
      opt,
      mode,
    );
  }

  _dart_obx_opt_put_padding_mode _obx_opt_put_padding_mode;

  /// /// Advanced setting meant only for special scenarios: setting to false causes opening the database in a limited,
  /// /// schema-less mode. If you don't know what this means exactly: ignore this flag. Defaults to true.
  void obx_opt_read_schema(
    ffi.Pointer<OBX_store_options> opt,
    bool value,
  ) {
    _obx_opt_read_schema ??= _dylib.lookupFunction<_c_obx_opt_read_schema,
        _dart_obx_opt_read_schema>('obx_opt_read_schema');
    return _obx_opt_read_schema(
      opt,
      value ? 1 : 0,
    );
  }

  _dart_obx_opt_read_schema _obx_opt_read_schema;

  /// /// Advanced setting recommended to be used together with read-only mode to ensure no data is lost.
  /// /// Ignores the latest data snapshot (committed transaction state) and uses the previous snapshot instead.
  /// /// When used with care (e.g. backup the DB files first), this option may also recover data removed by the latest
  /// /// transaction. Defaults to false.
  void obx_opt_use_previous_commit(
    ffi.Pointer<OBX_store_options> opt,
    bool value,
  ) {
    _obx_opt_use_previous_commit ??= _dylib.lookupFunction<
        _c_obx_opt_use_previous_commit,
        _dart_obx_opt_use_previous_commit>('obx_opt_use_previous_commit');
    return _obx_opt_use_previous_commit(
      opt,
      value ? 1 : 0,
    );
  }

  _dart_obx_opt_use_previous_commit _obx_opt_use_previous_commit;

  /// /// Open store in read-only mode: no schema update, no write transactions. Defaults to false.
  void obx_opt_read_only(
    ffi.Pointer<OBX_store_options> opt,
    bool value,
  ) {
    _obx_opt_read_only ??=
        _dylib.lookupFunction<_c_obx_opt_read_only, _dart_obx_opt_read_only>(
            'obx_opt_read_only');
    return _obx_opt_read_only(
      opt,
      value ? 1 : 0,
    );
  }

  _dart_obx_opt_read_only _obx_opt_read_only;

  /// /// Configure debug logging. Defaults to NONE
  void obx_opt_debug_flags(
    ffi.Pointer<OBX_store_options> opt,
    int flags,
  ) {
    _obx_opt_debug_flags ??= _dylib.lookupFunction<_c_obx_opt_debug_flags,
        _dart_obx_opt_debug_flags>('obx_opt_debug_flags');
    return _obx_opt_debug_flags(
      opt,
      flags,
    );
  }

  _dart_obx_opt_debug_flags _obx_opt_debug_flags;

  /// /// Maximum of async elements in the queue before new elements will be rejected.
  /// /// Hitting this limit usually hints that async processing cannot keep up;
  /// /// data is produced at a faster rate than it can be persisted in the background.
  /// /// In that case, increasing this value is not the only alternative; other values might also optimize throughput.
  /// /// For example, increasing maxInTxDurationMicros may help too.
  void obx_opt_async_max_queue_length(
    ffi.Pointer<OBX_store_options> opt,
    int value,
  ) {
    _obx_opt_async_max_queue_length ??= _dylib.lookupFunction<
        _c_obx_opt_async_max_queue_length,
        _dart_obx_opt_async_max_queue_length>('obx_opt_async_max_queue_length');
    return _obx_opt_async_max_queue_length(
      opt,
      value,
    );
  }

  _dart_obx_opt_async_max_queue_length _obx_opt_async_max_queue_length;

  /// /// Producers (AsyncTx submitter) is throttled when the queue size hits this
  void obx_opt_async_throttle_at_queue_length(
    ffi.Pointer<OBX_store_options> opt,
    int value,
  ) {
    _obx_opt_async_throttle_at_queue_length ??= _dylib.lookupFunction<
            _c_obx_opt_async_throttle_at_queue_length,
            _dart_obx_opt_async_throttle_at_queue_length>(
        'obx_opt_async_throttle_at_queue_length');
    return _obx_opt_async_throttle_at_queue_length(
      opt,
      value,
    );
  }

  _dart_obx_opt_async_throttle_at_queue_length
      _obx_opt_async_throttle_at_queue_length;

  /// /// Sleeping time for throttled producers on each submission
  void obx_opt_async_throttle_micros(
    ffi.Pointer<OBX_store_options> opt,
    int value,
  ) {
    _obx_opt_async_throttle_micros ??= _dylib.lookupFunction<
        _c_obx_opt_async_throttle_micros,
        _dart_obx_opt_async_throttle_micros>('obx_opt_async_throttle_micros');
    return _obx_opt_async_throttle_micros(
      opt,
      value,
    );
  }

  _dart_obx_opt_async_throttle_micros _obx_opt_async_throttle_micros;

  /// /// Maximum duration spent in a transaction before AsyncQ enforces a commit.
  /// /// This becomes relevant if the queue is constantly populated at a high rate.
  void obx_opt_async_max_in_tx_duration(
    ffi.Pointer<OBX_store_options> opt,
    int micros,
  ) {
    _obx_opt_async_max_in_tx_duration ??= _dylib.lookupFunction<
            _c_obx_opt_async_max_in_tx_duration,
            _dart_obx_opt_async_max_in_tx_duration>(
        'obx_opt_async_max_in_tx_duration');
    return _obx_opt_async_max_in_tx_duration(
      opt,
      micros,
    );
  }

  _dart_obx_opt_async_max_in_tx_duration _obx_opt_async_max_in_tx_duration;

  /// /// Maximum operations performed in a transaction before AsyncQ enforces a commit.
  /// /// This becomes relevant if the queue is constantly populated at a high rate.
  void obx_opt_async_max_in_tx_operations(
    ffi.Pointer<OBX_store_options> opt,
    int value,
  ) {
    _obx_opt_async_max_in_tx_operations ??= _dylib.lookupFunction<
            _c_obx_opt_async_max_in_tx_operations,
            _dart_obx_opt_async_max_in_tx_operations>(
        'obx_opt_async_max_in_tx_operations');
    return _obx_opt_async_max_in_tx_operations(
      opt,
      value,
    );
  }

  _dart_obx_opt_async_max_in_tx_operations _obx_opt_async_max_in_tx_operations;

  /// /// Before the AsyncQ is triggered by a new element in queue to starts a new run, it delays actually starting the
  /// /// transaction by this value.
  /// /// This gives a newly starting producer some time to produce more than one a single operation before AsyncQ starts.
  /// /// Note: this value should typically be low to keep latency low and prevent accumulating too much operations.
  void obx_opt_async_pre_txn_delay(
    ffi.Pointer<OBX_store_options> opt,
    int delay_micros,
  ) {
    _obx_opt_async_pre_txn_delay ??= _dylib.lookupFunction<
        _c_obx_opt_async_pre_txn_delay,
        _dart_obx_opt_async_pre_txn_delay>('obx_opt_async_pre_txn_delay');
    return _obx_opt_async_pre_txn_delay(
      opt,
      delay_micros,
    );
  }

  _dart_obx_opt_async_pre_txn_delay _obx_opt_async_pre_txn_delay;

  /// /// Before the AsyncQ is triggered by a new element in queue to starts a new run, it delays actually starting the
  /// /// transaction by this value.
  /// /// This gives a newly starting producer some time to produce more than one a single operation before AsyncQ starts.
  /// /// Note: this value should typically be low to keep latency low and prevent accumulating too much operations.
  void obx_opt_async_pre_txn_delay4(
    ffi.Pointer<OBX_store_options> opt,
    int delay_micros,
    int delay2_micros,
    int min_queue_length_for_delay2,
  ) {
    _obx_opt_async_pre_txn_delay4 ??= _dylib.lookupFunction<
        _c_obx_opt_async_pre_txn_delay4,
        _dart_obx_opt_async_pre_txn_delay4>('obx_opt_async_pre_txn_delay4');
    return _obx_opt_async_pre_txn_delay4(
      opt,
      delay_micros,
      delay2_micros,
      min_queue_length_for_delay2,
    );
  }

  _dart_obx_opt_async_pre_txn_delay4 _obx_opt_async_pre_txn_delay4;

  /// /// Similar to preTxDelay but after a transaction was committed.
  /// /// One of the purposes is to give other transactions some time to execute.
  /// /// In combination with preTxDelay this can prolong non-TX batching time if only a few operations are around.
  void obx_opt_async_post_txn_delay(
    ffi.Pointer<OBX_store_options> opt,
    int delay_micros,
  ) {
    _obx_opt_async_post_txn_delay ??= _dylib.lookupFunction<
        _c_obx_opt_async_post_txn_delay,
        _dart_obx_opt_async_post_txn_delay>('obx_opt_async_post_txn_delay');
    return _obx_opt_async_post_txn_delay(
      opt,
      delay_micros,
    );
  }

  _dart_obx_opt_async_post_txn_delay _obx_opt_async_post_txn_delay;

  /// /// Similar to preTxDelay but after a transaction was committed.
  /// /// One of the purposes is to give other transactions some time to execute.
  /// /// In combination with preTxDelay this can prolong non-TX batching time if only a few operations are around.
  void obx_opt_async_post_txn_delay4(
    ffi.Pointer<OBX_store_options> opt,
    int delay_micros,
    int delay2_micros,
    int min_queue_length_for_delay2,
  ) {
    _obx_opt_async_post_txn_delay4 ??= _dylib.lookupFunction<
        _c_obx_opt_async_post_txn_delay4,
        _dart_obx_opt_async_post_txn_delay4>('obx_opt_async_post_txn_delay4');
    return _obx_opt_async_post_txn_delay4(
      opt,
      delay_micros,
      delay2_micros,
      min_queue_length_for_delay2,
    );
  }

  _dart_obx_opt_async_post_txn_delay4 _obx_opt_async_post_txn_delay4;

  /// /// Numbers of operations below this value are considered "minor refills"
  void obx_opt_async_minor_refill_threshold(
    ffi.Pointer<OBX_store_options> opt,
    int queue_length,
  ) {
    _obx_opt_async_minor_refill_threshold ??= _dylib.lookupFunction<
            _c_obx_opt_async_minor_refill_threshold,
            _dart_obx_opt_async_minor_refill_threshold>(
        'obx_opt_async_minor_refill_threshold');
    return _obx_opt_async_minor_refill_threshold(
      opt,
      queue_length,
    );
  }

  _dart_obx_opt_async_minor_refill_threshold
      _obx_opt_async_minor_refill_threshold;

  /// /// If non-zero, this allows "minor refills" with small batches that came in (off by default).
  void obx_opt_async_minor_refill_max_count(
    ffi.Pointer<OBX_store_options> opt,
    int value,
  ) {
    _obx_opt_async_minor_refill_max_count ??= _dylib.lookupFunction<
            _c_obx_opt_async_minor_refill_max_count,
            _dart_obx_opt_async_minor_refill_max_count>(
        'obx_opt_async_minor_refill_max_count');
    return _obx_opt_async_minor_refill_max_count(
      opt,
      value,
    );
  }

  _dart_obx_opt_async_minor_refill_max_count
      _obx_opt_async_minor_refill_max_count;

  /// /// Default value: 10000, set to 0 to deactivate pooling
  void obx_opt_async_max_tx_pool_size(
    ffi.Pointer<OBX_store_options> opt,
    int value,
  ) {
    _obx_opt_async_max_tx_pool_size ??= _dylib.lookupFunction<
        _c_obx_opt_async_max_tx_pool_size,
        _dart_obx_opt_async_max_tx_pool_size>('obx_opt_async_max_tx_pool_size');
    return _obx_opt_async_max_tx_pool_size(
      opt,
      value,
    );
  }

  _dart_obx_opt_async_max_tx_pool_size _obx_opt_async_max_tx_pool_size;

  /// /// Total cache size; default: ~ 0.5 MB
  void obx_opt_async_object_bytes_max_cache_size(
    ffi.Pointer<OBX_store_options> opt,
    int value,
  ) {
    _obx_opt_async_object_bytes_max_cache_size ??= _dylib.lookupFunction<
            _c_obx_opt_async_object_bytes_max_cache_size,
            _dart_obx_opt_async_object_bytes_max_cache_size>(
        'obx_opt_async_object_bytes_max_cache_size');
    return _obx_opt_async_object_bytes_max_cache_size(
      opt,
      value,
    );
  }

  _dart_obx_opt_async_object_bytes_max_cache_size
      _obx_opt_async_object_bytes_max_cache_size;

  /// /// Maximal size for an object to be cached (only cache smaller ones)
  void obx_opt_async_object_bytes_max_size_to_cache(
    ffi.Pointer<OBX_store_options> opt,
    int value,
  ) {
    _obx_opt_async_object_bytes_max_size_to_cache ??= _dylib.lookupFunction<
            _c_obx_opt_async_object_bytes_max_size_to_cache,
            _dart_obx_opt_async_object_bytes_max_size_to_cache>(
        'obx_opt_async_object_bytes_max_size_to_cache');
    return _obx_opt_async_object_bytes_max_size_to_cache(
      opt,
      value,
    );
  }

  _dart_obx_opt_async_object_bytes_max_size_to_cache
      _obx_opt_async_object_bytes_max_size_to_cache;

  /// /// Free the options.
  /// /// Note: Only free *unused* options, obx_store_open() frees the options internally
  void obx_opt_free(
    ffi.Pointer<OBX_store_options> opt,
  ) {
    _obx_opt_free ??= _dylib
        .lookupFunction<_c_obx_opt_free, _dart_obx_opt_free>('obx_opt_free');
    return _obx_opt_free(
      opt,
    );
  }

  _dart_obx_opt_free _obx_opt_free;

  /// /// Note: the given options are always freed by this function, including when an error occurs.
  /// /// @param opt required parameter holding the data model (obx_opt_model()) and optional options (see obx_opt_*())
  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details
  ffi.Pointer<OBX_store> obx_store_open(
    ffi.Pointer<OBX_store_options> opt,
  ) {
    _obx_store_open ??=
        _dylib.lookupFunction<_c_obx_store_open, _dart_obx_store_open>(
            'obx_store_open');
    return _obx_store_open(
      opt,
    );
  }

  _dart_obx_store_open _obx_store_open;

  /// /// For stores created outside of this C API, e.g. via C++ or Java, this is how you can use it via C too.
  /// /// Like this, it is OK to use the same store instance (same database) from multiple languages in parallel.
  /// /// Note: the store's life time will still be managed outside of the C API;
  /// /// thus ensure that store is not closed while calling any C function on it.
  /// /// Once you are done with the C specific OBX_store, call obx_store_close() to free any C related resources.
  /// /// This, however, will not close the "core store".
  /// /// @param core_store A pointer to the core C++ ObjectStore, or the native JNI handle for a BoxStore.
  ffi.Pointer<OBX_store> obx_store_wrap(
    ffi.Pointer<ffi.Void> core_store,
  ) {
    _obx_store_wrap ??=
        _dylib.lookupFunction<_c_obx_store_wrap, _dart_obx_store_wrap>(
            'obx_store_wrap');
    return _obx_store_wrap(
      core_store,
    );
  }

  _dart_obx_store_wrap _obx_store_wrap;

  /// /// Look for an entity with the given name in the model and return its Entity ID.
  int obx_store_entity_id(
    ffi.Pointer<OBX_store> store,
    ffi.Pointer<ffi.Int8> entity_name,
  ) {
    _obx_store_entity_id ??= _dylib.lookupFunction<_c_obx_store_entity_id,
        _dart_obx_store_entity_id>('obx_store_entity_id');
    return _obx_store_entity_id(
      store,
      entity_name,
    );
  }

  _dart_obx_store_entity_id _obx_store_entity_id;

  /// /// Return the property id from the property name or 0 if the name is not found
  int obx_store_entity_property_id(
    ffi.Pointer<OBX_store> store,
    int entity_id,
    ffi.Pointer<ffi.Int8> property_name,
  ) {
    _obx_store_entity_property_id ??= _dylib.lookupFunction<
        _c_obx_store_entity_property_id,
        _dart_obx_store_entity_property_id>('obx_store_entity_property_id');
    return _obx_store_entity_property_id(
      store,
      entity_id,
      property_name,
    );
  }

  _dart_obx_store_entity_property_id _obx_store_entity_property_id;

  /// /// Await for all (including future) async submissions to be completed (the async queue becomes idle for a moment).
  /// /// @returns true if all submissions were completed or async processing was not started; false if shutting down
  /// /// @returns false if shutting down or an error occurred
  bool obx_store_await_async_completion(
    ffi.Pointer<OBX_store> store,
  ) {
    _obx_store_await_async_completion ??= _dylib.lookupFunction<
            _c_obx_store_await_async_completion,
            _dart_obx_store_await_async_completion>(
        'obx_store_await_async_completion');
    return _obx_store_await_async_completion(
          store,
        ) !=
        0;
  }

  _dart_obx_store_await_async_completion _obx_store_await_async_completion;

  /// /// Await for previously submitted async operations to be completed (the async queue does not have to become idle).
  /// /// @returns true if all submissions were completed or async processing was not started
  /// /// @returns false if shutting down or an error occurred
  bool obx_store_await_async_submitted(
    ffi.Pointer<OBX_store> store,
  ) {
    _obx_store_await_async_submitted ??= _dylib.lookupFunction<
            _c_obx_store_await_async_submitted,
            _dart_obx_store_await_async_submitted>(
        'obx_store_await_async_submitted');
    return _obx_store_await_async_submitted(
          store,
        ) !=
        0;
  }

  _dart_obx_store_await_async_submitted _obx_store_await_async_submitted;

  /// /// Configure debug logging
  int obx_store_debug_flags(
    ffi.Pointer<OBX_store> store,
    int flags,
  ) {
    _obx_store_debug_flags ??= _dylib.lookupFunction<_c_obx_store_debug_flags,
        _dart_obx_store_debug_flags>('obx_store_debug_flags');
    return _obx_store_debug_flags(
      store,
      flags,
    );
  }

  _dart_obx_store_debug_flags _obx_store_debug_flags;

  /// /// @returns true if the store was opened with a previous commit
  /// /// @see obx_opt_use_previous_commit()
  bool obx_store_opened_with_previous_commit(
    ffi.Pointer<OBX_store> store,
  ) {
    _obx_store_opened_with_previous_commit ??= _dylib.lookupFunction<
            _c_obx_store_opened_with_previous_commit,
            _dart_obx_store_opened_with_previous_commit>(
        'obx_store_opened_with_previous_commit');
    return _obx_store_opened_with_previous_commit(
          store,
        ) !=
        0;
  }

  _dart_obx_store_opened_with_previous_commit
      _obx_store_opened_with_previous_commit;

  /// /// @param store may be NULL
  int obx_store_close(
    ffi.Pointer<OBX_store> store,
  ) {
    _obx_store_close ??=
        _dylib.lookupFunction<_c_obx_store_close, _dart_obx_store_close>(
            'obx_store_close');
    return _obx_store_close(
      store,
    );
  }

  _dart_obx_store_close _obx_store_close;

  /// /// Create a write transaction (read and write).
  /// /// Transaction creation can be nested (recursive), however only the outermost transaction is relevant on the DB level.
  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details; e.g. code
  /// ///               OBX_ERROR_ILLEGAL_STATE will be set if called when inside a read transaction.
  ffi.Pointer<OBX_txn> obx_txn_write(
    ffi.Pointer<OBX_store> store,
  ) {
    _obx_txn_write ??= _dylib
        .lookupFunction<_c_obx_txn_write, _dart_obx_txn_write>('obx_txn_write');
    return _obx_txn_write(
      store,
    );
  }

  _dart_obx_txn_write _obx_txn_write;

  /// /// Create a read transaction (read only).
  /// /// Transaction creation can be nested (recursive), however only the outermost transaction is relevant on the DB level.
  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details
  ffi.Pointer<OBX_txn> obx_txn_read(
    ffi.Pointer<OBX_store> store,
  ) {
    _obx_txn_read ??= _dylib
        .lookupFunction<_c_obx_txn_read, _dart_obx_txn_read>('obx_txn_read');
    return _obx_txn_read(
      store,
    );
  }

  _dart_obx_txn_read _obx_txn_read;

  /// /// "Finish" this write transaction successfully and close it, performing a commit if this is the top level
  /// /// transaction and all inner transactions (if any) were also successful (obx_txn_success() was called on them).
  /// /// Because this also closes the given transaction, the given OBX_txn pointer must not be used afterwards.
  /// /// @return OBX_ERROR_ILLEGAL_STATE if the given transaction is not a write transaction.
  int obx_txn_success(
    ffi.Pointer<OBX_txn> txn,
  ) {
    _obx_txn_success ??=
        _dylib.lookupFunction<_c_obx_txn_success, _dart_obx_txn_success>(
            'obx_txn_success');
    return _obx_txn_success(
      txn,
    );
  }

  _dart_obx_txn_success _obx_txn_success;

  /// /// Close (free) the transaction (read or write); the given OBX_txn pointer must not be used afterwards.
  /// /// While this is the only way to release read transactions, this call is also an alternative to call obx_txn_success()
  /// /// on write transactions.
  /// /// In combination with obx_txn_mark_success(), this potentially commits or aborts a write transaction on the DB:
  /// /// 1) If it's an outermost TX and all (inner) TXs were marked successful, this commits the transaction.
  /// /// 2) If this transaction was not marked successful, this aborts the transaction (even if it's an inner TX).
  /// /// If an error is returned (e.g., a commit failed because DB is full), you can assume that the transaction was closed.
  /// /// @param txn may be NULL
  int obx_txn_close(
    ffi.Pointer<OBX_txn> txn,
  ) {
    _obx_txn_close ??= _dylib
        .lookupFunction<_c_obx_txn_close, _dart_obx_txn_close>('obx_txn_close');
    return _obx_txn_close(
      txn,
    );
  }

  _dart_obx_txn_close _obx_txn_close;

  /// /// Abort the underlying transaction immediately and thus frees DB resources.
  /// /// Only obx_txn_close() is allowed to be called on the transaction after calling this.
  int obx_txn_abort(
    ffi.Pointer<OBX_txn> txn,
  ) {
    _obx_txn_abort ??= _dylib
        .lookupFunction<_c_obx_txn_abort, _dart_obx_txn_abort>('obx_txn_abort');
    return _obx_txn_abort(
      txn,
    );
  }

  _dart_obx_txn_abort _obx_txn_abort;

  /// /// Mark the given write transaction as successful or failed.
  /// /// You can call this method multiple times with different values before calling obx_txn_close() on the transaction.
  /// /// @return OBX_ERROR_ILLEGAL_STATE if the given transaction is not a write transaction.
  int obx_txn_mark_success(
    ffi.Pointer<OBX_txn> txn,
    bool wasSuccessful,
  ) {
    _obx_txn_mark_success ??= _dylib.lookupFunction<_c_obx_txn_mark_success,
        _dart_obx_txn_mark_success>('obx_txn_mark_success');
    return _obx_txn_mark_success(
      txn,
      wasSuccessful ? 1 : 0,
    );
  }

  _dart_obx_txn_mark_success _obx_txn_mark_success;

  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details
  ffi.Pointer<OBX_cursor> obx_cursor(
    ffi.Pointer<OBX_txn> txn,
    int entity_id,
  ) {
    _obx_cursor ??=
        _dylib.lookupFunction<_c_obx_cursor, _dart_obx_cursor>('obx_cursor');
    return _obx_cursor(
      txn,
      entity_id,
    );
  }

  _dart_obx_cursor _obx_cursor;

  /// /// @param cursor may be NULL
  int obx_cursor_close(
    ffi.Pointer<OBX_cursor> cursor,
  ) {
    _obx_cursor_close ??=
        _dylib.lookupFunction<_c_obx_cursor_close, _dart_obx_cursor_close>(
            'obx_cursor_close');
    return _obx_cursor_close(
      cursor,
    );
  }

  _dart_obx_cursor_close _obx_cursor_close;

  /// /// Call this when putting an object to generate/prepare an ID for it.
  /// /// @param id_or_zero The ID of the entity. If you pass 0, this will generate a new one.
  /// /// @seealso obx_box_id_for_put()
  int obx_cursor_id_for_put(
    ffi.Pointer<OBX_cursor> cursor,
    int id_or_zero,
  ) {
    _obx_cursor_id_for_put ??= _dylib.lookupFunction<_c_obx_cursor_id_for_put,
        _dart_obx_cursor_id_for_put>('obx_cursor_id_for_put');
    return _obx_cursor_id_for_put(
      cursor,
      id_or_zero,
    );
  }

  _dart_obx_cursor_id_for_put _obx_cursor_id_for_put;

  /// /// Puts the given object data using the given ID.
  /// /// A "put" in ObjectBox follows "insert or update" semantics;
  /// /// New objects (no pre-existing object for given ID) are inserted while existing objects are replaced/updated.
  /// /// @param id non-zero
  int obx_cursor_put(
    ffi.Pointer<OBX_cursor> cursor,
    int id,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    _obx_cursor_put ??=
        _dylib.lookupFunction<_c_obx_cursor_put, _dart_obx_cursor_put>(
            'obx_cursor_put');
    return _obx_cursor_put(
      cursor,
      id,
      data,
      size,
    );
  }

  _dart_obx_cursor_put _obx_cursor_put;

  /// /// Like put obx_cursor_put(), but takes an additional parameter (4th parameter) for choosing a put mode.
  /// /// @param id non-zero
  /// /// @param mode Changes the put semantics to the given mode, e.g. OBXPutMode_INSERT or OBXPutMode_UPDATE.
  /// /// @returns OBX_SUCCESS if the put operation was successful
  /// /// @returns OBX_ERROR_ID_ALREADY_EXISTS OBXPutMode_INSERT was used, but an existing object was found using the given ID
  /// /// @returns OBX_ERROR_ID_NOT_FOUND OBXPutMode_UPDATE was used, but no object was found for the given ID
  int obx_cursor_put4(
    ffi.Pointer<OBX_cursor> cursor,
    int id,
    ffi.Pointer<ffi.Void> data,
    int size,
    int mode,
  ) {
    _obx_cursor_put4 ??=
        _dylib.lookupFunction<_c_obx_cursor_put4, _dart_obx_cursor_put4>(
            'obx_cursor_put4');
    return _obx_cursor_put4(
      cursor,
      id,
      data,
      size,
      mode,
    );
  }

  _dart_obx_cursor_put4 _obx_cursor_put4;

  /// /// An optimized version of obx_cursor_put() if you can ensure that the given ID is not used yet.
  /// /// Typically used right after getting a new ID via obx_cursor_id_for_put().
  /// /// WARNING: using this incorrectly (an object with the given ID already exists) may result in inconsistent data
  /// /// (e.g. indexes do not get updated).
  /// /// @param id non-zero
  int obx_cursor_put_new(
    ffi.Pointer<OBX_cursor> cursor,
    int id,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    _obx_cursor_put_new ??=
        _dylib.lookupFunction<_c_obx_cursor_put_new, _dart_obx_cursor_put_new>(
            'obx_cursor_put_new');
    return _obx_cursor_put_new(
      cursor,
      id,
      data,
      size,
    );
  }

  _dart_obx_cursor_put_new _obx_cursor_put_new;

  /// /// Convenience for obx_cursor_put4() with OBXPutMode_INSERT.
  /// /// @param id non-zero
  /// /// @returns OBX_ERROR_ID_ALREADY_EXISTS if an insert fails because of a colliding ID
  int obx_cursor_insert(
    ffi.Pointer<OBX_cursor> cursor,
    int id,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    _obx_cursor_insert ??=
        _dylib.lookupFunction<_c_obx_cursor_insert, _dart_obx_cursor_insert>(
            'obx_cursor_insert');
    return _obx_cursor_insert(
      cursor,
      id,
      data,
      size,
    );
  }

  _dart_obx_cursor_insert _obx_cursor_insert;

  /// /// Convenience for obx_cursor_put4() with OBXPutMode_UPDATE.
  /// /// @param id non-zero
  /// /// @returns OBX_ERROR_ID_NOT_FOUND  if an update fails because the given ID does not represent any object
  int obx_cursor_update(
    ffi.Pointer<OBX_cursor> cursor,
    int id,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    _obx_cursor_update ??=
        _dylib.lookupFunction<_c_obx_cursor_update, _dart_obx_cursor_update>(
            'obx_cursor_update');
    return _obx_cursor_update(
      cursor,
      id,
      data,
      size,
    );
  }

  _dart_obx_cursor_update _obx_cursor_update;

  /// /// FB ID slot must be present; new entities must prepare the slot using the special value OBX_ID_NEW.
  /// /// Alternatively, you may also pass 0 to indicate a new entity if you are aware that FlatBuffers builders typically
  /// /// skip zero values by default. Thus, you have to "force" writing the zero in FlatBuffers.
  /// /// @param data object data, non-const because the ID slot will be written (mutated) for new entites (see above)
  /// /// @returns id if the object could be put, or 0 in case of an error
  int obx_cursor_put_object(
    ffi.Pointer<OBX_cursor> cursor,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    _obx_cursor_put_object ??= _dylib.lookupFunction<_c_obx_cursor_put_object,
        _dart_obx_cursor_put_object>('obx_cursor_put_object');
    return _obx_cursor_put_object(
      cursor,
      data,
      size,
    );
  }

  _dart_obx_cursor_put_object _obx_cursor_put_object;

  /// /// @overload obx_id obx_cursor_put_object(OBX_cursor* cursor, void* data, size_t size)
  int obx_cursor_put_object4(
    ffi.Pointer<OBX_cursor> cursor,
    ffi.Pointer<ffi.Void> data,
    int size,
    int mode,
  ) {
    _obx_cursor_put_object4 ??= _dylib.lookupFunction<_c_obx_cursor_put_object4,
        _dart_obx_cursor_put_object4>('obx_cursor_put_object4');
    return _obx_cursor_put_object4(
      cursor,
      data,
      size,
      mode,
    );
  }

  _dart_obx_cursor_put_object4 _obx_cursor_put_object4;

  int obx_cursor_get(
    ffi.Pointer<OBX_cursor> cursor,
    int id,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    ffi.Pointer<ffi.IntPtr> size,
  ) {
    _obx_cursor_get ??=
        _dylib.lookupFunction<_c_obx_cursor_get, _dart_obx_cursor_get>(
            'obx_cursor_get');
    return _obx_cursor_get(
      cursor,
      id,
      data,
      size,
    );
  }

  _dart_obx_cursor_get _obx_cursor_get;

  /// /// Get all objects as bytes.
  /// /// For larger quantities, it's recommended to iterate using obx_cursor_first and obx_cursor_next.
  /// /// However, if the calling overhead is high (e.g., for language bindings), this method helps.
  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details
  ffi.Pointer<OBX_bytes_array> obx_cursor_get_all(
    ffi.Pointer<OBX_cursor> cursor,
  ) {
    _obx_cursor_get_all ??=
        _dylib.lookupFunction<_c_obx_cursor_get_all, _dart_obx_cursor_get_all>(
            'obx_cursor_get_all');
    return _obx_cursor_get_all(
      cursor,
    );
  }

  _dart_obx_cursor_get_all _obx_cursor_get_all;

  int obx_cursor_first(
    ffi.Pointer<OBX_cursor> cursor,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    ffi.Pointer<ffi.IntPtr> size,
  ) {
    _obx_cursor_first ??=
        _dylib.lookupFunction<_c_obx_cursor_first, _dart_obx_cursor_first>(
            'obx_cursor_first');
    return _obx_cursor_first(
      cursor,
      data,
      size,
    );
  }

  _dart_obx_cursor_first _obx_cursor_first;

  int obx_cursor_next(
    ffi.Pointer<OBX_cursor> cursor,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    ffi.Pointer<ffi.IntPtr> size,
  ) {
    _obx_cursor_next ??=
        _dylib.lookupFunction<_c_obx_cursor_next, _dart_obx_cursor_next>(
            'obx_cursor_next');
    return _obx_cursor_next(
      cursor,
      data,
      size,
    );
  }

  _dart_obx_cursor_next _obx_cursor_next;

  int obx_cursor_seek(
    ffi.Pointer<OBX_cursor> cursor,
    int id,
  ) {
    _obx_cursor_seek ??=
        _dylib.lookupFunction<_c_obx_cursor_seek, _dart_obx_cursor_seek>(
            'obx_cursor_seek');
    return _obx_cursor_seek(
      cursor,
      id,
    );
  }

  _dart_obx_cursor_seek _obx_cursor_seek;

  int obx_cursor_current(
    ffi.Pointer<OBX_cursor> cursor,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    ffi.Pointer<ffi.IntPtr> size,
  ) {
    _obx_cursor_current ??=
        _dylib.lookupFunction<_c_obx_cursor_current, _dart_obx_cursor_current>(
            'obx_cursor_current');
    return _obx_cursor_current(
      cursor,
      data,
      size,
    );
  }

  _dart_obx_cursor_current _obx_cursor_current;

  int obx_cursor_remove(
    ffi.Pointer<OBX_cursor> cursor,
    int id,
  ) {
    _obx_cursor_remove ??=
        _dylib.lookupFunction<_c_obx_cursor_remove, _dart_obx_cursor_remove>(
            'obx_cursor_remove');
    return _obx_cursor_remove(
      cursor,
      id,
    );
  }

  _dart_obx_cursor_remove _obx_cursor_remove;

  int obx_cursor_remove_all(
    ffi.Pointer<OBX_cursor> cursor,
  ) {
    _obx_cursor_remove_all ??= _dylib.lookupFunction<_c_obx_cursor_remove_all,
        _dart_obx_cursor_remove_all>('obx_cursor_remove_all');
    return _obx_cursor_remove_all(
      cursor,
    );
  }

  _dart_obx_cursor_remove_all _obx_cursor_remove_all;

  /// /// Count the number of available objects
  int obx_cursor_count(
    ffi.Pointer<OBX_cursor> cursor,
    ffi.Pointer<ffi.Uint64> count,
  ) {
    _obx_cursor_count ??=
        _dylib.lookupFunction<_c_obx_cursor_count, _dart_obx_cursor_count>(
            'obx_cursor_count');
    return _obx_cursor_count(
      cursor,
      count,
    );
  }

  _dart_obx_cursor_count _obx_cursor_count;

  /// /// Count the number of available objects up to the specified maximum
  int obx_cursor_count_max(
    ffi.Pointer<OBX_cursor> cursor,
    int max_count,
    ffi.Pointer<ffi.Uint64> out_count,
  ) {
    _obx_cursor_count_max ??= _dylib.lookupFunction<_c_obx_cursor_count_max,
        _dart_obx_cursor_count_max>('obx_cursor_count_max');
    return _obx_cursor_count_max(
      cursor,
      max_count,
      out_count,
    );
  }

  _dart_obx_cursor_count_max _obx_cursor_count_max;

  /// /// Return true if there is no object available (false if at least one object is available)
  int obx_cursor_is_empty(
    ffi.Pointer<OBX_cursor> cursor,
    ffi.Pointer<ffi.Uint8> out_is_empty,
  ) {
    _obx_cursor_is_empty ??= _dylib.lookupFunction<_c_obx_cursor_is_empty,
        _dart_obx_cursor_is_empty>('obx_cursor_is_empty');
    return _obx_cursor_is_empty(
      cursor,
      out_is_empty,
    );
  }

  _dart_obx_cursor_is_empty _obx_cursor_is_empty;

  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details
  ffi.Pointer<OBX_bytes_array> obx_cursor_backlinks(
    ffi.Pointer<OBX_cursor> cursor,
    int entity_id,
    int property_id,
    int id,
  ) {
    _obx_cursor_backlinks ??= _dylib.lookupFunction<_c_obx_cursor_backlinks,
        _dart_obx_cursor_backlinks>('obx_cursor_backlinks');
    return _obx_cursor_backlinks(
      cursor,
      entity_id,
      property_id,
      id,
    );
  }

  _dart_obx_cursor_backlinks _obx_cursor_backlinks;

  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details
  ffi.Pointer<OBX_id_array> obx_cursor_backlink_ids(
    ffi.Pointer<OBX_cursor> cursor,
    int entity_id,
    int property_id,
    int id,
  ) {
    _obx_cursor_backlink_ids ??= _dylib.lookupFunction<
        _c_obx_cursor_backlink_ids,
        _dart_obx_cursor_backlink_ids>('obx_cursor_backlink_ids');
    return _obx_cursor_backlink_ids(
      cursor,
      entity_id,
      property_id,
      id,
    );
  }

  _dart_obx_cursor_backlink_ids _obx_cursor_backlink_ids;

  int obx_cursor_rel_put(
    ffi.Pointer<OBX_cursor> cursor,
    int relation_id,
    int source_id,
    int target_id,
  ) {
    _obx_cursor_rel_put ??=
        _dylib.lookupFunction<_c_obx_cursor_rel_put, _dart_obx_cursor_rel_put>(
            'obx_cursor_rel_put');
    return _obx_cursor_rel_put(
      cursor,
      relation_id,
      source_id,
      target_id,
    );
  }

  _dart_obx_cursor_rel_put _obx_cursor_rel_put;

  int obx_cursor_rel_remove(
    ffi.Pointer<OBX_cursor> cursor,
    int relation_id,
    int source_id,
    int target_id,
  ) {
    _obx_cursor_rel_remove ??= _dylib.lookupFunction<_c_obx_cursor_rel_remove,
        _dart_obx_cursor_rel_remove>('obx_cursor_rel_remove');
    return _obx_cursor_rel_remove(
      cursor,
      relation_id,
      source_id,
      target_id,
    );
  }

  _dart_obx_cursor_rel_remove _obx_cursor_rel_remove;

  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details
  ffi.Pointer<OBX_id_array> obx_cursor_rel_ids(
    ffi.Pointer<OBX_cursor> cursor,
    int relation_id,
    int source_id,
  ) {
    _obx_cursor_rel_ids ??=
        _dylib.lookupFunction<_c_obx_cursor_rel_ids, _dart_obx_cursor_rel_ids>(
            'obx_cursor_rel_ids');
    return _obx_cursor_rel_ids(
      cursor,
      relation_id,
      source_id,
    );
  }

  _dart_obx_cursor_rel_ids _obx_cursor_rel_ids;

  /// /// Time series: get the limits (min/max time values) over all objects
  /// /// @param out_min_id pointer to receive an output (may be NULL)
  /// /// @param out_min_value pointer to receive an output (may be NULL)
  /// /// @param out_max_id pointer to receive an output (may be NULL)
  /// /// @param out_max_value pointer to receive an output (may be NULL)
  /// /// @returns OBX_NOT_FOUND if no objects are stored
  int obx_cursor_ts_min_max(
    ffi.Pointer<OBX_cursor> cursor,
    ffi.Pointer<ffi.Uint64> out_min_id,
    ffi.Pointer<ffi.Int64> out_min_value,
    ffi.Pointer<ffi.Uint64> out_max_id,
    ffi.Pointer<ffi.Int64> out_max_value,
  ) {
    _obx_cursor_ts_min_max ??= _dylib.lookupFunction<_c_obx_cursor_ts_min_max,
        _dart_obx_cursor_ts_min_max>('obx_cursor_ts_min_max');
    return _obx_cursor_ts_min_max(
      cursor,
      out_min_id,
      out_min_value,
      out_max_id,
      out_max_value,
    );
  }

  _dart_obx_cursor_ts_min_max _obx_cursor_ts_min_max;

  /// /// Time series: get the limits (min/max time values) over objects within the given time range
  /// /// @param out_min_id pointer to receive an output (may be NULL)
  /// /// @param out_min_value pointer to receive an output (may be NULL)
  /// /// @param out_max_id pointer to receive an output (may be NULL)
  /// /// @param out_max_value pointer to receive an output (may be NULL)
  /// /// @returns OBX_NOT_FOUND if no objects are stored in the given range
  int obx_cursor_ts_min_max_range(
    ffi.Pointer<OBX_cursor> cursor,
    int range_begin,
    int range_end,
    ffi.Pointer<ffi.Uint64> out_min_id,
    ffi.Pointer<ffi.Int64> out_min_value,
    ffi.Pointer<ffi.Uint64> out_max_id,
    ffi.Pointer<ffi.Int64> out_max_value,
  ) {
    _obx_cursor_ts_min_max_range ??= _dylib.lookupFunction<
        _c_obx_cursor_ts_min_max_range,
        _dart_obx_cursor_ts_min_max_range>('obx_cursor_ts_min_max_range');
    return _obx_cursor_ts_min_max_range(
      cursor,
      range_begin,
      range_end,
      out_min_id,
      out_min_value,
      out_max_id,
      out_max_value,
    );
  }

  _dart_obx_cursor_ts_min_max_range _obx_cursor_ts_min_max_range;

  /// /// Get access to the box for the given entity. A box may be used across threads.
  /// /// Boxes are shared instances and managed by the store so there's no need to close/free them manually.
  ffi.Pointer<OBX_box> obx_box(
    ffi.Pointer<OBX_store> store,
    int entity_id,
  ) {
    _obx_box ??= _dylib.lookupFunction<_c_obx_box, _dart_obx_box>('obx_box');
    return _obx_box(
      store,
      entity_id,
    );
  }

  _dart_obx_box _obx_box;

  /// /// Get access to the store this box belongs to - utility for when you only have access to the `box` variable but need
  /// /// some store method, such as starting a transaction.
  /// /// This doesn't produce a new instance of OBX_store, just gives you back the same pointer you've created this box with.
  /// /// In other words, don't close the returned store separately.
  ffi.Pointer<OBX_store> obx_box_store(
    ffi.Pointer<OBX_box> box,
  ) {
    _obx_box_store ??= _dylib
        .lookupFunction<_c_obx_box_store, _dart_obx_box_store>('obx_box_store');
    return _obx_box_store(
      box,
    );
  }

  _dart_obx_box_store _obx_box_store;

  /// /// Check whether a given object exists in the box.
  int obx_box_contains(
    ffi.Pointer<OBX_box> box,
    int id,
    ffi.Pointer<ffi.Uint8> out_contains,
  ) {
    _obx_box_contains ??=
        _dylib.lookupFunction<_c_obx_box_contains, _dart_obx_box_contains>(
            'obx_box_contains');
    return _obx_box_contains(
      box,
      id,
      out_contains,
    );
  }

  _dart_obx_box_contains _obx_box_contains;

  /// /// Check whether this box contains objects with all of the IDs given.
  /// /// @param out_contains is set to true if all of the IDs are present, otherwise false
  int obx_box_contains_many(
    ffi.Pointer<OBX_box> box,
    ffi.Pointer<OBX_id_array> ids,
    ffi.Pointer<ffi.Uint8> out_contains,
  ) {
    _obx_box_contains_many ??= _dylib.lookupFunction<_c_obx_box_contains_many,
        _dart_obx_box_contains_many>('obx_box_contains_many');
    return _obx_box_contains_many(
      box,
      ids,
      out_contains,
    );
  }

  _dart_obx_box_contains_many _obx_box_contains_many;

  /// /// Fetch a single object from the box; must be called inside a (reentrant) transaction.
  /// /// The exposed data comes directly from the OS to allow zero-copy access, which limits the data lifetime:
  /// /// \attention The exposed data is only valid as long as the (top) transaction is still active and no write
  /// /// \attention operation (e.g. put/remove) was executed. Accessing data after this is undefined behavior.
  /// /// @returns OBX_ERROR_ILLEGAL_STATE if not inside of an active transaction (see obx_txn_read() and obx_txn_write())
  int obx_box_get(
    ffi.Pointer<OBX_box> box,
    int id,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    ffi.Pointer<ffi.IntPtr> size,
  ) {
    _obx_box_get ??=
        _dylib.lookupFunction<_c_obx_box_get, _dart_obx_box_get>('obx_box_get');
    return _obx_box_get(
      box,
      id,
      data,
      size,
    );
  }

  _dart_obx_box_get _obx_box_get;

  /// /// Fetch multiple objects for the given IDs from the box; must be called inside a (reentrant) transaction.
  /// /// \attention See obx_box_get() for important notes on the limited lifetime of the exposed data.
  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details; e.g. code
  /// ///               OBX_ERROR_ILLEGAL_STATE will be set if not inside of an active transaction
  /// ///               (see obx_txn_read() and obx_txn_write())
  ffi.Pointer<OBX_bytes_array> obx_box_get_many(
    ffi.Pointer<OBX_box> box,
    ffi.Pointer<OBX_id_array> ids,
  ) {
    _obx_box_get_many ??=
        _dylib.lookupFunction<_c_obx_box_get_many, _dart_obx_box_get_many>(
            'obx_box_get_many');
    return _obx_box_get_many(
      box,
      ids,
    );
  }

  _dart_obx_box_get_many _obx_box_get_many;

  /// /// Fetch all objects from the box; must be called inside a (reentrant) transaction.
  /// /// NOTE: don't call this in 32 bit mode! Use obx_box_visit_all() instead.
  /// /// \attention See obx_box_get() for important notes on the limited lifetime of the exposed data.
  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details; e.g. code
  /// ///               OBX_ERROR_ILLEGAL_STATE will be set if not inside of an active transaction
  /// ///               (see obx_txn_read() and obx_txn_write())
  ffi.Pointer<OBX_bytes_array> obx_box_get_all(
    ffi.Pointer<OBX_box> box,
  ) {
    _obx_box_get_all ??=
        _dylib.lookupFunction<_c_obx_box_get_all, _dart_obx_box_get_all>(
            'obx_box_get_all');
    return _obx_box_get_all(
      box,
    );
  }

  _dart_obx_box_get_all _obx_box_get_all;

  /// /// Read given objects from the database in a single transaction.
  /// /// Call the visitor() on each object, passing user_data, object data & size as arguments.
  /// /// The given visitor must return true to keep receiving results, false to cancel.
  /// /// If an object is not found, the visitor() is still called, passing NULL as data and a 0 as size.
  int obx_box_visit_many(
    ffi.Pointer<OBX_box> box,
    ffi.Pointer<OBX_id_array> ids,
    ffi.Pointer<ffi.NativeFunction<obx_data_visitor>> visitor,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    _obx_box_visit_many ??=
        _dylib.lookupFunction<_c_obx_box_visit_many, _dart_obx_box_visit_many>(
            'obx_box_visit_many');
    return _obx_box_visit_many(
      box,
      ids,
      visitor,
      user_data,
    );
  }

  _dart_obx_box_visit_many _obx_box_visit_many;

  /// /// Read all objects in a single transaction.
  /// /// Calls the visitor() on each object, passing visitor_arg, object data & size as arguments.
  /// /// The given visitor must return true to keep receiving results, false to cancel.
  int obx_box_visit_all(
    ffi.Pointer<OBX_box> box,
    ffi.Pointer<ffi.NativeFunction<obx_data_visitor>> visitor,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    _obx_box_visit_all ??=
        _dylib.lookupFunction<_c_obx_box_visit_all, _dart_obx_box_visit_all>(
            'obx_box_visit_all');
    return _obx_box_visit_all(
      box,
      visitor,
      user_data,
    );
  }

  _dart_obx_box_visit_all _obx_box_visit_all;

  /// /// Prepares an ID for insertion: pass in 0 (zero) to reserve a new ID or an existing ID to check/prepare it.
  /// /// @param id_or_zero The ID of the entity. If you pass 0, this will generate a new one.
  /// /// @seealso obx_cursor_id_for_put()
  int obx_box_id_for_put(
    ffi.Pointer<OBX_box> box,
    int id_or_zero,
  ) {
    _obx_box_id_for_put ??=
        _dylib.lookupFunction<_c_obx_box_id_for_put, _dart_obx_box_id_for_put>(
            'obx_box_id_for_put');
    return _obx_box_id_for_put(
      box,
      id_or_zero,
    );
  }

  _dart_obx_box_id_for_put _obx_box_id_for_put;

  /// /// Reserve the given number of (new) IDs for insertion; a bulk version of obx_box_id_for_put().
  /// /// @param count number of IDs to reserve, max 10000
  /// /// @param out_first_id the first ID of the sequence as
  /// /// @returns an error in case the required number of IDs could not be reserved.
  int obx_box_ids_for_put(
    ffi.Pointer<OBX_box> box,
    int count,
    ffi.Pointer<ffi.Uint64> out_first_id,
  ) {
    _obx_box_ids_for_put ??= _dylib.lookupFunction<_c_obx_box_ids_for_put,
        _dart_obx_box_ids_for_put>('obx_box_ids_for_put');
    return _obx_box_ids_for_put(
      box,
      count,
      out_first_id,
    );
  }

  _dart_obx_box_ids_for_put _obx_box_ids_for_put;

  /// /// Put the given object using the given ID synchronously; note that the ID also must match the one present in data.
  /// /// @param id An ID usually reserved via obx_box_id_for_put().
  /// /// @see obx_box_put5() to additionally provide a put mode
  /// /// @see obx_box_put_object() for a variant not requiring reserving IDs
  int obx_box_put(
    ffi.Pointer<OBX_box> box,
    int id,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    _obx_box_put ??=
        _dylib.lookupFunction<_c_obx_box_put, _dart_obx_box_put>('obx_box_put');
    return _obx_box_put(
      box,
      id,
      data,
      size,
    );
  }

  _dart_obx_box_put _obx_box_put;

  /// /// Convenience for obx_box_put5() with OBXPutMode_INSERT.
  /// /// @param id non-zero
  /// /// @returns OBX_ERROR_ID_ALREADY_EXISTS if an insert fails because of a colliding ID
  int obx_box_insert(
    ffi.Pointer<OBX_box> box,
    int id,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    _obx_box_insert ??=
        _dylib.lookupFunction<_c_obx_box_insert, _dart_obx_box_insert>(
            'obx_box_insert');
    return _obx_box_insert(
      box,
      id,
      data,
      size,
    );
  }

  _dart_obx_box_insert _obx_box_insert;

  /// /// Convenience for obx_cursor_put4() with OBXPutMode_UPDATE.
  /// /// @param id non-zero
  /// /// @returns OBX_ERROR_ID_NOT_FOUND  if an update fails because the given ID does not represent any object
  int obx_box_update(
    ffi.Pointer<OBX_box> box,
    int id,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    _obx_box_update ??=
        _dylib.lookupFunction<_c_obx_box_update, _dart_obx_box_update>(
            'obx_box_update');
    return _obx_box_update(
      box,
      id,
      data,
      size,
    );
  }

  _dart_obx_box_update _obx_box_update;

  /// /// Put the given object using the given ID synchronously; note that the ID also must match the one present in data.
  /// /// @param id An ID usually reserved via obx_box_id_for_put().
  /// /// @see obx_box_put() for standard put mode
  /// /// @see obx_box_put_object() for a variant not requiring reserving IDs
  int obx_box_put5(
    ffi.Pointer<OBX_box> box,
    int id,
    ffi.Pointer<ffi.Void> data,
    int size,
    int mode,
  ) {
    _obx_box_put5 ??= _dylib
        .lookupFunction<_c_obx_box_put5, _dart_obx_box_put5>('obx_box_put5');
    return _obx_box_put5(
      box,
      id,
      data,
      size,
      mode,
    );
  }

  _dart_obx_box_put5 _obx_box_put5;

  /// /// FB ID slot must be present in the given data; new entities must have an ID value of zero or OBX_ID_NEW.
  /// /// @param data writable data buffer, which may be updated for the ID
  /// /// @returns 0 on error
  int obx_box_put_object(
    ffi.Pointer<OBX_box> box,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    _obx_box_put_object ??=
        _dylib.lookupFunction<_c_obx_box_put_object, _dart_obx_box_put_object>(
            'obx_box_put_object');
    return _obx_box_put_object(
      box,
      data,
      size,
    );
  }

  _dart_obx_box_put_object _obx_box_put_object;

  /// /// FB ID slot must be present in the given data; new entities must have an ID value of zero or OBX_ID_NEW
  /// /// @param data writable data buffer, which may be updated for the ID
  /// /// @returns 0 on error, e.g. the entity was not put according to OBXPutMode
  int obx_box_put_object4(
    ffi.Pointer<OBX_box> box,
    ffi.Pointer<ffi.Void> data,
    int size,
    int mode,
  ) {
    _obx_box_put_object4 ??= _dylib.lookupFunction<_c_obx_box_put_object4,
        _dart_obx_box_put_object4>('obx_box_put_object4');
    return _obx_box_put_object4(
      box,
      data,
      size,
      mode,
    );
  }

  _dart_obx_box_put_object4 _obx_box_put_object4;

  /// /// Put all given objects in the database in a single transaction. If any of the individual objects failed to put,
  /// /// none are put and an error is returned, equivalent to calling obx_box_put_many5() with fail_on_id_failure=true.
  /// /// @param ids Previously allocated IDs for the given given objects (e.g. using obx_box_ids_for_put)
  int obx_box_put_many(
    ffi.Pointer<OBX_box> box,
    ffi.Pointer<OBX_bytes_array> objects,
    ffi.Pointer<ffi.Uint64> ids,
    int mode,
  ) {
    _obx_box_put_many ??=
        _dylib.lookupFunction<_c_obx_box_put_many, _dart_obx_box_put_many>(
            'obx_box_put_many');
    return _obx_box_put_many(
      box,
      objects,
      ids,
      mode,
    );
  }

  _dart_obx_box_put_many _obx_box_put_many;

  /// /// Like obx_box_put_many(), but with an additional flag indicating how to treat ID failures with OBXPutMode_INSERT and
  /// /// OBXPutMode_UPDATE.
  /// /// @param fail_on_id_failure if set to true, an ID failure (OBX_ERROR_ID_ALREADY_EXISTS and OBX_ERROR_ID_NOT_FOUND)
  /// ///        will fail the transaction, and none of the objects are put/inserted/updated.
  /// /// Note 1: If this function is run inside a managed TX (created by obx_txn_write()) with fail_on_id_failure=true and
  /// ///         a failure occurs, the whole outer TX is also aborted.
  /// /// Note 2: ID failure errors are returned even if fail_on_id_failure=false and the TX wasn't aborted.
  int obx_box_put_many5(
    ffi.Pointer<OBX_box> box,
    ffi.Pointer<OBX_bytes_array> objects,
    ffi.Pointer<ffi.Uint64> ids,
    int mode,
    bool fail_on_id_failure,
  ) {
    _obx_box_put_many5 ??=
        _dylib.lookupFunction<_c_obx_box_put_many5, _dart_obx_box_put_many5>(
            'obx_box_put_many5');
    return _obx_box_put_many5(
      box,
      objects,
      ids,
      mode,
      fail_on_id_failure ? 1 : 0,
    );
  }

  _dart_obx_box_put_many5 _obx_box_put_many5;

  /// /// Remove a single object
  /// /// will return OBX_NOT_FOUND if an object with the given ID doesn't exist
  int obx_box_remove(
    ffi.Pointer<OBX_box> box,
    int id,
  ) {
    _obx_box_remove ??=
        _dylib.lookupFunction<_c_obx_box_remove, _dart_obx_box_remove>(
            'obx_box_remove');
    return _obx_box_remove(
      box,
      id,
    );
  }

  _dart_obx_box_remove _obx_box_remove;

  /// /// Remove all given objects from the database in a single transaction.
  /// /// Note that this method will not fail if the object is not found (e.g. already removed).
  /// /// In case you need to strictly check whether all of the objects exist before removing them,
  /// /// execute obx_box_contains_ids() and obx_box_remove_ids() inside a single write transaction.
  /// /// @param out_count Pointer to retrieve the number of removed objects; optional: may be NULL.
  int obx_box_remove_many(
    ffi.Pointer<OBX_box> box,
    ffi.Pointer<OBX_id_array> ids,
    ffi.Pointer<ffi.Uint64> out_count,
  ) {
    _obx_box_remove_many ??= _dylib.lookupFunction<_c_obx_box_remove_many,
        _dart_obx_box_remove_many>('obx_box_remove_many');
    return _obx_box_remove_many(
      box,
      ids,
      out_count,
    );
  }

  _dart_obx_box_remove_many _obx_box_remove_many;

  /// /// Remove all objects and set the out_count the the number of removed objects.
  /// /// @param out_count Pointer to retrieve the number of removed objects; optional: may be NULL.
  int obx_box_remove_all(
    ffi.Pointer<OBX_box> box,
    ffi.Pointer<ffi.Uint64> out_count,
  ) {
    _obx_box_remove_all ??=
        _dylib.lookupFunction<_c_obx_box_remove_all, _dart_obx_box_remove_all>(
            'obx_box_remove_all');
    return _obx_box_remove_all(
      box,
      out_count,
    );
  }

  _dart_obx_box_remove_all _obx_box_remove_all;

  /// /// Check whether there are any objects for this entity and updates the out_is_empty accordingly
  int obx_box_is_empty(
    ffi.Pointer<OBX_box> box,
    ffi.Pointer<ffi.Uint8> out_is_empty,
  ) {
    _obx_box_is_empty ??=
        _dylib.lookupFunction<_c_obx_box_is_empty, _dart_obx_box_is_empty>(
            'obx_box_is_empty');
    return _obx_box_is_empty(
      box,
      out_is_empty,
    );
  }

  _dart_obx_box_is_empty _obx_box_is_empty;

  /// /// Count the number of objects in the box, up to the given maximum.
  /// /// You can pass limit=0 to count all objects without any limitation.
  int obx_box_count(
    ffi.Pointer<OBX_box> box,
    int limit,
    ffi.Pointer<ffi.Uint64> out_count,
  ) {
    _obx_box_count ??= _dylib
        .lookupFunction<_c_obx_box_count, _dart_obx_box_count>('obx_box_count');
    return _obx_box_count(
      box,
      limit,
      out_count,
    );
  }

  _dart_obx_box_count _obx_box_count;

  /// /// Fetch IDs of all objects that link back to the given object (ID) using the given relation property (ID).
  /// /// Note: This method refers to "property based relations" unlike the "stand-alone relations" (see obx_box_rel_*).
  /// /// @param property_id the relation property, which must belong to the entity type represented by this box
  /// /// @param id object ID; the object's type is the target of the relation property (typically from another Box)
  /// /// @returns resulting IDs representing objects in this Box, or NULL in case of an error
  ffi.Pointer<OBX_id_array> obx_box_get_backlink_ids(
    ffi.Pointer<OBX_box> box,
    int property_id,
    int id,
  ) {
    _obx_box_get_backlink_ids ??= _dylib.lookupFunction<
        _c_obx_box_get_backlink_ids,
        _dart_obx_box_get_backlink_ids>('obx_box_get_backlink_ids');
    return _obx_box_get_backlink_ids(
      box,
      property_id,
      id,
    );
  }

  _dart_obx_box_get_backlink_ids _obx_box_get_backlink_ids;

  /// /// Insert a standalone relation entry between two objects.
  /// /// @param relation_id must be a standalone relation ID with source entity belonging to this box
  /// /// @param source_id identifies an object from this box
  /// /// @param target_id identifies an object from the target box (as per the relation definition)
  int obx_box_rel_put(
    ffi.Pointer<OBX_box> box,
    int relation_id,
    int source_id,
    int target_id,
  ) {
    _obx_box_rel_put ??=
        _dylib.lookupFunction<_c_obx_box_rel_put, _dart_obx_box_rel_put>(
            'obx_box_rel_put');
    return _obx_box_rel_put(
      box,
      relation_id,
      source_id,
      target_id,
    );
  }

  _dart_obx_box_rel_put _obx_box_rel_put;

  /// /// Remove a standalone relation entry between two objects.
  /// /// See obx_box_rel_put() for parameters documentation.
  int obx_box_rel_remove(
    ffi.Pointer<OBX_box> box,
    int relation_id,
    int source_id,
    int target_id,
  ) {
    _obx_box_rel_remove ??=
        _dylib.lookupFunction<_c_obx_box_rel_remove, _dart_obx_box_rel_remove>(
            'obx_box_rel_remove');
    return _obx_box_rel_remove(
      box,
      relation_id,
      source_id,
      target_id,
    );
  }

  _dart_obx_box_rel_remove _obx_box_rel_remove;

  /// /// Fetch IDs of all objects in this Box related to the given object (typically from another Box).
  /// /// Used for a stand-alone relation and its "regular" direction; this Box represents the target of the relation.
  /// /// @param relation_id ID of a standalone relation, whose target type matches this Box
  /// /// @param id object ID of the relation source type (typically from another Box)
  /// /// @returns resulting IDs representing objects in this Box, or NULL in case of an error
  ffi.Pointer<OBX_id_array> obx_box_rel_get_ids(
    ffi.Pointer<OBX_box> box,
    int relation_id,
    int id,
  ) {
    _obx_box_rel_get_ids ??= _dylib.lookupFunction<_c_obx_box_rel_get_ids,
        _dart_obx_box_rel_get_ids>('obx_box_rel_get_ids');
    return _obx_box_rel_get_ids(
      box,
      relation_id,
      id,
    );
  }

  _dart_obx_box_rel_get_ids _obx_box_rel_get_ids;

  /// /// Fetch IDs of all objects in this Box related to the given object (typically from another Box).
  /// /// Used for a stand-alone relation and its "backlink" direction; this Box represents the source of the relation.
  /// /// @param relation_id ID of a standalone relation, whose source type matches this Box
  /// /// @param id object ID of the relation target type (typically from another Box)
  /// /// @returns resulting IDs representing objects in this Box, or NULL in case of an error
  ffi.Pointer<OBX_id_array> obx_box_rel_get_backlink_ids(
    ffi.Pointer<OBX_box> box,
    int relation_id,
    int id,
  ) {
    _obx_box_rel_get_backlink_ids ??= _dylib.lookupFunction<
        _c_obx_box_rel_get_backlink_ids,
        _dart_obx_box_rel_get_backlink_ids>('obx_box_rel_get_backlink_ids');
    return _obx_box_rel_get_backlink_ids(
      box,
      relation_id,
      id,
    );
  }

  _dart_obx_box_rel_get_backlink_ids _obx_box_rel_get_backlink_ids;

  /// /// Time series: get the limits (min/max time values) over all objects
  /// /// @param out_min_id pointer to receive an output (may be NULL)
  /// /// @param out_min_value pointer to receive an output (may be NULL)
  /// /// @param out_max_id pointer to receive an output (may be NULL)
  /// /// @param out_max_value pointer to receive an output (may be NULL)
  /// /// @returns OBX_NOT_FOUND if no objects are stored
  int obx_box_ts_min_max(
    ffi.Pointer<OBX_box> box,
    ffi.Pointer<ffi.Uint64> out_min_id,
    ffi.Pointer<ffi.Int64> out_min_value,
    ffi.Pointer<ffi.Uint64> out_max_id,
    ffi.Pointer<ffi.Int64> out_max_value,
  ) {
    _obx_box_ts_min_max ??=
        _dylib.lookupFunction<_c_obx_box_ts_min_max, _dart_obx_box_ts_min_max>(
            'obx_box_ts_min_max');
    return _obx_box_ts_min_max(
      box,
      out_min_id,
      out_min_value,
      out_max_id,
      out_max_value,
    );
  }

  _dart_obx_box_ts_min_max _obx_box_ts_min_max;

  /// /// Time series: get the limits (min/max time values) over objects within the given time range
  /// /// @param out_min_id pointer to receive an output (may be NULL)
  /// /// @param out_min_value pointer to receive an output (may be NULL)
  /// /// @param out_max_id pointer to receive an output (may be NULL)
  /// /// @param out_max_value pointer to receive an output (may be NULL)
  /// /// @returns OBX_NOT_FOUND if no objects are stored in the given range
  int obx_box_ts_min_max_range(
    ffi.Pointer<OBX_box> box,
    int range_begin,
    int range_end,
    ffi.Pointer<ffi.Uint64> out_min_id,
    ffi.Pointer<ffi.Int64> out_min_value,
    ffi.Pointer<ffi.Uint64> out_max_id,
    ffi.Pointer<ffi.Int64> out_max_value,
  ) {
    _obx_box_ts_min_max_range ??= _dylib.lookupFunction<
        _c_obx_box_ts_min_max_range,
        _dart_obx_box_ts_min_max_range>('obx_box_ts_min_max_range');
    return _obx_box_ts_min_max_range(
      box,
      range_begin,
      range_end,
      out_min_id,
      out_min_value,
      out_max_id,
      out_max_value,
    );
  }

  _dart_obx_box_ts_min_max_range _obx_box_ts_min_max_range;

  /// /// Note: DO NOT close this OBX_async; its lifetime is tied to the OBX_box instance.
  ffi.Pointer<OBX_async> obx_async(
    ffi.Pointer<OBX_box> box,
  ) {
    _obx_async ??=
        _dylib.lookupFunction<_c_obx_async, _dart_obx_async>('obx_async');
    return _obx_async(
      box,
    );
  }

  _dart_obx_async _obx_async;

  /// /// Put asynchronously with standard put semantics (insert or update).
  int obx_async_put(
    ffi.Pointer<OBX_async> async_1,
    int id,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    _obx_async_put ??= _dylib
        .lookupFunction<_c_obx_async_put, _dart_obx_async_put>('obx_async_put');
    return _obx_async_put(
      async_1,
      id,
      data,
      size,
    );
  }

  _dart_obx_async_put _obx_async_put;

  /// /// Put asynchronously using the given mode.
  int obx_async_put5(
    ffi.Pointer<OBX_async> async_1,
    int id,
    ffi.Pointer<ffi.Void> data,
    int size,
    int mode,
  ) {
    _obx_async_put5 ??=
        _dylib.lookupFunction<_c_obx_async_put5, _dart_obx_async_put5>(
            'obx_async_put5');
    return _obx_async_put5(
      async_1,
      id,
      data,
      size,
      mode,
    );
  }

  _dart_obx_async_put5 _obx_async_put5;

  /// /// Put asynchronously with inserts semantics (won't put if object already exists).
  int obx_async_insert(
    ffi.Pointer<OBX_async> async_1,
    int id,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    _obx_async_insert ??=
        _dylib.lookupFunction<_c_obx_async_insert, _dart_obx_async_insert>(
            'obx_async_insert');
    return _obx_async_insert(
      async_1,
      id,
      data,
      size,
    );
  }

  _dart_obx_async_insert _obx_async_insert;

  /// /// Put asynchronously with update semantics (won't put if object is not yet present).
  int obx_async_update(
    ffi.Pointer<OBX_async> async_1,
    int id,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    _obx_async_update ??=
        _dylib.lookupFunction<_c_obx_async_update, _dart_obx_async_update>(
            'obx_async_update');
    return _obx_async_update(
      async_1,
      id,
      data,
      size,
    );
  }

  _dart_obx_async_update _obx_async_update;

  /// /// Reserve an ID, which is returned immediately for future reference, and put asynchronously.
  /// /// Note: of course, it can NOT be guaranteed that the entity will actually be put successfully in the DB.
  /// /// @param data the given bytes are mutated to update the contained ID data.
  int obx_async_put_object(
    ffi.Pointer<OBX_async> async_1,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    _obx_async_put_object ??= _dylib.lookupFunction<_c_obx_async_put_object,
        _dart_obx_async_put_object>('obx_async_put_object');
    return _obx_async_put_object(
      async_1,
      data,
      size,
    );
  }

  _dart_obx_async_put_object _obx_async_put_object;

  /// /// Reserve an ID, which is returned immediately for future reference, and insert asynchronously.
  /// /// Note: of course, it can NOT be guaranteed that the entity will actually be inserted successfully in the DB.
  /// /// @param data the given bytes are mutated to update the contained ID data.
  int obx_async_insert_object(
    ffi.Pointer<OBX_async> async_1,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    _obx_async_insert_object ??= _dylib.lookupFunction<
        _c_obx_async_insert_object,
        _dart_obx_async_insert_object>('obx_async_insert_object');
    return _obx_async_insert_object(
      async_1,
      data,
      size,
    );
  }

  _dart_obx_async_insert_object _obx_async_insert_object;

  /// /// Remove asynchronously.
  int obx_async_remove(
    ffi.Pointer<OBX_async> async_1,
    int id,
  ) {
    _obx_async_remove ??=
        _dylib.lookupFunction<_c_obx_async_remove, _dart_obx_async_remove>(
            'obx_async_remove');
    return _obx_async_remove(
      async_1,
      id,
    );
  }

  _dart_obx_async_remove _obx_async_remove;

  /// /// Create a custom OBX_async instance that has to be closed using obx_async_close().
  /// /// Note: for standard tasks, prefer obx_box_async() giving you a shared instance that does not have to be closed.
  ffi.Pointer<OBX_async> obx_async_create(
    ffi.Pointer<OBX_box> box,
    int enqueue_timeout_millis,
  ) {
    _obx_async_create ??=
        _dylib.lookupFunction<_c_obx_async_create, _dart_obx_async_create>(
            'obx_async_create');
    return _obx_async_create(
      box,
      enqueue_timeout_millis,
    );
  }

  _dart_obx_async_create _obx_async_create;

  /// /// Close a custom OBX_async instance created with obx_async_create().
  /// /// @return OBX_ERROR_ILLEGAL_ARGUMENT if you pass the shared instance from obx_box_async()
  int obx_async_close(
    ffi.Pointer<OBX_async> async_1,
  ) {
    _obx_async_close ??=
        _dylib.lookupFunction<_c_obx_async_close, _dart_obx_async_close>(
            'obx_async_close');
    return _obx_async_close(
      async_1,
    );
  }

  _dart_obx_async_close _obx_async_close;

  /// /// Create a query builder which is used to collect conditions using the obx_qb_* functions.
  /// /// Once all conditions are applied, use obx_query() to build a OBX_query that is used to actually retrieve data.
  /// /// Use obx_qb_close() to close (free) the query builder.
  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details
  ffi.Pointer<OBX_query_builder> obx_query_builder(
    ffi.Pointer<OBX_store> store,
    int entity_id,
  ) {
    _obx_query_builder ??=
        _dylib.lookupFunction<_c_obx_query_builder, _dart_obx_query_builder>(
            'obx_query_builder');
    return _obx_query_builder(
      store,
      entity_id,
    );
  }

  _dart_obx_query_builder _obx_query_builder;

  /// /// Close the query builder; note that OBX_query objects outlive their builder and thus are not affected by this call.
  /// /// @param builder may be NULL
  int obx_qb_close(
    ffi.Pointer<OBX_query_builder> builder,
  ) {
    _obx_qb_close ??= _dylib
        .lookupFunction<_c_obx_qb_close, _dart_obx_qb_close>('obx_qb_close');
    return _obx_qb_close(
      builder,
    );
  }

  _dart_obx_qb_close _obx_qb_close;

  /// /// To minimise the amount of error handling code required when building a query, the first error is stored in the query
  /// /// and can be obtained here. All the obx_qb_XXX functions are null operations after the first query error has occurred.
  int obx_qb_error_code(
    ffi.Pointer<OBX_query_builder> builder,
  ) {
    _obx_qb_error_code ??=
        _dylib.lookupFunction<_c_obx_qb_error_code, _dart_obx_qb_error_code>(
            'obx_qb_error_code');
    return _obx_qb_error_code(
      builder,
    );
  }

  _dart_obx_qb_error_code _obx_qb_error_code;

  /// /// To minimise the amount of error handling code required when building a query, the first error is stored in the query
  /// /// and can be obtained here. All the obx_qb_XXX functions are null operations after the first query error has occurred.
  ffi.Pointer<ffi.Int8> obx_qb_error_message(
    ffi.Pointer<OBX_query_builder> builder,
  ) {
    _obx_qb_error_message ??= _dylib.lookupFunction<_c_obx_qb_error_message,
        _dart_obx_qb_error_message>('obx_qb_error_message');
    return _obx_qb_error_message(
      builder,
    );
  }

  _dart_obx_qb_error_message _obx_qb_error_message;

  /// /// Add null check to the query
  int obx_qb_null(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
  ) {
    _obx_qb_null ??=
        _dylib.lookupFunction<_c_obx_qb_null, _dart_obx_qb_null>('obx_qb_null');
    return _obx_qb_null(
      builder,
      property_id,
    );
  }

  _dart_obx_qb_null _obx_qb_null;

  /// /// Add not-null check to the query
  int obx_qb_not_null(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
  ) {
    _obx_qb_not_null ??=
        _dylib.lookupFunction<_c_obx_qb_not_null, _dart_obx_qb_not_null>(
            'obx_qb_not_null');
    return _obx_qb_not_null(
      builder,
      property_id,
    );
  }

  _dart_obx_qb_not_null _obx_qb_not_null;

  int obx_qb_equals_string(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
  ) {
    _obx_qb_equals_string ??= _dylib.lookupFunction<_c_obx_qb_equals_string,
        _dart_obx_qb_equals_string>('obx_qb_equals_string');
    return _obx_qb_equals_string(
      builder,
      property_id,
      value,
      case_sensitive ? 1 : 0,
    );
  }

  _dart_obx_qb_equals_string _obx_qb_equals_string;

  int obx_qb_not_equals_string(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
  ) {
    _obx_qb_not_equals_string ??= _dylib.lookupFunction<
        _c_obx_qb_not_equals_string,
        _dart_obx_qb_not_equals_string>('obx_qb_not_equals_string');
    return _obx_qb_not_equals_string(
      builder,
      property_id,
      value,
      case_sensitive ? 1 : 0,
    );
  }

  _dart_obx_qb_not_equals_string _obx_qb_not_equals_string;

  int obx_qb_contains_string(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
  ) {
    _obx_qb_contains_string ??= _dylib.lookupFunction<_c_obx_qb_contains_string,
        _dart_obx_qb_contains_string>('obx_qb_contains_string');
    return _obx_qb_contains_string(
      builder,
      property_id,
      value,
      case_sensitive ? 1 : 0,
    );
  }

  _dart_obx_qb_contains_string _obx_qb_contains_string;

  int obx_qb_starts_with_string(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
  ) {
    _obx_qb_starts_with_string ??= _dylib.lookupFunction<
        _c_obx_qb_starts_with_string,
        _dart_obx_qb_starts_with_string>('obx_qb_starts_with_string');
    return _obx_qb_starts_with_string(
      builder,
      property_id,
      value,
      case_sensitive ? 1 : 0,
    );
  }

  _dart_obx_qb_starts_with_string _obx_qb_starts_with_string;

  int obx_qb_ends_with_string(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
  ) {
    _obx_qb_ends_with_string ??= _dylib.lookupFunction<
        _c_obx_qb_ends_with_string,
        _dart_obx_qb_ends_with_string>('obx_qb_ends_with_string');
    return _obx_qb_ends_with_string(
      builder,
      property_id,
      value,
      case_sensitive ? 1 : 0,
    );
  }

  _dart_obx_qb_ends_with_string _obx_qb_ends_with_string;

  int obx_qb_greater_than_string(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
  ) {
    _obx_qb_greater_than_string ??= _dylib.lookupFunction<
        _c_obx_qb_greater_than_string,
        _dart_obx_qb_greater_than_string>('obx_qb_greater_than_string');
    return _obx_qb_greater_than_string(
      builder,
      property_id,
      value,
      case_sensitive ? 1 : 0,
    );
  }

  _dart_obx_qb_greater_than_string _obx_qb_greater_than_string;

  int obx_qb_greater_or_equal_string(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
  ) {
    _obx_qb_greater_or_equal_string ??= _dylib.lookupFunction<
        _c_obx_qb_greater_or_equal_string,
        _dart_obx_qb_greater_or_equal_string>('obx_qb_greater_or_equal_string');
    return _obx_qb_greater_or_equal_string(
      builder,
      property_id,
      value,
      case_sensitive ? 1 : 0,
    );
  }

  _dart_obx_qb_greater_or_equal_string _obx_qb_greater_or_equal_string;

  int obx_qb_less_than_string(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
  ) {
    _obx_qb_less_than_string ??= _dylib.lookupFunction<
        _c_obx_qb_less_than_string,
        _dart_obx_qb_less_than_string>('obx_qb_less_than_string');
    return _obx_qb_less_than_string(
      builder,
      property_id,
      value,
      case_sensitive ? 1 : 0,
    );
  }

  _dart_obx_qb_less_than_string _obx_qb_less_than_string;

  int obx_qb_less_or_equal_string(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
  ) {
    _obx_qb_less_or_equal_string ??= _dylib.lookupFunction<
        _c_obx_qb_less_or_equal_string,
        _dart_obx_qb_less_or_equal_string>('obx_qb_less_or_equal_string');
    return _obx_qb_less_or_equal_string(
      builder,
      property_id,
      value,
      case_sensitive ? 1 : 0,
    );
  }

  _dart_obx_qb_less_or_equal_string _obx_qb_less_or_equal_string;

  /// /// Note that all string values are copied and thus do not need to be maintained by the calling code.
  int obx_qb_in_strings(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> values,
    int count,
    bool case_sensitive,
  ) {
    _obx_qb_in_strings ??=
        _dylib.lookupFunction<_c_obx_qb_in_strings, _dart_obx_qb_in_strings>(
            'obx_qb_in_strings');
    return _obx_qb_in_strings(
      builder,
      property_id,
      values,
      count,
      case_sensitive ? 1 : 0,
    );
  }

  _dart_obx_qb_in_strings _obx_qb_in_strings;

  /// /// For OBXPropertyType_StringVector - matches if at least one vector item equals the given value.
  int obx_qb_any_equals_string(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Int8> value,
    bool case_sensitive,
  ) {
    _obx_qb_any_equals_string ??= _dylib.lookupFunction<
        _c_obx_qb_any_equals_string,
        _dart_obx_qb_any_equals_string>('obx_qb_any_equals_string');
    return _obx_qb_any_equals_string(
      builder,
      property_id,
      value,
      case_sensitive ? 1 : 0,
    );
  }

  _dart_obx_qb_any_equals_string _obx_qb_any_equals_string;

  int obx_qb_equals_int(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    int value,
  ) {
    _obx_qb_equals_int ??=
        _dylib.lookupFunction<_c_obx_qb_equals_int, _dart_obx_qb_equals_int>(
            'obx_qb_equals_int');
    return _obx_qb_equals_int(
      builder,
      property_id,
      value,
    );
  }

  _dart_obx_qb_equals_int _obx_qb_equals_int;

  int obx_qb_not_equals_int(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    int value,
  ) {
    _obx_qb_not_equals_int ??= _dylib.lookupFunction<_c_obx_qb_not_equals_int,
        _dart_obx_qb_not_equals_int>('obx_qb_not_equals_int');
    return _obx_qb_not_equals_int(
      builder,
      property_id,
      value,
    );
  }

  _dart_obx_qb_not_equals_int _obx_qb_not_equals_int;

  int obx_qb_greater_than_int(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    int value,
  ) {
    _obx_qb_greater_than_int ??= _dylib.lookupFunction<
        _c_obx_qb_greater_than_int,
        _dart_obx_qb_greater_than_int>('obx_qb_greater_than_int');
    return _obx_qb_greater_than_int(
      builder,
      property_id,
      value,
    );
  }

  _dart_obx_qb_greater_than_int _obx_qb_greater_than_int;

  int obx_qb_greater_or_equal_int(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    int value,
  ) {
    _obx_qb_greater_or_equal_int ??= _dylib.lookupFunction<
        _c_obx_qb_greater_or_equal_int,
        _dart_obx_qb_greater_or_equal_int>('obx_qb_greater_or_equal_int');
    return _obx_qb_greater_or_equal_int(
      builder,
      property_id,
      value,
    );
  }

  _dart_obx_qb_greater_or_equal_int _obx_qb_greater_or_equal_int;

  int obx_qb_less_than_int(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    int value,
  ) {
    _obx_qb_less_than_int ??= _dylib.lookupFunction<_c_obx_qb_less_than_int,
        _dart_obx_qb_less_than_int>('obx_qb_less_than_int');
    return _obx_qb_less_than_int(
      builder,
      property_id,
      value,
    );
  }

  _dart_obx_qb_less_than_int _obx_qb_less_than_int;

  int obx_qb_less_or_equal_int(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    int value,
  ) {
    _obx_qb_less_or_equal_int ??= _dylib.lookupFunction<
        _c_obx_qb_less_or_equal_int,
        _dart_obx_qb_less_or_equal_int>('obx_qb_less_or_equal_int');
    return _obx_qb_less_or_equal_int(
      builder,
      property_id,
      value,
    );
  }

  _dart_obx_qb_less_or_equal_int _obx_qb_less_or_equal_int;

  int obx_qb_between_2ints(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    int value_a,
    int value_b,
  ) {
    _obx_qb_between_2ints ??= _dylib.lookupFunction<_c_obx_qb_between_2ints,
        _dart_obx_qb_between_2ints>('obx_qb_between_2ints');
    return _obx_qb_between_2ints(
      builder,
      property_id,
      value_a,
      value_b,
    );
  }

  _dart_obx_qb_between_2ints _obx_qb_between_2ints;

  /// /// Note that all values are copied and thus do not need to be maintained by the calling code.
  int obx_qb_in_int64s(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Int64> values,
    int count,
  ) {
    _obx_qb_in_int64s ??=
        _dylib.lookupFunction<_c_obx_qb_in_int64s, _dart_obx_qb_in_int64s>(
            'obx_qb_in_int64s');
    return _obx_qb_in_int64s(
      builder,
      property_id,
      values,
      count,
    );
  }

  _dart_obx_qb_in_int64s _obx_qb_in_int64s;

  /// /// Note that all values are copied and thus do not need to be maintained by the calling code.
  int obx_qb_not_in_int64s(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Int64> values,
    int count,
  ) {
    _obx_qb_not_in_int64s ??= _dylib.lookupFunction<_c_obx_qb_not_in_int64s,
        _dart_obx_qb_not_in_int64s>('obx_qb_not_in_int64s');
    return _obx_qb_not_in_int64s(
      builder,
      property_id,
      values,
      count,
    );
  }

  _dart_obx_qb_not_in_int64s _obx_qb_not_in_int64s;

  /// /// Note that all values are copied and thus do not need to be maintained by the calling code.
  int obx_qb_in_int32s(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Int32> values,
    int count,
  ) {
    _obx_qb_in_int32s ??=
        _dylib.lookupFunction<_c_obx_qb_in_int32s, _dart_obx_qb_in_int32s>(
            'obx_qb_in_int32s');
    return _obx_qb_in_int32s(
      builder,
      property_id,
      values,
      count,
    );
  }

  _dart_obx_qb_in_int32s _obx_qb_in_int32s;

  /// /// Note that all values are copied and thus do not need to be maintained by the calling code.
  int obx_qb_not_in_int32s(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Int32> values,
    int count,
  ) {
    _obx_qb_not_in_int32s ??= _dylib.lookupFunction<_c_obx_qb_not_in_int32s,
        _dart_obx_qb_not_in_int32s>('obx_qb_not_in_int32s');
    return _obx_qb_not_in_int32s(
      builder,
      property_id,
      values,
      count,
    );
  }

  _dart_obx_qb_not_in_int32s _obx_qb_not_in_int32s;

  int obx_qb_greater_than_double(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    double value,
  ) {
    _obx_qb_greater_than_double ??= _dylib.lookupFunction<
        _c_obx_qb_greater_than_double,
        _dart_obx_qb_greater_than_double>('obx_qb_greater_than_double');
    return _obx_qb_greater_than_double(
      builder,
      property_id,
      value,
    );
  }

  _dart_obx_qb_greater_than_double _obx_qb_greater_than_double;

  int obx_qb_greater_or_equal_double(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    double value,
  ) {
    _obx_qb_greater_or_equal_double ??= _dylib.lookupFunction<
        _c_obx_qb_greater_or_equal_double,
        _dart_obx_qb_greater_or_equal_double>('obx_qb_greater_or_equal_double');
    return _obx_qb_greater_or_equal_double(
      builder,
      property_id,
      value,
    );
  }

  _dart_obx_qb_greater_or_equal_double _obx_qb_greater_or_equal_double;

  int obx_qb_less_than_double(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    double value,
  ) {
    _obx_qb_less_than_double ??= _dylib.lookupFunction<
        _c_obx_qb_less_than_double,
        _dart_obx_qb_less_than_double>('obx_qb_less_than_double');
    return _obx_qb_less_than_double(
      builder,
      property_id,
      value,
    );
  }

  _dart_obx_qb_less_than_double _obx_qb_less_than_double;

  int obx_qb_less_or_equal_double(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    double value,
  ) {
    _obx_qb_less_or_equal_double ??= _dylib.lookupFunction<
        _c_obx_qb_less_or_equal_double,
        _dart_obx_qb_less_or_equal_double>('obx_qb_less_or_equal_double');
    return _obx_qb_less_or_equal_double(
      builder,
      property_id,
      value,
    );
  }

  _dart_obx_qb_less_or_equal_double _obx_qb_less_or_equal_double;

  int obx_qb_between_2doubles(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    double value_a,
    double value_b,
  ) {
    _obx_qb_between_2doubles ??= _dylib.lookupFunction<
        _c_obx_qb_between_2doubles,
        _dart_obx_qb_between_2doubles>('obx_qb_between_2doubles');
    return _obx_qb_between_2doubles(
      builder,
      property_id,
      value_a,
      value_b,
    );
  }

  _dart_obx_qb_between_2doubles _obx_qb_between_2doubles;

  int obx_qb_equals_bytes(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Void> value,
    int size,
  ) {
    _obx_qb_equals_bytes ??= _dylib.lookupFunction<_c_obx_qb_equals_bytes,
        _dart_obx_qb_equals_bytes>('obx_qb_equals_bytes');
    return _obx_qb_equals_bytes(
      builder,
      property_id,
      value,
      size,
    );
  }

  _dart_obx_qb_equals_bytes _obx_qb_equals_bytes;

  int obx_qb_greater_than_bytes(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Void> value,
    int size,
  ) {
    _obx_qb_greater_than_bytes ??= _dylib.lookupFunction<
        _c_obx_qb_greater_than_bytes,
        _dart_obx_qb_greater_than_bytes>('obx_qb_greater_than_bytes');
    return _obx_qb_greater_than_bytes(
      builder,
      property_id,
      value,
      size,
    );
  }

  _dart_obx_qb_greater_than_bytes _obx_qb_greater_than_bytes;

  int obx_qb_greater_or_equal_bytes(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Void> value,
    int size,
  ) {
    _obx_qb_greater_or_equal_bytes ??= _dylib.lookupFunction<
        _c_obx_qb_greater_or_equal_bytes,
        _dart_obx_qb_greater_or_equal_bytes>('obx_qb_greater_or_equal_bytes');
    return _obx_qb_greater_or_equal_bytes(
      builder,
      property_id,
      value,
      size,
    );
  }

  _dart_obx_qb_greater_or_equal_bytes _obx_qb_greater_or_equal_bytes;

  int obx_qb_less_than_bytes(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Void> value,
    int size,
  ) {
    _obx_qb_less_than_bytes ??= _dylib.lookupFunction<_c_obx_qb_less_than_bytes,
        _dart_obx_qb_less_than_bytes>('obx_qb_less_than_bytes');
    return _obx_qb_less_than_bytes(
      builder,
      property_id,
      value,
      size,
    );
  }

  _dart_obx_qb_less_than_bytes _obx_qb_less_than_bytes;

  int obx_qb_less_or_equal_bytes(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    ffi.Pointer<ffi.Void> value,
    int size,
  ) {
    _obx_qb_less_or_equal_bytes ??= _dylib.lookupFunction<
        _c_obx_qb_less_or_equal_bytes,
        _dart_obx_qb_less_or_equal_bytes>('obx_qb_less_or_equal_bytes');
    return _obx_qb_less_or_equal_bytes(
      builder,
      property_id,
      value,
      size,
    );
  }

  _dart_obx_qb_less_or_equal_bytes _obx_qb_less_or_equal_bytes;

  /// /// Combine conditions[] to a new condition using operator AND (all).
  int obx_qb_all(
    ffi.Pointer<OBX_query_builder> builder,
    ffi.Pointer<ffi.Int32> conditions,
    int count,
  ) {
    _obx_qb_all ??=
        _dylib.lookupFunction<_c_obx_qb_all, _dart_obx_qb_all>('obx_qb_all');
    return _obx_qb_all(
      builder,
      conditions,
      count,
    );
  }

  _dart_obx_qb_all _obx_qb_all;

  /// /// Combine conditions[] to a new condition using operator OR (any).
  int obx_qb_any(
    ffi.Pointer<OBX_query_builder> builder,
    ffi.Pointer<ffi.Int32> conditions,
    int count,
  ) {
    _obx_qb_any ??=
        _dylib.lookupFunction<_c_obx_qb_any, _dart_obx_qb_any>('obx_qb_any');
    return _obx_qb_any(
      builder,
      conditions,
      count,
    );
  }

  _dart_obx_qb_any _obx_qb_any;

  /// /// Create an alias for the previous condition (the one added just before calling this function).
  /// /// This is useful when you have a query with multiple conditions of the same property (e.g. height < 20 or height > 50)
  /// /// and you want to use obx_query_param_* to change the values. Consider the following simplified example.
  /// /// @example Create a query with two aliased params and set their values later during query execution:
  /// ///          OBX_query_builder* qb = obx_query_builder(store, entity_id);
  /// ///          obx_qb_less_than_int(qb, height_prop_id, 0)
  /// ///          obx_qb_param_alias(qb, "height-lt")
  /// ///          obx_qb_greater_than_int(qb, height_prop_id, 0)
  /// ///          obx_qb_param_alias(qb, "height-gt")
  /// ///          OBX_query* query = obx_query(OBX_query_builder* qb);
  /// ///          ...
  /// ///          obx_query_param_alias_int(query, "height-lt", 20)
  /// ///          obx_query_param_alias_int(query, "height-gt", 50)
  /// ///          OBX_bytes_array* results = obx_query_find(query)
  /// ///          obx_query_param_alias_int(query, "height-lt", 100)
  /// ///          obx_query_param_alias_int(query, "height-gt", 500)
  /// ///          OBX_bytes_array* results2 = obx_query_find(query)
  /// /// @param alias any non-empty string
  int obx_qb_param_alias(
    ffi.Pointer<OBX_query_builder> builder,
    ffi.Pointer<ffi.Int8> alias,
  ) {
    _obx_qb_param_alias ??=
        _dylib.lookupFunction<_c_obx_qb_param_alias, _dart_obx_qb_param_alias>(
            'obx_qb_param_alias');
    return _obx_qb_param_alias(
      builder,
      alias,
    );
  }

  _dart_obx_qb_param_alias _obx_qb_param_alias;

  /// /// Configures an order of results in the query
  int obx_qb_order(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
    int flags,
  ) {
    _obx_qb_order ??= _dylib
        .lookupFunction<_c_obx_qb_order, _dart_obx_qb_order>('obx_qb_order');
    return _obx_qb_order(
      builder,
      property_id,
      flags,
    );
  }

  _dart_obx_qb_order _obx_qb_order;

  /// /// Create a link based on a property-relation (many-to-one)
  ffi.Pointer<OBX_query_builder> obx_qb_link_property(
    ffi.Pointer<OBX_query_builder> builder,
    int property_id,
  ) {
    _obx_qb_link_property ??= _dylib.lookupFunction<_c_obx_qb_link_property,
        _dart_obx_qb_link_property>('obx_qb_link_property');
    return _obx_qb_link_property(
      builder,
      property_id,
    );
  }

  _dart_obx_qb_link_property _obx_qb_link_property;

  /// /// Create a backlink based on a property-relation used in reverse (one-to-many)
  ffi.Pointer<OBX_query_builder> obx_qb_backlink_property(
    ffi.Pointer<OBX_query_builder> builder,
    int source_entity_id,
    int source_property_id,
  ) {
    _obx_qb_backlink_property ??= _dylib.lookupFunction<
        _c_obx_qb_backlink_property,
        _dart_obx_qb_backlink_property>('obx_qb_backlink_property');
    return _obx_qb_backlink_property(
      builder,
      source_entity_id,
      source_property_id,
    );
  }

  _dart_obx_qb_backlink_property _obx_qb_backlink_property;

  /// /// Create a link based on a standalone relation (many-to-many)
  ffi.Pointer<OBX_query_builder> obx_qb_link_standalone(
    ffi.Pointer<OBX_query_builder> builder,
    int relation_id,
  ) {
    _obx_qb_link_standalone ??= _dylib.lookupFunction<_c_obx_qb_link_standalone,
        _dart_obx_qb_link_standalone>('obx_qb_link_standalone');
    return _obx_qb_link_standalone(
      builder,
      relation_id,
    );
  }

  _dart_obx_qb_link_standalone _obx_qb_link_standalone;

  /// /// Create a backlink based on a standalone relation (many-to-many, reverse direction)
  ffi.Pointer<OBX_query_builder> obx_qb_backlink_standalone(
    ffi.Pointer<OBX_query_builder> builder,
    int relation_id,
  ) {
    _obx_qb_backlink_standalone ??= _dylib.lookupFunction<
        _c_obx_qb_backlink_standalone,
        _dart_obx_qb_backlink_standalone>('obx_qb_backlink_standalone');
    return _obx_qb_backlink_standalone(
      builder,
      relation_id,
    );
  }

  _dart_obx_qb_backlink_standalone _obx_qb_backlink_standalone;

  /// /// Link the (time series) entity type to another entity space using a time point or range defined in the given
  /// /// linked entity type and properties.
  /// /// Note: time series functionality must be available to use this.
  /// /// @param linked_entity_id Entity type that defines a time point or range
  /// /// @param begin_property_id Property of the linked entity defining a time point or the begin of a time range.
  /// ///        Must be a date type (e.g. PropertyType_Date or PropertyType_DateNano).
  /// /// @param end_property_id Optional property of the linked entity defining the end of a time range.
  /// ///        Pass zero to only define a time point (begin_property_id).
  /// ///        Must be a date type (e.g. PropertyType_Date or PropertyType_DateNano).
  ffi.Pointer<OBX_query_builder> obx_qb_link_time(
    ffi.Pointer<OBX_query_builder> builder,
    int linked_entity_id,
    int begin_property_id,
    int end_property_id,
  ) {
    _obx_qb_link_time ??=
        _dylib.lookupFunction<_c_obx_qb_link_time, _dart_obx_qb_link_time>(
            'obx_qb_link_time');
    return _obx_qb_link_time(
      builder,
      linked_entity_id,
      begin_property_id,
      end_property_id,
    );
  }

  _dart_obx_qb_link_time _obx_qb_link_time;

  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details
  ffi.Pointer<OBX_query> obx_query(
    ffi.Pointer<OBX_query_builder> builder,
  ) {
    _obx_query ??=
        _dylib.lookupFunction<_c_obx_query, _dart_obx_query>('obx_query');
    return _obx_query(
      builder,
    );
  }

  _dart_obx_query _obx_query;

  /// /// Close the query and free resources.
  int obx_query_close(
    ffi.Pointer<OBX_query> query,
  ) {
    _obx_query_close ??=
        _dylib.lookupFunction<_c_obx_query_close, _dart_obx_query_close>(
            'obx_query_close');
    return _obx_query_close(
      query,
    );
  }

  _dart_obx_query_close _obx_query_close;

  /// /// Create a clone of the given query such that it can be run on a separate thread
  ffi.Pointer<OBX_query> obx_query_clone(
    ffi.Pointer<OBX_query> query,
  ) {
    _obx_query_clone ??=
        _dylib.lookupFunction<_c_obx_query_clone, _dart_obx_query_clone>(
            'obx_query_clone');
    return _obx_query_clone(
      query,
    );
  }

  _dart_obx_query_clone _obx_query_clone;

  /// /// Configure an offset for this query - all methods that support offset will return/process objects starting at this
  /// /// offset. Example use case: use together with limit to get a slice of the whole result, e.g. for "result paging".
  /// /// Call with offset=0 to reset to the default behavior, i.e. starting from the first element.
  int obx_query_offset(
    ffi.Pointer<OBX_query> query,
    int offset,
  ) {
    _obx_query_offset ??=
        _dylib.lookupFunction<_c_obx_query_offset, _dart_obx_query_offset>(
            'obx_query_offset');
    return _obx_query_offset(
      query,
      offset,
    );
  }

  _dart_obx_query_offset _obx_query_offset;

  /// /// Configure an offset and a limit for this query - all methods that support an offset/limit will return/process
  /// /// objects starting at this offset and up to the given limit. Example use case: get a slice of the whole result, e.g.
  /// /// for "result paging". Call with offset/limit=0 to reset to the default behavior, i.e. starting from the first element
  /// /// without limit.
  int obx_query_offset_limit(
    ffi.Pointer<OBX_query> query,
    int offset,
    int limit,
  ) {
    _obx_query_offset_limit ??= _dylib.lookupFunction<_c_obx_query_offset_limit,
        _dart_obx_query_offset_limit>('obx_query_offset_limit');
    return _obx_query_offset_limit(
      query,
      offset,
      limit,
    );
  }

  _dart_obx_query_offset_limit _obx_query_offset_limit;

  /// /// Configure a limit for this query - all methods that support limit will return/process only the given number of
  /// /// objects. Example use case: use together with offset to get a slice of the whole result, e.g. for "result paging".
  /// /// Call with limit=0 to reset to the default behavior - zero limit means no limit applied.
  int obx_query_limit(
    ffi.Pointer<OBX_query> query,
    int limit,
  ) {
    _obx_query_limit ??=
        _dylib.lookupFunction<_c_obx_query_limit, _dart_obx_query_limit>(
            'obx_query_limit');
    return _obx_query_limit(
      query,
      limit,
    );
  }

  _dart_obx_query_limit _obx_query_limit;

  /// /// Find entities matching the query. NOTE: the returned data is only valid as long the transaction is active!
  ffi.Pointer<OBX_bytes_array> obx_query_find(
    ffi.Pointer<OBX_query> query,
  ) {
    _obx_query_find ??=
        _dylib.lookupFunction<_c_obx_query_find, _dart_obx_query_find>(
            'obx_query_find');
    return _obx_query_find(
      query,
    );
  }

  _dart_obx_query_find _obx_query_find;

  /// /// Walk over matching objects using the given data visitor
  int obx_query_visit(
    ffi.Pointer<OBX_query> query,
    ffi.Pointer<ffi.NativeFunction<obx_data_visitor>> visitor,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    _obx_query_visit ??=
        _dylib.lookupFunction<_c_obx_query_visit, _dart_obx_query_visit>(
            'obx_query_visit');
    return _obx_query_visit(
      query,
      visitor,
      user_data,
    );
  }

  _dart_obx_query_visit _obx_query_visit;

  /// /// Return the IDs of all matching objects
  ffi.Pointer<OBX_id_array> obx_query_find_ids(
    ffi.Pointer<OBX_query> query,
  ) {
    _obx_query_find_ids ??=
        _dylib.lookupFunction<_c_obx_query_find_ids, _dart_obx_query_find_ids>(
            'obx_query_find_ids');
    return _obx_query_find_ids(
      query,
    );
  }

  _dart_obx_query_find_ids _obx_query_find_ids;

  /// /// Return the number of matching objects
  int obx_query_count(
    ffi.Pointer<OBX_query> query,
    ffi.Pointer<ffi.Uint64> out_count,
  ) {
    _obx_query_count ??=
        _dylib.lookupFunction<_c_obx_query_count, _dart_obx_query_count>(
            'obx_query_count');
    return _obx_query_count(
      query,
      out_count,
    );
  }

  _dart_obx_query_count _obx_query_count;

  /// /// Remove all matching objects from the database & return the number of deleted objects
  int obx_query_remove(
    ffi.Pointer<OBX_query> query,
    ffi.Pointer<ffi.Uint64> out_count,
  ) {
    _obx_query_remove ??=
        _dylib.lookupFunction<_c_obx_query_remove, _dart_obx_query_remove>(
            'obx_query_remove');
    return _obx_query_remove(
      query,
      out_count,
    );
  }

  _dart_obx_query_remove _obx_query_remove;

  /// /// The returned char* is valid until another call to describe() is made on the query or until the query is freed
  ffi.Pointer<ffi.Int8> obx_query_describe(
    ffi.Pointer<OBX_query> query,
  ) {
    _obx_query_describe ??=
        _dylib.lookupFunction<_c_obx_query_describe, _dart_obx_query_describe>(
            'obx_query_describe');
    return _obx_query_describe(
      query,
    );
  }

  _dart_obx_query_describe _obx_query_describe;

  /// /// The returned char* is valid until another call to describe_params() is made on the query or until the query is freed
  ffi.Pointer<ffi.Int8> obx_query_describe_params(
    ffi.Pointer<OBX_query> query,
  ) {
    _obx_query_describe_params ??= _dylib.lookupFunction<
        _c_obx_query_describe_params,
        _dart_obx_query_describe_params>('obx_query_describe_params');
    return _obx_query_describe_params(
      query,
    );
  }

  _dart_obx_query_describe_params _obx_query_describe_params;

  int obx_query_cursor_visit(
    ffi.Pointer<OBX_query> query,
    ffi.Pointer<OBX_cursor> cursor,
    ffi.Pointer<ffi.NativeFunction<obx_data_visitor>> visitor,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    _obx_query_cursor_visit ??= _dylib.lookupFunction<_c_obx_query_cursor_visit,
        _dart_obx_query_cursor_visit>('obx_query_cursor_visit');
    return _obx_query_cursor_visit(
      query,
      cursor,
      visitor,
      user_data,
    );
  }

  _dart_obx_query_cursor_visit _obx_query_cursor_visit;

  /// /// Find entities matching the query; NOTE: the returned data is only valid as long the transaction is active!
  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details
  ffi.Pointer<OBX_bytes_array> obx_query_cursor_find(
    ffi.Pointer<OBX_query> query,
    ffi.Pointer<OBX_cursor> cursor,
  ) {
    _obx_query_cursor_find ??= _dylib.lookupFunction<_c_obx_query_cursor_find,
        _dart_obx_query_cursor_find>('obx_query_cursor_find');
    return _obx_query_cursor_find(
      query,
      cursor,
    );
  }

  _dart_obx_query_cursor_find _obx_query_cursor_find;

  ffi.Pointer<OBX_id_array> obx_query_cursor_find_ids(
    ffi.Pointer<OBX_query> query,
    ffi.Pointer<OBX_cursor> cursor,
  ) {
    _obx_query_cursor_find_ids ??= _dylib.lookupFunction<
        _c_obx_query_cursor_find_ids,
        _dart_obx_query_cursor_find_ids>('obx_query_cursor_find_ids');
    return _obx_query_cursor_find_ids(
      query,
      cursor,
    );
  }

  _dart_obx_query_cursor_find_ids _obx_query_cursor_find_ids;

  int obx_query_cursor_count(
    ffi.Pointer<OBX_query> query,
    ffi.Pointer<OBX_cursor> cursor,
    ffi.Pointer<ffi.Uint64> out_count,
  ) {
    _obx_query_cursor_count ??= _dylib.lookupFunction<_c_obx_query_cursor_count,
        _dart_obx_query_cursor_count>('obx_query_cursor_count');
    return _obx_query_cursor_count(
      query,
      cursor,
      out_count,
    );
  }

  _dart_obx_query_cursor_count _obx_query_cursor_count;

  /// /// Remove (delete!) all matching objects.
  int obx_query_cursor_remove(
    ffi.Pointer<OBX_query> query,
    ffi.Pointer<OBX_cursor> cursor,
    ffi.Pointer<ffi.Uint64> out_count,
  ) {
    _obx_query_cursor_remove ??= _dylib.lookupFunction<
        _c_obx_query_cursor_remove,
        _dart_obx_query_cursor_remove>('obx_query_cursor_remove');
    return _obx_query_cursor_remove(
      query,
      cursor,
      out_count,
    );
  }

  _dart_obx_query_cursor_remove _obx_query_cursor_remove;

  int obx_query_param_string(
    ffi.Pointer<OBX_query> query,
    int entity_id,
    int property_id,
    ffi.Pointer<ffi.Int8> value,
  ) {
    _obx_query_param_string ??= _dylib.lookupFunction<_c_obx_query_param_string,
        _dart_obx_query_param_string>('obx_query_param_string');
    return _obx_query_param_string(
      query,
      entity_id,
      property_id,
      value,
    );
  }

  _dart_obx_query_param_string _obx_query_param_string;

  int obx_query_param_strings(
    ffi.Pointer<OBX_query> query,
    int entity_id,
    int property_id,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> values,
    int count,
  ) {
    _obx_query_param_strings ??= _dylib.lookupFunction<
        _c_obx_query_param_strings,
        _dart_obx_query_param_strings>('obx_query_param_strings');
    return _obx_query_param_strings(
      query,
      entity_id,
      property_id,
      values,
      count,
    );
  }

  _dart_obx_query_param_strings _obx_query_param_strings;

  int obx_query_param_int(
    ffi.Pointer<OBX_query> query,
    int entity_id,
    int property_id,
    int value,
  ) {
    _obx_query_param_int ??= _dylib.lookupFunction<_c_obx_query_param_int,
        _dart_obx_query_param_int>('obx_query_param_int');
    return _obx_query_param_int(
      query,
      entity_id,
      property_id,
      value,
    );
  }

  _dart_obx_query_param_int _obx_query_param_int;

  int obx_query_param_2ints(
    ffi.Pointer<OBX_query> query,
    int entity_id,
    int property_id,
    int value_a,
    int value_b,
  ) {
    _obx_query_param_2ints ??= _dylib.lookupFunction<_c_obx_query_param_2ints,
        _dart_obx_query_param_2ints>('obx_query_param_2ints');
    return _obx_query_param_2ints(
      query,
      entity_id,
      property_id,
      value_a,
      value_b,
    );
  }

  _dart_obx_query_param_2ints _obx_query_param_2ints;

  int obx_query_param_int64s(
    ffi.Pointer<OBX_query> query,
    int entity_id,
    int property_id,
    ffi.Pointer<ffi.Int64> values,
    int count,
  ) {
    _obx_query_param_int64s ??= _dylib.lookupFunction<_c_obx_query_param_int64s,
        _dart_obx_query_param_int64s>('obx_query_param_int64s');
    return _obx_query_param_int64s(
      query,
      entity_id,
      property_id,
      values,
      count,
    );
  }

  _dart_obx_query_param_int64s _obx_query_param_int64s;

  int obx_query_param_int32s(
    ffi.Pointer<OBX_query> query,
    int entity_id,
    int property_id,
    ffi.Pointer<ffi.Int32> values,
    int count,
  ) {
    _obx_query_param_int32s ??= _dylib.lookupFunction<_c_obx_query_param_int32s,
        _dart_obx_query_param_int32s>('obx_query_param_int32s');
    return _obx_query_param_int32s(
      query,
      entity_id,
      property_id,
      values,
      count,
    );
  }

  _dart_obx_query_param_int32s _obx_query_param_int32s;

  int obx_query_param_double(
    ffi.Pointer<OBX_query> query,
    int entity_id,
    int property_id,
    double value,
  ) {
    _obx_query_param_double ??= _dylib.lookupFunction<_c_obx_query_param_double,
        _dart_obx_query_param_double>('obx_query_param_double');
    return _obx_query_param_double(
      query,
      entity_id,
      property_id,
      value,
    );
  }

  _dart_obx_query_param_double _obx_query_param_double;

  int obx_query_param_2doubles(
    ffi.Pointer<OBX_query> query,
    int entity_id,
    int property_id,
    double value_a,
    double value_b,
  ) {
    _obx_query_param_2doubles ??= _dylib.lookupFunction<
        _c_obx_query_param_2doubles,
        _dart_obx_query_param_2doubles>('obx_query_param_2doubles');
    return _obx_query_param_2doubles(
      query,
      entity_id,
      property_id,
      value_a,
      value_b,
    );
  }

  _dart_obx_query_param_2doubles _obx_query_param_2doubles;

  int obx_query_param_bytes(
    ffi.Pointer<OBX_query> query,
    int entity_id,
    int property_id,
    ffi.Pointer<ffi.Void> value,
    int size,
  ) {
    _obx_query_param_bytes ??= _dylib.lookupFunction<_c_obx_query_param_bytes,
        _dart_obx_query_param_bytes>('obx_query_param_bytes');
    return _obx_query_param_bytes(
      query,
      entity_id,
      property_id,
      value,
      size,
    );
  }

  _dart_obx_query_param_bytes _obx_query_param_bytes;

  int obx_query_param_alias_string(
    ffi.Pointer<OBX_query> query,
    ffi.Pointer<ffi.Int8> alias,
    ffi.Pointer<ffi.Int8> value,
  ) {
    _obx_query_param_alias_string ??= _dylib.lookupFunction<
        _c_obx_query_param_alias_string,
        _dart_obx_query_param_alias_string>('obx_query_param_alias_string');
    return _obx_query_param_alias_string(
      query,
      alias,
      value,
    );
  }

  _dart_obx_query_param_alias_string _obx_query_param_alias_string;

  int obx_query_param_alias_strings(
    ffi.Pointer<OBX_query> query,
    ffi.Pointer<ffi.Int8> alias,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> values,
    int count,
  ) {
    _obx_query_param_alias_strings ??= _dylib.lookupFunction<
        _c_obx_query_param_alias_strings,
        _dart_obx_query_param_alias_strings>('obx_query_param_alias_strings');
    return _obx_query_param_alias_strings(
      query,
      alias,
      values,
      count,
    );
  }

  _dart_obx_query_param_alias_strings _obx_query_param_alias_strings;

  int obx_query_param_alias_int(
    ffi.Pointer<OBX_query> query,
    ffi.Pointer<ffi.Int8> alias,
    int value,
  ) {
    _obx_query_param_alias_int ??= _dylib.lookupFunction<
        _c_obx_query_param_alias_int,
        _dart_obx_query_param_alias_int>('obx_query_param_alias_int');
    return _obx_query_param_alias_int(
      query,
      alias,
      value,
    );
  }

  _dart_obx_query_param_alias_int _obx_query_param_alias_int;

  int obx_query_param_alias_2ints(
    ffi.Pointer<OBX_query> query,
    ffi.Pointer<ffi.Int8> alias,
    int value_a,
    int value_b,
  ) {
    _obx_query_param_alias_2ints ??= _dylib.lookupFunction<
        _c_obx_query_param_alias_2ints,
        _dart_obx_query_param_alias_2ints>('obx_query_param_alias_2ints');
    return _obx_query_param_alias_2ints(
      query,
      alias,
      value_a,
      value_b,
    );
  }

  _dart_obx_query_param_alias_2ints _obx_query_param_alias_2ints;

  int obx_query_param_alias_int64s(
    ffi.Pointer<OBX_query> query,
    ffi.Pointer<ffi.Int8> alias,
    ffi.Pointer<ffi.Int64> values,
    int count,
  ) {
    _obx_query_param_alias_int64s ??= _dylib.lookupFunction<
        _c_obx_query_param_alias_int64s,
        _dart_obx_query_param_alias_int64s>('obx_query_param_alias_int64s');
    return _obx_query_param_alias_int64s(
      query,
      alias,
      values,
      count,
    );
  }

  _dart_obx_query_param_alias_int64s _obx_query_param_alias_int64s;

  int obx_query_param_alias_int32s(
    ffi.Pointer<OBX_query> query,
    ffi.Pointer<ffi.Int8> alias,
    ffi.Pointer<ffi.Int32> values,
    int count,
  ) {
    _obx_query_param_alias_int32s ??= _dylib.lookupFunction<
        _c_obx_query_param_alias_int32s,
        _dart_obx_query_param_alias_int32s>('obx_query_param_alias_int32s');
    return _obx_query_param_alias_int32s(
      query,
      alias,
      values,
      count,
    );
  }

  _dart_obx_query_param_alias_int32s _obx_query_param_alias_int32s;

  int obx_query_param_alias_double(
    ffi.Pointer<OBX_query> query,
    ffi.Pointer<ffi.Int8> alias,
    double value,
  ) {
    _obx_query_param_alias_double ??= _dylib.lookupFunction<
        _c_obx_query_param_alias_double,
        _dart_obx_query_param_alias_double>('obx_query_param_alias_double');
    return _obx_query_param_alias_double(
      query,
      alias,
      value,
    );
  }

  _dart_obx_query_param_alias_double _obx_query_param_alias_double;

  int obx_query_param_alias_2doubles(
    ffi.Pointer<OBX_query> query,
    ffi.Pointer<ffi.Int8> alias,
    double value_a,
    double value_b,
  ) {
    _obx_query_param_alias_2doubles ??= _dylib.lookupFunction<
        _c_obx_query_param_alias_2doubles,
        _dart_obx_query_param_alias_2doubles>('obx_query_param_alias_2doubles');
    return _obx_query_param_alias_2doubles(
      query,
      alias,
      value_a,
      value_b,
    );
  }

  _dart_obx_query_param_alias_2doubles _obx_query_param_alias_2doubles;

  int obx_query_param_alias_bytes(
    ffi.Pointer<OBX_query> query,
    ffi.Pointer<ffi.Int8> alias,
    ffi.Pointer<ffi.Void> value,
    int size,
  ) {
    _obx_query_param_alias_bytes ??= _dylib.lookupFunction<
        _c_obx_query_param_alias_bytes,
        _dart_obx_query_param_alias_bytes>('obx_query_param_alias_bytes');
    return _obx_query_param_alias_bytes(
      query,
      alias,
      value,
      size,
    );
  }

  _dart_obx_query_param_alias_bytes _obx_query_param_alias_bytes;

  /// /// Create a "property query" with results referring to single property (not complete objects).
  /// /// Also provides aggregates like for example obx_query_prop_avg().
  ffi.Pointer<OBX_query_prop> obx_query_prop(
    ffi.Pointer<OBX_query> query,
    int property_id,
  ) {
    _obx_query_prop ??=
        _dylib.lookupFunction<_c_obx_query_prop, _dart_obx_query_prop>(
            'obx_query_prop');
    return _obx_query_prop(
      query,
      property_id,
    );
  }

  _dart_obx_query_prop _obx_query_prop;

  /// /// Close the property query and release resources.
  int obx_query_prop_close(
    ffi.Pointer<OBX_query_prop> query,
  ) {
    _obx_query_prop_close ??= _dylib.lookupFunction<_c_obx_query_prop_close,
        _dart_obx_query_prop_close>('obx_query_prop_close');
    return _obx_query_prop_close(
      query,
    );
  }

  _dart_obx_query_prop_close _obx_query_prop_close;

  /// /// Configure the property query to work only on distinct values.
  /// /// @note not all methods support distinct, those that don't will return an error
  int obx_query_prop_distinct(
    ffi.Pointer<OBX_query_prop> query,
    bool distinct,
  ) {
    _obx_query_prop_distinct ??= _dylib.lookupFunction<
        _c_obx_query_prop_distinct,
        _dart_obx_query_prop_distinct>('obx_query_prop_distinct');
    return _obx_query_prop_distinct(
      query,
      distinct ? 1 : 0,
    );
  }

  _dart_obx_query_prop_distinct _obx_query_prop_distinct;

  /// /// Configure the property query to work only on distinct values.
  /// /// This version is reserved for string properties and defines the case sensitivity for distinctness.
  /// /// @note not all methods support distinct, those that don't will return an error
  int obx_query_prop_distinct_case(
    ffi.Pointer<OBX_query_prop> query,
    bool distinct,
    bool case_sensitive,
  ) {
    _obx_query_prop_distinct_case ??= _dylib.lookupFunction<
        _c_obx_query_prop_distinct_case,
        _dart_obx_query_prop_distinct_case>('obx_query_prop_distinct_case');
    return _obx_query_prop_distinct_case(
      query,
      distinct ? 1 : 0,
      case_sensitive ? 1 : 0,
    );
  }

  _dart_obx_query_prop_distinct_case _obx_query_prop_distinct_case;

  /// /// Count the number of non-NULL values of the given property across all objects matching the query
  int obx_query_prop_count(
    ffi.Pointer<OBX_query_prop> query,
    ffi.Pointer<ffi.Uint64> out_count,
  ) {
    _obx_query_prop_count ??= _dylib.lookupFunction<_c_obx_query_prop_count,
        _dart_obx_query_prop_count>('obx_query_prop_count');
    return _obx_query_prop_count(
      query,
      out_count,
    );
  }

  _dart_obx_query_prop_count _obx_query_prop_count;

  /// /// Calculate an average value for the given numeric property across all objects matching the query.
  /// /// @param query the query to run
  /// /// @param out_average the result of the query
  /// /// @param out_count (optional, may be NULL) number of objects contributing to the result (counted on the fly).
  /// ///                  A negative count indicates that the computation used a short cut and thus the count is incomplete.
  /// ///                  E.g. a floating point NaN value will trigger the short cut as the average will be a NaN no matter
  /// ///                  what values will follow.
  int obx_query_prop_avg(
    ffi.Pointer<OBX_query_prop> query,
    ffi.Pointer<ffi.Double> out_average,
    ffi.Pointer<ffi.Int64> out_count,
  ) {
    _obx_query_prop_avg ??=
        _dylib.lookupFunction<_c_obx_query_prop_avg, _dart_obx_query_prop_avg>(
            'obx_query_prop_avg');
    return _obx_query_prop_avg(
      query,
      out_average,
      out_count,
    );
  }

  _dart_obx_query_prop_avg _obx_query_prop_avg;

  /// /// Calculate an average value for the given numeric property across all objects matching the query.
  /// /// @param query the query to run
  /// /// @param out_average the result of the query
  /// /// @param out_count (optional, may be NULL) number of objects contributing to the result (counted on the fly).
  /// ///                  A negative count indicates that the computation used a short cut and thus the count is incomplete.
  /// /// @returns OBX_ERROR_NUMERIC_OVERFLOW if the result does not fit into an int64_t
  int obx_query_prop_avg_int(
    ffi.Pointer<OBX_query_prop> query,
    ffi.Pointer<ffi.Int64> out_average,
    ffi.Pointer<ffi.Int64> out_count,
  ) {
    _obx_query_prop_avg_int ??= _dylib.lookupFunction<_c_obx_query_prop_avg_int,
        _dart_obx_query_prop_avg_int>('obx_query_prop_avg_int');
    return _obx_query_prop_avg_int(
      query,
      out_average,
      out_count,
    );
  }

  _dart_obx_query_prop_avg_int _obx_query_prop_avg_int;

  /// /// Find the minimum value of the given floating-point property across all objects matching the query.
  /// /// @param query the query to run
  /// /// @param out_minimum the result of the query
  /// /// @param out_count (optional, may be NULL) number of objects contributing to the result (counted on the fly).
  /// ///                  A negative count indicates that the computation used a short cut and thus the count is incomplete.
  /// ///                  E.g. if an index is used, it will be set to 0 or -1, instead of the actual count of objects.
  int obx_query_prop_min(
    ffi.Pointer<OBX_query_prop> query,
    ffi.Pointer<ffi.Double> out_minimum,
    ffi.Pointer<ffi.Int64> out_count,
  ) {
    _obx_query_prop_min ??=
        _dylib.lookupFunction<_c_obx_query_prop_min, _dart_obx_query_prop_min>(
            'obx_query_prop_min');
    return _obx_query_prop_min(
      query,
      out_minimum,
      out_count,
    );
  }

  _dart_obx_query_prop_min _obx_query_prop_min;

  /// /// Find the maximum value of the given floating-point property across all objects matching the query
  /// /// @param query the query to run
  /// /// @param out_maximum the result of the query
  /// /// @param out_count (optional, may be NULL) number of objects contributing to the result (counted on the fly).
  /// ///                  A negative count indicates that the computation used a short cut and thus the count is incomplete.
  /// ///                  E.g. if an index is used, it will be set to 0 or -1, instead of the actual count of objects.
  int obx_query_prop_max(
    ffi.Pointer<OBX_query_prop> query,
    ffi.Pointer<ffi.Double> out_maximum,
    ffi.Pointer<ffi.Int64> out_count,
  ) {
    _obx_query_prop_max ??=
        _dylib.lookupFunction<_c_obx_query_prop_max, _dart_obx_query_prop_max>(
            'obx_query_prop_max');
    return _obx_query_prop_max(
      query,
      out_maximum,
      out_count,
    );
  }

  _dart_obx_query_prop_max _obx_query_prop_max;

  /// /// Calculate the sum of the given floating-point property across all objects matching the query.
  /// /// @param query the query to run
  /// /// @param out_sum the result of the query
  /// /// @param out_count (optional, may be NULL) number of objects contributing to the result (counted on the fly).
  /// ///                  A negative count indicates that the computation used a short cut and thus the count is incomplete.
  /// ///                  E.g. a floating point NaN value will trigger the short cut as the average will be a NaN no matter
  /// ///                  what values will follow.
  int obx_query_prop_sum(
    ffi.Pointer<OBX_query_prop> query,
    ffi.Pointer<ffi.Double> out_sum,
    ffi.Pointer<ffi.Int64> out_count,
  ) {
    _obx_query_prop_sum ??=
        _dylib.lookupFunction<_c_obx_query_prop_sum, _dart_obx_query_prop_sum>(
            'obx_query_prop_sum');
    return _obx_query_prop_sum(
      query,
      out_sum,
      out_count,
    );
  }

  _dart_obx_query_prop_sum _obx_query_prop_sum;

  /// /// Find the minimum value of the given property across all objects matching the query.
  /// /// @param query the query to run
  /// /// @param out_minimum the result of the query
  /// /// @param out_count (optional, may be NULL) number of objects contributing to the result (counted on the fly).
  /// ///                  A negative count indicates that the computation used a short cut and thus the count is incomplete.
  /// ///                  E.g. if an index is used, it will be set to 0 or -1, instead of the actual count of objects.
  int obx_query_prop_min_int(
    ffi.Pointer<OBX_query_prop> query,
    ffi.Pointer<ffi.Int64> out_minimum,
    ffi.Pointer<ffi.Int64> out_count,
  ) {
    _obx_query_prop_min_int ??= _dylib.lookupFunction<_c_obx_query_prop_min_int,
        _dart_obx_query_prop_min_int>('obx_query_prop_min_int');
    return _obx_query_prop_min_int(
      query,
      out_minimum,
      out_count,
    );
  }

  _dart_obx_query_prop_min_int _obx_query_prop_min_int;

  /// /// Find the maximum value of the given property across all objects matching the query.
  /// /// @param query the query to run
  /// /// @param out_maximum the result of the query
  /// /// @param out_count (optional, may be NULL) number of objects contributing to the result (counted on the fly).
  /// ///                  A negative count indicates that the computation used a short cut and thus the count is incomplete.
  /// ///                  E.g. if an index is used, it will be set to 0 or -1, instead of the actual count of objects.
  int obx_query_prop_max_int(
    ffi.Pointer<OBX_query_prop> query,
    ffi.Pointer<ffi.Int64> out_maximum,
    ffi.Pointer<ffi.Int64> out_count,
  ) {
    _obx_query_prop_max_int ??= _dylib.lookupFunction<_c_obx_query_prop_max_int,
        _dart_obx_query_prop_max_int>('obx_query_prop_max_int');
    return _obx_query_prop_max_int(
      query,
      out_maximum,
      out_count,
    );
  }

  _dart_obx_query_prop_max_int _obx_query_prop_max_int;

  /// /// Calculate the sum of the given property across all objects matching the query.
  /// /// @param query the query to run
  /// /// @param out_sum the result of the query
  /// /// @param out_count (optional, may be NULL) number of objects contributing to the result (counted on the fly).
  /// ///                  A negative count indicates that the computation used a short cut and thus the count is incomplete.
  /// /// @returns OBX_ERROR_NUMERIC_OVERFLOW if the result does not fit into an int64_t
  int obx_query_prop_sum_int(
    ffi.Pointer<OBX_query_prop> query,
    ffi.Pointer<ffi.Int64> out_sum,
    ffi.Pointer<ffi.Int64> out_count,
  ) {
    _obx_query_prop_sum_int ??= _dylib.lookupFunction<_c_obx_query_prop_sum_int,
        _dart_obx_query_prop_sum_int>('obx_query_prop_sum_int');
    return _obx_query_prop_sum_int(
      query,
      out_sum,
      out_count,
    );
  }

  _dart_obx_query_prop_sum_int _obx_query_prop_sum_int;

  /// /// Return an array of strings stored as the given property across all objects matching the query.
  /// /// @param value_if_null value that should be used in place of NULL values on object fields;
  /// ///     if value_if_null=NULL is given, objects with NULL values of the specified field are skipped
  ffi.Pointer<OBX_string_array> obx_query_prop_find_strings(
    ffi.Pointer<OBX_query_prop> query,
    ffi.Pointer<ffi.Int8> value_if_null,
  ) {
    _obx_query_prop_find_strings ??= _dylib.lookupFunction<
        _c_obx_query_prop_find_strings,
        _dart_obx_query_prop_find_strings>('obx_query_prop_find_strings');
    return _obx_query_prop_find_strings(
      query,
      value_if_null,
    );
  }

  _dart_obx_query_prop_find_strings _obx_query_prop_find_strings;

  /// /// Return an array of ints stored as the given property across all objects matching the query.
  /// /// @param value_if_null value that should be used in place of NULL values on object fields;
  /// ///     if value_if_null=NULL is given, objects with NULL values of the specified are skipped
  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details
  ffi.Pointer<OBX_int64_array> obx_query_prop_find_int64s(
    ffi.Pointer<OBX_query_prop> query,
    ffi.Pointer<ffi.Int64> value_if_null,
  ) {
    _obx_query_prop_find_int64s ??= _dylib.lookupFunction<
        _c_obx_query_prop_find_int64s,
        _dart_obx_query_prop_find_int64s>('obx_query_prop_find_int64s');
    return _obx_query_prop_find_int64s(
      query,
      value_if_null,
    );
  }

  _dart_obx_query_prop_find_int64s _obx_query_prop_find_int64s;

  /// /// Return an array of ints stored as the given property across all objects matching the query.
  /// /// @param value_if_null value that should be used in place of NULL values on object fields;
  /// ///     if value_if_null=NULL is given, objects with NULL values of the specified are skipped
  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details
  ffi.Pointer<OBX_int32_array> obx_query_prop_find_int32s(
    ffi.Pointer<OBX_query_prop> query,
    ffi.Pointer<ffi.Int32> value_if_null,
  ) {
    _obx_query_prop_find_int32s ??= _dylib.lookupFunction<
        _c_obx_query_prop_find_int32s,
        _dart_obx_query_prop_find_int32s>('obx_query_prop_find_int32s');
    return _obx_query_prop_find_int32s(
      query,
      value_if_null,
    );
  }

  _dart_obx_query_prop_find_int32s _obx_query_prop_find_int32s;

  /// /// Return an array of ints stored as the given property across all objects matching the query.
  /// /// @param value_if_null value that should be used in place of NULL values on object fields;
  /// ///     if value_if_null=NULL is given, objects with NULL values of the specified are skipped
  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details
  ffi.Pointer<OBX_int16_array> obx_query_prop_find_int16s(
    ffi.Pointer<OBX_query_prop> query,
    ffi.Pointer<ffi.Int16> value_if_null,
  ) {
    _obx_query_prop_find_int16s ??= _dylib.lookupFunction<
        _c_obx_query_prop_find_int16s,
        _dart_obx_query_prop_find_int16s>('obx_query_prop_find_int16s');
    return _obx_query_prop_find_int16s(
      query,
      value_if_null,
    );
  }

  _dart_obx_query_prop_find_int16s _obx_query_prop_find_int16s;

  /// /// Return an array of ints stored as the given property across all objects matching the query.
  /// /// @param value_if_null value that should be used in place of NULL values on object fields;
  /// ///     if value_if_null=NULL is given, objects with NULL values of the specified are skipped
  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details
  ffi.Pointer<OBX_int8_array> obx_query_prop_find_int8s(
    ffi.Pointer<OBX_query_prop> query,
    ffi.Pointer<ffi.Int8> value_if_null,
  ) {
    _obx_query_prop_find_int8s ??= _dylib.lookupFunction<
        _c_obx_query_prop_find_int8s,
        _dart_obx_query_prop_find_int8s>('obx_query_prop_find_int8s');
    return _obx_query_prop_find_int8s(
      query,
      value_if_null,
    );
  }

  _dart_obx_query_prop_find_int8s _obx_query_prop_find_int8s;

  /// /// Return an array of doubles stored as the given property across all objects matching the query.
  /// /// @param value_if_null value that should be used in place of NULL values on object fields;
  /// ///     if value_if_null=NULL is given, objects with NULL values of the specified are skipped
  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details
  ffi.Pointer<OBX_double_array> obx_query_prop_find_doubles(
    ffi.Pointer<OBX_query_prop> query,
    ffi.Pointer<ffi.Double> value_if_null,
  ) {
    _obx_query_prop_find_doubles ??= _dylib.lookupFunction<
        _c_obx_query_prop_find_doubles,
        _dart_obx_query_prop_find_doubles>('obx_query_prop_find_doubles');
    return _obx_query_prop_find_doubles(
      query,
      value_if_null,
    );
  }

  _dart_obx_query_prop_find_doubles _obx_query_prop_find_doubles;

  /// /// Return an array of int stored as the given property across all objects matching the query.
  /// /// @param value_if_null value that should be used in place of NULL values on object fields;
  /// ///     if value_if_null=NULL is given, objects with NULL values of the specified are skipped
  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details
  ffi.Pointer<OBX_float_array> obx_query_prop_find_floats(
    ffi.Pointer<OBX_query_prop> query,
    ffi.Pointer<ffi.Float> value_if_null,
  ) {
    _obx_query_prop_find_floats ??= _dylib.lookupFunction<
        _c_obx_query_prop_find_floats,
        _dart_obx_query_prop_find_floats>('obx_query_prop_find_floats');
    return _obx_query_prop_find_floats(
      query,
      value_if_null,
    );
  }

  _dart_obx_query_prop_find_floats _obx_query_prop_find_floats;

  /// /// Create an observer (callback) to be notified about all data changes (for all object types).
  /// /// The callback is invoked right after a successful commit.
  /// /// \par Threading note
  /// /// The given callback is called on the thread issuing the commit for the data change, e.g. via obx_txn_success().
  /// /// Future versions might change that to a background thread, so be careful with threading assumptions.
  /// /// Also, it's a usually good idea to make the callback return quickly to let the calling thread continue.
  /// /// \attention Currently, you can not call any data operations from inside the call back.
  /// /// \attention More accurately, no transaction may be strated. (This restriction may be removed in a later version.)
  /// /// @param user_data any value you want to be forwarded to the given observer callback (usually some context info).
  /// /// @param callback pointer to be called when the observed data changes.
  /// /// @returns NULL if a illegal locking situation was detected, e.g. called from an observer itself or a
  /// ///          timeout/deadlock was detected (OBX_ERROR_ILLEGAL_STATE).
  ffi.Pointer<OBX_observer> obx_observe(
    ffi.Pointer<OBX_store> store,
    ffi.Pointer<ffi.NativeFunction<obx_observer>> callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    _obx_observe ??=
        _dylib.lookupFunction<_c_obx_observe, _dart_obx_observe>('obx_observe');
    return _obx_observe(
      store,
      callback,
      user_data,
    );
  }

  _dart_obx_observe _obx_observe;

  /// /// Create an observer (callback) to be notified about data changes for a given object type.
  /// /// The callback is invoked right after a successful commit.
  /// /// \note  If you intend to observe more than one type, it is more efficient to use obx_observe().
  /// /// \par Threading note
  /// /// The given callback is called on the thread issuing the commit for the data change, e.g. via obx_txn_success().
  /// /// Future versions might change that to a background thread, so be careful with threading assumptions.
  /// /// Also, it's a usually good idea to make the callback return quickly to let the calling thread continue.
  /// /// \attention Currently, you can not call any data operations from inside the call back.
  /// /// \attention More accurately, no transaction may be strated. (This restriction may be removed in a later version.)
  /// /// @param type_id ID of the object type to be observer.
  /// /// @param user_data any value you want to be forwarded to the given observer callback (usually some context info).
  /// /// @param callback pointer to be called when the observed data changes.
  /// /// @returns NULL if a illegal locking situation was detected, e.g. called from an observer itself or a
  /// ///          timeout/deadlock was detected (OBX_ERROR_ILLEGAL_STATE).
  ffi.Pointer<OBX_observer> obx_observe_single_type(
    ffi.Pointer<OBX_store> store,
    int type_id,
    ffi.Pointer<ffi.NativeFunction<obx_observer_single_type>> callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    _obx_observe_single_type ??= _dylib.lookupFunction<
        _c_obx_observe_single_type,
        _dart_obx_observe_single_type>('obx_observe_single_type');
    return _obx_observe_single_type(
      store,
      type_id,
      callback,
      user_data,
    );
  }

  _dart_obx_observe_single_type _obx_observe_single_type;

  /// /// Free the memory used by the given observer and unsubscribe it from its box or query.
  /// /// @returns OBX_ERROR_ILLEGAL_STATE if a illegal locking situation was detected, e.g. called from an observer itself
  /// ///          or a timeout/deadlock was detected. In that case, the caller must try to close again in a valid situation
  /// ///          not causing lock failures.
  int obx_observer_close(
    ffi.Pointer<OBX_observer> observer,
  ) {
    _obx_observer_close ??=
        _dylib.lookupFunction<_c_obx_observer_close, _dart_obx_observer_close>(
            'obx_observer_close');
    return _obx_observer_close(
      observer,
    );
  }

  _dart_obx_observer_close _obx_observer_close;

  void obx_bytes_free(
    ffi.Pointer<OBX_bytes> bytes,
  ) {
    _obx_bytes_free ??=
        _dylib.lookupFunction<_c_obx_bytes_free, _dart_obx_bytes_free>(
            'obx_bytes_free');
    return _obx_bytes_free(
      bytes,
    );
  }

  _dart_obx_bytes_free _obx_bytes_free;

  /// /// Allocate a bytes array struct of the given size, ready for the data to be pushed
  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details
  ffi.Pointer<OBX_bytes_array> obx_bytes_array(
    int count,
  ) {
    _obx_bytes_array ??=
        _dylib.lookupFunction<_c_obx_bytes_array, _dart_obx_bytes_array>(
            'obx_bytes_array');
    return _obx_bytes_array(
      count,
    );
  }

  _dart_obx_bytes_array _obx_bytes_array;

  /// /// Set the given data as the index in the bytes array. The data is not copied, just referenced through the pointer
  int obx_bytes_array_set(
    ffi.Pointer<OBX_bytes_array> array,
    int index,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    _obx_bytes_array_set ??= _dylib.lookupFunction<_c_obx_bytes_array_set,
        _dart_obx_bytes_array_set>('obx_bytes_array_set');
    return _obx_bytes_array_set(
      array,
      index,
      data,
      size,
    );
  }

  _dart_obx_bytes_array_set _obx_bytes_array_set;

  /// /// Free the bytes array struct
  void obx_bytes_array_free(
    ffi.Pointer<OBX_bytes_array> array,
  ) {
    _obx_bytes_array_free ??= _dylib.lookupFunction<_c_obx_bytes_array_free,
        _dart_obx_bytes_array_free>('obx_bytes_array_free');
    return _obx_bytes_array_free(
      array,
    );
  }

  _dart_obx_bytes_array_free _obx_bytes_array_free;

  /// /// Create an ID array struct, copying the given IDs as the contents
  /// /// @returns NULL if the operation failed, see functions like obx_last_error_code() to get error details
  ffi.Pointer<OBX_id_array> obx_id_array(
    ffi.Pointer<ffi.Uint64> ids,
    int count,
  ) {
    _obx_id_array ??= _dylib
        .lookupFunction<_c_obx_id_array, _dart_obx_id_array>('obx_id_array');
    return _obx_id_array(
      ids,
      count,
    );
  }

  _dart_obx_id_array _obx_id_array;

  /// /// Free the array struct
  void obx_id_array_free(
    ffi.Pointer<OBX_id_array> array,
  ) {
    _obx_id_array_free ??=
        _dylib.lookupFunction<_c_obx_id_array_free, _dart_obx_id_array_free>(
            'obx_id_array_free');
    return _obx_id_array_free(
      array,
    );
  }

  _dart_obx_id_array_free _obx_id_array_free;

  /// /// Free the array struct
  void obx_string_array_free(
    ffi.Pointer<OBX_string_array> array,
  ) {
    _obx_string_array_free ??= _dylib.lookupFunction<_c_obx_string_array_free,
        _dart_obx_string_array_free>('obx_string_array_free');
    return _obx_string_array_free(
      array,
    );
  }

  _dart_obx_string_array_free _obx_string_array_free;

  /// /// Free the array struct
  void obx_int64_array_free(
    ffi.Pointer<OBX_int64_array> array,
  ) {
    _obx_int64_array_free ??= _dylib.lookupFunction<_c_obx_int64_array_free,
        _dart_obx_int64_array_free>('obx_int64_array_free');
    return _obx_int64_array_free(
      array,
    );
  }

  _dart_obx_int64_array_free _obx_int64_array_free;

  /// /// Free the array struct
  void obx_int32_array_free(
    ffi.Pointer<OBX_int32_array> array,
  ) {
    _obx_int32_array_free ??= _dylib.lookupFunction<_c_obx_int32_array_free,
        _dart_obx_int32_array_free>('obx_int32_array_free');
    return _obx_int32_array_free(
      array,
    );
  }

  _dart_obx_int32_array_free _obx_int32_array_free;

  /// /// Free the array struct
  void obx_int16_array_free(
    ffi.Pointer<OBX_int16_array> array,
  ) {
    _obx_int16_array_free ??= _dylib.lookupFunction<_c_obx_int16_array_free,
        _dart_obx_int16_array_free>('obx_int16_array_free');
    return _obx_int16_array_free(
      array,
    );
  }

  _dart_obx_int16_array_free _obx_int16_array_free;

  /// /// Free the array struct
  void obx_int8_array_free(
    ffi.Pointer<OBX_int8_array> array,
  ) {
    _obx_int8_array_free ??= _dylib.lookupFunction<_c_obx_int8_array_free,
        _dart_obx_int8_array_free>('obx_int8_array_free');
    return _obx_int8_array_free(
      array,
    );
  }

  _dart_obx_int8_array_free _obx_int8_array_free;

  /// /// Free the array struct
  void obx_double_array_free(
    ffi.Pointer<OBX_double_array> array,
  ) {
    _obx_double_array_free ??= _dylib.lookupFunction<_c_obx_double_array_free,
        _dart_obx_double_array_free>('obx_double_array_free');
    return _obx_double_array_free(
      array,
    );
  }

  _dart_obx_double_array_free _obx_double_array_free;

  /// /// Free the array struct
  void obx_float_array_free(
    ffi.Pointer<OBX_float_array> array,
  ) {
    _obx_float_array_free ??= _dylib.lookupFunction<_c_obx_float_array_free,
        _dart_obx_float_array_free>('obx_float_array_free');
    return _obx_float_array_free(
      array,
    );
  }

  _dart_obx_float_array_free _obx_float_array_free;

  /// /// Only for Apple platforms: set the prefix to use for mutexes based on POSIX semaphores.
  /// /// You must supply the application group identifier for sand-boxed macOS apps here; see also:
  /// /// https://developer.apple.com/library/archive/documentation/Security/Conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html#//apple_ref/doc/uid/TP40011183-CH3-SW24
  void obx_posix_sem_prefix_set(
    ffi.Pointer<ffi.Int8> prefix,
  ) {
    _obx_posix_sem_prefix_set ??= _dylib.lookupFunction<
        _c_obx_posix_sem_prefix_set,
        _dart_obx_posix_sem_prefix_set>('obx_posix_sem_prefix_set');
    return _obx_posix_sem_prefix_set(
      prefix,
    );
  }

  _dart_obx_posix_sem_prefix_set _obx_posix_sem_prefix_set;

  /// /// Before calling any of the other sync APIs, ensure that those are actually available.
  /// /// If the application is linked a non-sync ObjectBox library, this allows you to fail gracefully.
  /// /// @return true if this library comes with the sync API
  /// /// @deprecated use obx_has_feature(OBXFeature_Sync)
  bool obx_sync_available() {
    _obx_sync_available ??=
        _dylib.lookupFunction<_c_obx_sync_available, _dart_obx_sync_available>(
            'obx_sync_available');
    return _obx_sync_available() != 0;
  }

  _dart_obx_sync_available _obx_sync_available;

  /// /// Creates a sync client associated with the given store and sync server URI.
  /// /// This does not initiate any connection attempts yet: call obx_sync_start() to do so.
  /// /// Before obx_sync_start(), you must configure credentials via obx_sync_credentials.
  /// /// By default a sync client automatically receives updates from the server once login succeeded.
  /// /// To configure this differently, call obx_sync_request_updates_mode() with the wanted mode.
  ffi.Pointer<OBX_sync> obx_sync(
    ffi.Pointer<OBX_store> store,
    ffi.Pointer<ffi.Int8> server_uri,
  ) {
    _obx_sync ??=
        _dylib.lookupFunction<_c_obx_sync, _dart_obx_sync>('obx_sync');
    return _obx_sync(
      store,
      server_uri,
    );
  }

  _dart_obx_sync _obx_sync;

  /// /// Stops and closes (deletes) the sync client freeing its resources.
  int obx_sync_close(
    ffi.Pointer<OBX_sync> sync_1,
  ) {
    _obx_sync_close ??=
        _dylib.lookupFunction<_c_obx_sync_close, _dart_obx_sync_close>(
            'obx_sync_close');
    return _obx_sync_close(
      sync_1,
    );
  }

  _dart_obx_sync_close _obx_sync_close;

  /// /// Sets credentials to authenticate the client with the server.
  /// /// See OBXSyncCredentialsType for available options.
  /// /// The accepted OBXSyncCredentials type depends on your sync-server configuration.
  /// /// @param data may be NULL, i.e. in combination with OBXSyncCredentialsType_NONE
  int obx_sync_credentials(
    ffi.Pointer<OBX_sync> sync_1,
    int type,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    _obx_sync_credentials ??= _dylib.lookupFunction<_c_obx_sync_credentials,
        _dart_obx_sync_credentials>('obx_sync_credentials');
    return _obx_sync_credentials(
      sync_1,
      type,
      data,
      size,
    );
  }

  _dart_obx_sync_credentials _obx_sync_credentials;

  /// /// Configures the maximum number of outgoing TX messages that can be sent without an ACK from the server.
  /// /// @returns OBX_ERROR_ILLEGAL_ARGUMENT if value is not in the range 1-20
  int obx_sync_max_messages_in_flight(
    ffi.Pointer<OBX_sync> sync_1,
    int value,
  ) {
    _obx_sync_max_messages_in_flight ??= _dylib.lookupFunction<
            _c_obx_sync_max_messages_in_flight,
            _dart_obx_sync_max_messages_in_flight>(
        'obx_sync_max_messages_in_flight');
    return _obx_sync_max_messages_in_flight(
      sync_1,
      value,
    );
  }

  _dart_obx_sync_max_messages_in_flight _obx_sync_max_messages_in_flight;

  /// /// Switches operation mode that's initialized after successful login
  /// /// Must be called before obx_sync_start (returns OBX_ERROR_ILLEGAL_STATE if it was already started)
  int obx_sync_request_updates_mode(
    ffi.Pointer<OBX_sync> sync_1,
    int mode,
  ) {
    _obx_sync_request_updates_mode ??= _dylib.lookupFunction<
        _c_obx_sync_request_updates_mode,
        _dart_obx_sync_request_updates_mode>('obx_sync_request_updates_mode');
    return _obx_sync_request_updates_mode(
      sync_1,
      mode,
    );
  }

  _dart_obx_sync_request_updates_mode _obx_sync_request_updates_mode;

  /// /// Once the sync client is configured, you can "start" it to initiate synchronization.
  /// /// This method triggers communication in the background and will return immediately.
  /// /// If the synchronization destination is reachable, this background thread will connect to the server,
  /// /// log in (authenticate) and, depending on "update request mode", start syncing data.
  /// /// If the device, network or server is currently offline, connection attempts will be retried later using
  /// /// increasing backoff intervals.
  int obx_sync_start(
    ffi.Pointer<OBX_sync> sync_1,
  ) {
    _obx_sync_start ??=
        _dylib.lookupFunction<_c_obx_sync_start, _dart_obx_sync_start>(
            'obx_sync_start');
    return _obx_sync_start(
      sync_1,
    );
  }

  _dart_obx_sync_start _obx_sync_start;

  /// /// Stops this sync client and thus stopping the synchronization. Does nothing if it is already stopped.
  int obx_sync_stop(
    ffi.Pointer<OBX_sync> sync_1,
  ) {
    _obx_sync_stop ??= _dylib
        .lookupFunction<_c_obx_sync_stop, _dart_obx_sync_stop>('obx_sync_stop');
    return _obx_sync_stop(
      sync_1,
    );
  }

  _dart_obx_sync_stop _obx_sync_stop;

  /// /// Gets the current state of the sync client (0 on error, e.g. given sync was NULL)
  int obx_sync_state(
    ffi.Pointer<OBX_sync> sync_1,
  ) {
    _obx_sync_state ??=
        _dylib.lookupFunction<_c_obx_sync_state, _dart_obx_sync_state>(
            'obx_sync_state');
    return _obx_sync_state(
      sync_1,
    );
  }

  _dart_obx_sync_state _obx_sync_state;

  /// /// Waits for the sync client to get into the given state or until the given timeout is reached.
  /// /// For an asynchronous alternative, please check the listeners.
  /// /// @param timeout_millis Must be greater than 0
  /// /// @returns OBX_SUCCESS if the LOGGED_IN state has been reached within the given timeout
  /// /// @returns OBX_TIMEOUT if the given timeout was reached before a relevant state change was detected.
  /// ///          Note: obx_last_error_code() is not set.
  /// /// @returns OBX_NO_SUCCESS if a state was reached within the given timeout that is unlikely to result in a
  /// ///          successful login, e.g. "disconnected". Note: obx_last_error_code() is not set.
  int obx_sync_wait_for_logged_in_state(
    ffi.Pointer<OBX_sync> sync_1,
    int timeout_millis,
  ) {
    _obx_sync_wait_for_logged_in_state ??= _dylib.lookupFunction<
            _c_obx_sync_wait_for_logged_in_state,
            _dart_obx_sync_wait_for_logged_in_state>(
        'obx_sync_wait_for_logged_in_state');
    return _obx_sync_wait_for_logged_in_state(
      sync_1,
      timeout_millis,
    );
  }

  _dart_obx_sync_wait_for_logged_in_state _obx_sync_wait_for_logged_in_state;

  /// /// Request updates from the server since we last synced our database.
  /// /// @param subscribe_for_pushes keep sending us future updates as they come in.
  /// /// This should only be called in "logged in" state and there are no delivery guarantees given.
  /// /// @returns OBX_SUCCESS if the request was likely sent (e.g. the sync client is in "logged in" state)
  /// /// @returns OBX_NO_SUCCESS if the request was not sent (and will not be sent in the future).
  /// ///          Note: obx_last_error_code() is not set.
  int obx_sync_updates_request(
    ffi.Pointer<OBX_sync> sync_1,
    bool subscribe_for_pushes,
  ) {
    _obx_sync_updates_request ??= _dylib.lookupFunction<
        _c_obx_sync_updates_request,
        _dart_obx_sync_updates_request>('obx_sync_updates_request');
    return _obx_sync_updates_request(
      sync_1,
      subscribe_for_pushes ? 1 : 0,
    );
  }

  _dart_obx_sync_updates_request _obx_sync_updates_request;

  /// /// Cancel updates from the server (once received, the server stops sending updates).
  /// /// The counterpart to obx_sync_updates_request().
  /// /// This should only be called in "logged in" state and there are no delivery guarantees given.
  /// /// @returns OBX_SUCCESS if the request was likely sent (e.g. the sync client is in "logged in" state)
  /// /// @returns OBX_NO_SUCCESS if the request was not sent (and will not be sent in the future).
  /// ///          Note: obx_last_error_code() is not set.
  int obx_sync_updates_cancel(
    ffi.Pointer<OBX_sync> sync_1,
  ) {
    _obx_sync_updates_cancel ??= _dylib.lookupFunction<
        _c_obx_sync_updates_cancel,
        _dart_obx_sync_updates_cancel>('obx_sync_updates_cancel');
    return _obx_sync_updates_cancel(
      sync_1,
    );
  }

  _dart_obx_sync_updates_cancel _obx_sync_updates_cancel;

  /// /// Count the number of messages in the outgoing queue, i.e. those waiting to be sent to the server.
  /// /// @param limit pass 0 to count all messages without any limitation or a lower number that's enough for your app logic.
  /// /// @note This calls uses a (read) transaction internally: 1) it's not just a "cheap" return of a single number.
  /// ///       While this will still be fast, avoid calling this function excessively.
  /// ///       2) the result follows transaction view semantics, thus it may not always match the actual value.
  int obx_sync_outgoing_message_count(
    ffi.Pointer<OBX_sync> sync_1,
    int limit,
    ffi.Pointer<ffi.Uint64> out_count,
  ) {
    _obx_sync_outgoing_message_count ??= _dylib.lookupFunction<
            _c_obx_sync_outgoing_message_count,
            _dart_obx_sync_outgoing_message_count>(
        'obx_sync_outgoing_message_count');
    return _obx_sync_outgoing_message_count(
      sync_1,
      limit,
      out_count,
    );
  }

  _dart_obx_sync_outgoing_message_count _obx_sync_outgoing_message_count;

  /// /// Experimental. This API is likely to be replaced/removed in a future version.
  /// /// Quickly bring our database up-to-date in a single transaction, without transmitting all the history.
  /// /// Good for initial sync of new clients.
  /// /// @returns OBX_SUCCESS if the request was likely sent (e.g. the sync client is in "logged in" state)
  /// /// @returns OBX_NO_SUCCESS if the request was not sent (and will not be sent in the future).
  /// ///          Note: obx_last_error_code() is not set.
  int obx_sync_full(
    ffi.Pointer<OBX_sync> sync_1,
  ) {
    _obx_sync_full ??= _dylib
        .lookupFunction<_c_obx_sync_full, _dart_obx_sync_full>('obx_sync_full');
    return _obx_sync_full(
      sync_1,
    );
  }

  _dart_obx_sync_full _obx_sync_full;

  /// /// Set or overwrite a previously set 'connect' listener.
  /// /// @param listener set NULL to reset
  /// /// @param listener_arg is a pass-through argument passed to the listener
  void obx_sync_listener_connect(
    ffi.Pointer<OBX_sync> sync_1,
    ffi.Pointer<ffi.NativeFunction<OBX_sync_listener_connect>> listener,
    ffi.Pointer<ffi.Void> listener_arg,
  ) {
    _obx_sync_listener_connect ??= _dylib.lookupFunction<
        _c_obx_sync_listener_connect,
        _dart_obx_sync_listener_connect>('obx_sync_listener_connect');
    return _obx_sync_listener_connect(
      sync_1,
      listener,
      listener_arg,
    );
  }

  _dart_obx_sync_listener_connect _obx_sync_listener_connect;

  /// /// Set or overwrite a previously set 'disconnect' listener.
  /// /// @param listener set NULL to reset
  /// /// @param listener_arg is a pass-through argument passed to the listener
  void obx_sync_listener_disconnect(
    ffi.Pointer<OBX_sync> sync_1,
    ffi.Pointer<ffi.NativeFunction<OBX_sync_listener_disconnect>> listener,
    ffi.Pointer<ffi.Void> listener_arg,
  ) {
    _obx_sync_listener_disconnect ??= _dylib.lookupFunction<
        _c_obx_sync_listener_disconnect,
        _dart_obx_sync_listener_disconnect>('obx_sync_listener_disconnect');
    return _obx_sync_listener_disconnect(
      sync_1,
      listener,
      listener_arg,
    );
  }

  _dart_obx_sync_listener_disconnect _obx_sync_listener_disconnect;

  /// /// Set or overwrite a previously set 'login' listener.
  /// /// @param listener set NULL to reset
  /// /// @param listener_arg is a pass-through argument passed to the listener
  void obx_sync_listener_login(
    ffi.Pointer<OBX_sync> sync_1,
    ffi.Pointer<ffi.NativeFunction<OBX_sync_listener_login>> listener,
    ffi.Pointer<ffi.Void> listener_arg,
  ) {
    _obx_sync_listener_login ??= _dylib.lookupFunction<
        _c_obx_sync_listener_login,
        _dart_obx_sync_listener_login>('obx_sync_listener_login');
    return _obx_sync_listener_login(
      sync_1,
      listener,
      listener_arg,
    );
  }

  _dart_obx_sync_listener_login _obx_sync_listener_login;

  /// /// Set or overwrite a previously set 'login failure' listener.
  /// /// @param listener set NULL to reset
  /// /// @param listener_arg is a pass-through argument passed to the listener
  void obx_sync_listener_login_failure(
    ffi.Pointer<OBX_sync> sync_1,
    ffi.Pointer<ffi.NativeFunction<OBX_sync_listener_login_failure>> listener,
    ffi.Pointer<ffi.Void> listener_arg,
  ) {
    _obx_sync_listener_login_failure ??= _dylib.lookupFunction<
            _c_obx_sync_listener_login_failure,
            _dart_obx_sync_listener_login_failure>(
        'obx_sync_listener_login_failure');
    return _obx_sync_listener_login_failure(
      sync_1,
      listener,
      listener_arg,
    );
  }

  _dart_obx_sync_listener_login_failure _obx_sync_listener_login_failure;

  /// /// Set or overwrite a previously set 'complete' listener - notifies when the latest sync has finished.
  /// /// @param listener set NULL to reset
  /// /// @param listener_arg is a pass-through argument passed to the listener
  void obx_sync_listener_complete(
    ffi.Pointer<OBX_sync> sync_1,
    ffi.Pointer<ffi.NativeFunction<OBX_sync_listener_complete>> listener,
    ffi.Pointer<ffi.Void> listener_arg,
  ) {
    _obx_sync_listener_complete ??= _dylib.lookupFunction<
        _c_obx_sync_listener_complete,
        _dart_obx_sync_listener_complete>('obx_sync_listener_complete');
    return _obx_sync_listener_complete(
      sync_1,
      listener,
      listener_arg,
    );
  }

  _dart_obx_sync_listener_complete _obx_sync_listener_complete;

  /// /// Set or overwrite a previously set 'change' listener - provides information about incoming changes.
  /// /// @param listener set NULL to reset
  /// /// @param listener_arg is a pass-through argument passed to the listener
  void obx_sync_listener_change(
    ffi.Pointer<OBX_sync> sync_1,
    ffi.Pointer<ffi.NativeFunction<OBX_sync_listener_change>> listener,
    ffi.Pointer<ffi.Void> listener_arg,
  ) {
    _obx_sync_listener_change ??= _dylib.lookupFunction<
        _c_obx_sync_listener_change,
        _dart_obx_sync_listener_change>('obx_sync_listener_change');
    return _obx_sync_listener_change(
      sync_1,
      listener,
      listener_arg,
    );
  }

  _dart_obx_sync_listener_change _obx_sync_listener_change;

  /// /// Initializes Dart API - call before any other obx_dart_* functions.
  int obx_dart_init_api(
    ffi.Pointer<ffi.Void> data,
  ) {
    _obx_dart_init_api ??=
        _dylib.lookupFunction<_c_obx_dart_init_api, _dart_obx_dart_init_api>(
            'obx_dart_init_api');
    return _obx_dart_init_api(
      data,
    );
  }

  _dart_obx_dart_init_api _obx_dart_init_api;

  /// /// @see obx_observe()
  /// /// Note: use obx_observer_close() to free unassign the observer and free resources after you're done with it
  ffi.Pointer<OBX_observer> obx_dart_observe(
    ffi.Pointer<OBX_store> store,
    int native_port,
  ) {
    _obx_dart_observe ??=
        _dylib.lookupFunction<_c_obx_dart_observe, _dart_obx_dart_observe>(
            'obx_dart_observe');
    return _obx_dart_observe(
      store,
      native_port,
    );
  }

  _dart_obx_dart_observe _obx_dart_observe;

  ffi.Pointer<OBX_observer> obx_dart_observe_single_type(
    ffi.Pointer<OBX_store> store,
    int type_id,
    int native_port,
  ) {
    _obx_dart_observe_single_type ??= _dylib.lookupFunction<
        _c_obx_dart_observe_single_type,
        _dart_obx_dart_observe_single_type>('obx_dart_observe_single_type');
    return _obx_dart_observe_single_type(
      store,
      type_id,
      native_port,
    );
  }

  _dart_obx_dart_observe_single_type _obx_dart_observe_single_type;

  /// /// @param listener may be NULL
  int OBX_dart_sync_listener_close(
    ffi.Pointer<OBX_dart_sync_listener> listener,
  ) {
    _OBX_dart_sync_listener_close ??= _dylib.lookupFunction<
        _c_OBX_dart_sync_listener_close,
        _dart_OBX_dart_sync_listener_close>('OBX_dart_sync_listener_close');
    return _OBX_dart_sync_listener_close(
      listener,
    );
  }

  _dart_OBX_dart_sync_listener_close _OBX_dart_sync_listener_close;

  ffi.Pointer<OBX_dart_sync_listener> obx_dart_sync_listener_connect(
    ffi.Pointer<OBX_sync> sync_1,
    int native_port,
  ) {
    _obx_dart_sync_listener_connect ??= _dylib.lookupFunction<
        _c_obx_dart_sync_listener_connect,
        _dart_obx_dart_sync_listener_connect>('obx_dart_sync_listener_connect');
    return _obx_dart_sync_listener_connect(
      sync_1,
      native_port,
    );
  }

  _dart_obx_dart_sync_listener_connect _obx_dart_sync_listener_connect;

  /// /// @see obx_sync_listener_disconnect()
  ffi.Pointer<OBX_dart_sync_listener> obx_dart_sync_listener_disconnect(
    ffi.Pointer<OBX_sync> sync_1,
    int native_port,
  ) {
    _obx_dart_sync_listener_disconnect ??= _dylib.lookupFunction<
            _c_obx_dart_sync_listener_disconnect,
            _dart_obx_dart_sync_listener_disconnect>(
        'obx_dart_sync_listener_disconnect');
    return _obx_dart_sync_listener_disconnect(
      sync_1,
      native_port,
    );
  }

  _dart_obx_dart_sync_listener_disconnect _obx_dart_sync_listener_disconnect;

  /// /// @see obx_sync_listener_login()
  ffi.Pointer<OBX_dart_sync_listener> obx_dart_sync_listener_login(
    ffi.Pointer<OBX_sync> sync_1,
    int native_port,
  ) {
    _obx_dart_sync_listener_login ??= _dylib.lookupFunction<
        _c_obx_dart_sync_listener_login,
        _dart_obx_dart_sync_listener_login>('obx_dart_sync_listener_login');
    return _obx_dart_sync_listener_login(
      sync_1,
      native_port,
    );
  }

  _dart_obx_dart_sync_listener_login _obx_dart_sync_listener_login;

  /// /// @see obx_sync_listener_login_failure()
  ffi.Pointer<OBX_dart_sync_listener> obx_dart_sync_listener_login_failure(
    ffi.Pointer<OBX_sync> sync_1,
    int native_port,
  ) {
    _obx_dart_sync_listener_login_failure ??= _dylib.lookupFunction<
            _c_obx_dart_sync_listener_login_failure,
            _dart_obx_dart_sync_listener_login_failure>(
        'obx_dart_sync_listener_login_failure');
    return _obx_dart_sync_listener_login_failure(
      sync_1,
      native_port,
    );
  }

  _dart_obx_dart_sync_listener_login_failure
      _obx_dart_sync_listener_login_failure;

  /// /// @see obx_sync_listener_complete()
  ffi.Pointer<OBX_dart_sync_listener> obx_dart_sync_listener_complete(
    ffi.Pointer<OBX_sync> sync_1,
    int native_port,
  ) {
    _obx_dart_sync_listener_complete ??= _dylib.lookupFunction<
            _c_obx_dart_sync_listener_complete,
            _dart_obx_dart_sync_listener_complete>(
        'obx_dart_sync_listener_complete');
    return _obx_dart_sync_listener_complete(
      sync_1,
      native_port,
    );
  }

  _dart_obx_dart_sync_listener_complete _obx_dart_sync_listener_complete;

  /// /// @see obx_sync_listener_change()
  ffi.Pointer<OBX_dart_sync_listener> obx_dart_sync_listener_change(
    ffi.Pointer<OBX_sync> sync_1,
    int native_port,
  ) {
    _obx_dart_sync_listener_change ??= _dylib.lookupFunction<
        _c_obx_dart_sync_listener_change,
        _dart_obx_dart_sync_listener_change>('obx_dart_sync_listener_change');
    return _obx_dart_sync_listener_change(
      sync_1,
      native_port,
    );
  }

  _dart_obx_dart_sync_listener_change _obx_dart_sync_listener_change;
}

abstract class OBXFeature {
  /// /// Functions that are returning multiple results (e.g. multiple objects) can be only used if this is available.
  /// /// This is only available for 64-bit OSes and is the opposite of "chunked mode", which forces to consume results
  /// /// in chunks (e.g. one by one).
  /// /// Since chunked mode consumes a bit less RAM, ResultArray style functions are typically only preferable if
  /// /// there's an additional overhead per call, e.g. caused by a higher level language abstraction like CGo.
  static const int ResultArray = 1;

  /// /// TimeSeries support (date/date-nano companion ID and other time-series functionality).
  static const int TimeSeries = 2;

  /// /// Sync client availability. Visit https://objectbox.io/sync for more details.
  static const int Sync = 3;

  /// /// Check whether debug log can be enabled during runtime.
  static const int DebugLog = 4;

  /// /// HTTP server with a database browser.
  static const int ObjectBrowser = 5;
}

abstract class OBXPropertyType {
  /// ///< 1 byte
  static const int Bool = 1;

  /// ///< 1 byte
  static const int Byte = 2;

  /// ///< 2 bytes
  static const int Short = 3;

  /// ///< 1 byte
  static const int Char = 4;

  /// ///< 4 bytes
  static const int Int = 5;

  /// ///< 8 bytes
  static const int Long = 6;

  /// ///< 4 bytes
  static const int Float = 7;

  /// ///< 8 bytes
  static const int Double = 8;
  static const int String = 9;

  /// ///< Unix timestamp (milliseconds since 1970) in 8 bytes
  static const int Date = 10;
  static const int Relation = 11;

  /// ///< Unix timestamp (nanoseconds since 1970) in 8 bytes
  static const int DateNano = 12;
  static const int ByteVector = 23;
  static const int StringVector = 30;
}

/// /// Bit-flags defining the behavior of entities.
/// /// Note: Numbers indicate the bit position
abstract class OBXEntityFlags {
  /// /// Enable "data synchronization" for this entity type: objects will be synced with other stores over the network.
  /// /// It's possible to have local-only (non-synced) types and synced types in the same store (schema/data model).
  static const int SYNC_ENABLED = 2;
}

/// /// Bit-flags defining the behavior of properties.
/// /// Note: Numbers indicate the bit position
abstract class OBXPropertyFlags {
  /// /// 64 bit long property (internally unsigned) representing the ID of the entity.
  /// /// May be combined with: NON_PRIMITIVE_TYPE, ID_MONOTONIC_SEQUENCE, ID_SELF_ASSIGNABLE.
  static const int ID = 1;

  /// /// On languages like Java, a non-primitive type is used (aka wrapper types, allowing null)
  static const int NON_PRIMITIVE_TYPE = 2;

  /// /// Unused yet
  static const int NOT_NULL = 4;
  static const int INDEXED = 8;

  /// /// Unused yet
  static const int RESERVED = 16;

  /// /// Unique index
  static const int UNIQUE = 32;

  /// /// Unused yet: Use a persisted sequence to enforce ID to rise monotonic (no ID reuse)
  static const int ID_MONOTONIC_SEQUENCE = 64;

  /// /// Allow IDs to be assigned by the developer
  static const int ID_SELF_ASSIGNABLE = 128;

  /// /// Unused yet
  static const int INDEX_PARTIAL_SKIP_NULL = 256;

  /// /// Used by References for 1) back-references and 2) to clear references to deleted objects (required for ID reuse)
  static const int INDEX_PARTIAL_SKIP_ZERO = 512;

  /// /// Virtual properties may not have a dedicated field in their entity class, e.g. target IDs of to-one relations
  static const int VIRTUAL = 1024;

  /// /// Index uses a 32 bit hash instead of the value
  /// /// 32 bits is shorter on disk, runs well on 32 bit systems, and should be OK even with a few collisions
  static const int INDEX_HASH = 2048;

  /// /// Index uses a 64 bit hash instead of the value
  /// /// recommended mostly for 64 bit machines with values longer >200 bytes; small values are faster with a 32 bit hash
  static const int INDEX_HASH64 = 4096;

  /// /// The actual type of the variable is unsigned (used in combination with numeric OBXPropertyType_*).
  /// /// While our default are signed ints, queries & indexes need do know signing info.
  /// /// Note: Don't combine with ID (IDs are always unsigned internally).
  static const int UNSIGNED = 8192;

  /// /// By defining an ID companion property, a special ID encoding scheme is activated involving this property.
  /// ///
  /// /// For Time Series IDs, a companion property of type Date or DateNano represents the exact timestamp.
  static const int ID_COMPANION = 16384;
}

/// /// Model represents a database schema and must be provided when opening the store.
/// /// Model initialization is usually done by language bindings, which automatically build the model based on parsed
/// /// source code (for examples, see ObjectBox Go or Swift, which also use this C API).
/// ///
/// /// For manual creation, these are the basic steps:
/// /// - define entity types using obx_model_entity() and obx_model_property()
/// /// - Pass the last ever used IDs with obx_model_last_entity_id(), obx_model_last_index_id(),
/// ///   obx_model_last_relation_id()
class OBX_model extends ffi.Struct {}

/// /// Store represents a single database.
/// /// Once opened using obx_store_open(), it's an entry point to data access APIs such as box, query, cursor, transaction.
/// /// After your work is done, you must close obx_store_close() to safely release all the handles and avoid data loss.
/// /// It's possible to have multiple stores open at once, there's no globally shared state.
class OBX_store extends ffi.Struct {}

/// /// Store options customize the behavior of ObjectBox before opening a store. Options can't be changed once the store is
/// /// open but of course you can close the store and open it again with the changed options.
/// /// Some of the notable options are obx_opt_directory() and obx_opt_max_db_size_in_kb().
class OBX_store_options extends ffi.Struct {}

abstract class OBXDebugFlags {
  static const int LOG_TRANSACTIONS_READ = 1;
  static const int LOG_TRANSACTIONS_WRITE = 2;
  static const int LOG_QUERIES = 4;
  static const int LOG_QUERY_PARAMETERS = 8;
  static const int LOG_ASYNC_QUEUE = 16;
}

/// /// Defines a padding mode for putting data bytes.
/// /// Depending on how that data is created, this mode may optimize data handling by avoiding copying memory.
/// /// Internal background: data buffers used by put operations are required to have a size divisible by 4 for an
/// ///                      efficient data layout.
abstract class OBXPutPaddingMode {
  /// /// Adds a padding when needed (may require a memory copy): this is the safe option and also the default.
  /// /// The extra memory copy may impact performance, however this is usually not noticeable.
  static const int PaddingAutomatic = 1;

  /// /// Indicates that data buffers are safe to be extended for padding (adding up to 3 bytes to size is OK).
  /// /// Typically, it depends on the used FlatBuffers builder; e.g. the official C++ seems to ensure it, but
  /// /// flatcc (3rd party implementation for plain C) may not.
  static const int PaddingAllowedByBuffer = 2;

  /// /// The caller ensures that all data bytes are already padded.
  /// /// ObjectBox will verify the buffer size and returns an error if it's not divisible by 4.
  static const int PaddingByCaller = 3;
}

/// /// Bytes struct is an input/output wrapper typically used for a single object data (represented as FlatBuffers).
class OBX_bytes extends ffi.Struct {
  ffi.Pointer<ffi.Void> data;

  @ffi.IntPtr()
  int size;
}

/// /// Bytes array struct is an input/output wrapper for multiple FlatBuffers object data representation.
class OBX_bytes_array extends ffi.Struct {
  ffi.Pointer<OBX_bytes> bytes;

  @ffi.IntPtr()
  int count;
}

/// /// ID array struct is an input/output wrapper for an array of object IDs.
class OBX_id_array extends ffi.Struct {
  ffi.Pointer<ffi.Uint64> ids;

  @ffi.IntPtr()
  int count;
}

/// /// String array struct is an input/output wrapper for an array of character strings.
class OBX_string_array extends ffi.Struct {
  ffi.Pointer<ffi.Pointer<ffi.Int8>> items;

  @ffi.IntPtr()
  int count;
}

/// /// Int64 array struct is an input/output wrapper for an array of int64 numbers.
class OBX_int64_array extends ffi.Struct {
  ffi.Pointer<ffi.Int64> items;

  @ffi.IntPtr()
  int count;
}

/// /// Int32 array struct is an input/output wrapper for an array of int32 numbers.
class OBX_int32_array extends ffi.Struct {
  ffi.Pointer<ffi.Int32> items;

  @ffi.IntPtr()
  int count;
}

/// /// Int16 array struct is an input/output wrapper for an array of int16 numbers.
class OBX_int16_array extends ffi.Struct {
  ffi.Pointer<ffi.Int16> items;

  @ffi.IntPtr()
  int count;
}

/// /// Int8 array struct is an input/output wrapper for an array of int8 numbers.
class OBX_int8_array extends ffi.Struct {
  ffi.Pointer<ffi.Int8> items;

  @ffi.IntPtr()
  int count;
}

/// /// Double array struct is an input/output wrapper for an array of double precision floating point numbers.
class OBX_double_array extends ffi.Struct {
  ffi.Pointer<ffi.Double> items;

  @ffi.IntPtr()
  int count;
}

/// /// Float array struct is an input/output wrapper for an array of single precision floating point numbers.
class OBX_float_array extends ffi.Struct {
  ffi.Pointer<ffi.Float> items;

  @ffi.IntPtr()
  int count;
}

/// /// Transaction provides the mean to use explicit database transactions, grouping several operations into a single unit
/// /// of work that either executes completely or not at all. If you are looking for a more detailed introduction to
/// /// transactions in general, please consult other resources, e.g., https://en.wikipedia.org/wiki/Database_transaction
/// ///
/// /// You may not notice it, but almost all interactions with ObjectBox involve transactions. For example, if you call
/// /// obx_box_put() a write transaction is used. Also if you call obx_box_count(), a read transaction is used. All of this
/// /// is done under the hood and transparent to you.
/// /// However, there are situations where an explicit read transaction is necessary, e.g. obx_box_get(). Also, it’s
/// /// usually worth learning transaction basics to make your app more consistent and efficient, especially for writes.
class OBX_txn extends ffi.Struct {}

/// /// Cursor provides fine-grained (lower level API) access to the stored objects. Check also the more convenient Box API.
class OBX_cursor extends ffi.Struct {}

abstract class OBXPutMode {
  /// /// Standard put ("insert or update")
  static const int PUT = 1;

  /// /// Put succeeds only if the entity does not exist yet.
  static const int INSERT = 2;

  /// /// Put succeeds only if the entity already exist.
  static const int UPDATE = 3;
}

/// /// From ObjectBox you vend Box instances to manage your entities. While you can have multiple Box instances of the same
/// /// type (for the same Entity) "open" at once, it's usually preferable to just use one instance and pass it around.
/// /// Box operations automatically start an implicit transaction when accessing the database.
/// /// And because transactions offered by this C API are always reentrant, you can set your own transaction boundary
/// /// using obx_txn_read() or obx_txn_write(). This is very much encouraged for calling multiple write operations that
/// /// logically belong together (or for better performance).
class OBX_box extends ffi.Struct {}

/// /// Created by obx_box_async, used for async operations like obx_async_put.
class OBX_async extends ffi.Struct {}

/// /// You use QueryBuilder to specify criteria and create a Query which actually executes the query and returns matching
/// /// objects.
class OBX_query_builder extends ffi.Struct {}

/// /// Not really an enum, but binary flags to use across languages
abstract class OBXOrderFlags {
  /// /// Reverse the order from ascending (default) to descending.
  static const int DESCENDING = 1;

  /// /// Sort upper case letters (e.g. "Z") before lower case letters (e.g. "a").
  /// /// If not specified, the default is case insensitive for ASCII characters.
  static const int CASE_SENSITIVE = 2;

  /// /// For scalars only: change the comparison to unsigned (default is signed).
  static const int UNSIGNED = 4;

  /// /// null values will be put last.
  /// /// If not specified, by default null values will be put first.
  static const int NULLS_LAST = 8;

  /// /// null values should be treated equal to zero (scalars only).
  static const int NULLS_ZERO = 16;
}

/// /// Query holds the information necessary to execute a database query. It's prepared by QueryBuilder and may be reused
/// /// any number of times. It also supports parametrization before executing, further improving the reusability.
/// /// Query is NOT thread safe and must only be used from a single thread at the same time. If you prefer to avoid locks,
/// /// you may want to create clonse using obx_query_clone().
class OBX_query extends ffi.Struct {}

/// /// PropertyQuery - getting a single property instead of whole objects. Also provides aggregation over properties.
class OBX_query_prop extends ffi.Struct {}

/// /// Observers are called back when data has changed in the database.
/// /// See obx_observe(), or obx_observe_single_type() to listen to a changes that affect a single entity type
class OBX_observer extends ffi.Struct {}

class OBX_sync extends ffi.Struct {}

abstract class OBXSyncCredentialsType {
  static const int NONE = 0;
  static const int SHARED_SECRET = 1;
  static const int GOOGLE_AUTH = 2;
}

abstract class OBXRequestUpdatesMode {
  /// /// no updates by default, obx_sync_updates_request() must be called manually
  static const int MANUAL = 0;

  /// /// same as calling obx_sync_updates_request(sync, TRUE)
  /// /// default mode unless overridden by obx_sync_request_updates_mode
  static const int AUTO = 1;

  /// /// same as calling obx_sync_updates_request(sync, FALSE)
  static const int AUTO_NO_PUSHES = 2;
}

abstract class OBXSyncState {
  static const int CREATED = 1;
  static const int STARTED = 2;
  static const int CONNECTED = 3;
  static const int LOGGED_IN = 4;
  static const int DISCONNECTED = 5;
  static const int STOPPED = 6;
  static const int DEAD = 7;
}

abstract class OBXSyncCode {
  static const int OK = 20;
  static const int REQ_REJECTED = 40;
  static const int CREDENTIALS_REJECTED = 43;
  static const int UNKNOWN = 50;
  static const int AUTH_UNREACHABLE = 53;
  static const int BAD_VERSION = 55;
  static const int CLIENT_ID_TAKEN = 61;
  static const int TX_VIOLATED_UNIQUE = 71;
}

class OBX_sync_change extends ffi.Struct {
  @ffi.Uint32()
  int entity_id;

  ffi.Pointer<OBX_id_array> puts;

  ffi.Pointer<OBX_id_array> removals;
}

class OBX_sync_change_array extends ffi.Struct {
  ffi.Pointer<OBX_sync_change> list;

  @ffi.IntPtr()
  int count;
}

class OBX_dart_sync_listener extends ffi.Struct {}

const int OBX_VERSION_MAJOR = 0;

const int OBX_VERSION_MINOR = 11;

const int OBX_VERSION_PATCH = 0;

const int OBX_ID_NEW = -1;

const int OBX_SUCCESS = 0;

const int OBX_NOT_FOUND = 404;

const int OBX_NO_SUCCESS = 1001;

const int OBX_TIMEOUT = 1002;

const int OBX_ERROR_ILLEGAL_STATE = 10001;

const int OBX_ERROR_ILLEGAL_ARGUMENT = 10002;

const int OBX_ERROR_ALLOCATION = 10003;

const int OBX_ERROR_NUMERIC_OVERFLOW = 10004;

const int OBX_ERROR_NO_ERROR_INFO = 10097;

const int OBX_ERROR_GENERAL = 10098;

const int OBX_ERROR_UNKNOWN = 10099;

const int OBX_ERROR_DB_FULL = 10101;

const int OBX_ERROR_MAX_READERS_EXCEEDED = 10102;

const int OBX_ERROR_STORE_MUST_SHUTDOWN = 10103;

const int OBX_ERROR_STORAGE_GENERAL = 10199;

const int OBX_ERROR_UNIQUE_VIOLATED = 10201;

const int OBX_ERROR_NON_UNIQUE_RESULT = 10202;

const int OBX_ERROR_PROPERTY_TYPE_MISMATCH = 10203;

const int OBX_ERROR_ID_ALREADY_EXISTS = 10210;

const int OBX_ERROR_ID_NOT_FOUND = 10211;

const int OBX_ERROR_TIME_SERIES = 10212;

const int OBX_ERROR_CONSTRAINT_VIOLATED = 10299;

const int OBX_ERROR_STD_ILLEGAL_ARGUMENT = 10301;

const int OBX_ERROR_STD_OUT_OF_RANGE = 10302;

const int OBX_ERROR_STD_LENGTH = 10303;

const int OBX_ERROR_STD_BAD_ALLOC = 10304;

const int OBX_ERROR_STD_RANGE = 10305;

const int OBX_ERROR_STD_OVERFLOW = 10306;

const int OBX_ERROR_STD_OTHER = 10399;

const int OBX_ERROR_SCHEMA = 10501;

const int OBX_ERROR_FILE_CORRUPT = 10502;

const int OBX_ERROR_FILE_PAGES_CORRUPT = 10503;

const int OBX_ERROR_SCHEMA_OBJECT_NOT_FOUND = 10504;

const int OBX_ERROR_TIME_SERIES_NOT_AVAILABLE = 10601;

const int OBX_ERROR_SYNC_NOT_AVAILABLE = 10602;

typedef _c_obx_version = ffi.Void Function(
  ffi.Pointer<ffi.Int32> major,
  ffi.Pointer<ffi.Int32> minor,
  ffi.Pointer<ffi.Int32> patch,
);

typedef _dart_obx_version = void Function(
  ffi.Pointer<ffi.Int32> major,
  ffi.Pointer<ffi.Int32> minor,
  ffi.Pointer<ffi.Int32> patch,
);

typedef _c_obx_version_is_at_least = ffi.Uint8 Function(
  ffi.Int32 major,
  ffi.Int32 minor,
  ffi.Int32 patch,
);

typedef _dart_obx_version_is_at_least = int Function(
  int major,
  int minor,
  int patch,
);

typedef _c_obx_version_string = ffi.Pointer<ffi.Int8> Function();

typedef _dart_obx_version_string = ffi.Pointer<ffi.Int8> Function();

typedef _c_obx_version_core_string = ffi.Pointer<ffi.Int8> Function();

typedef _dart_obx_version_core_string = ffi.Pointer<ffi.Int8> Function();

typedef _c_obx_has_feature = ffi.Uint8 Function(
  ffi.Int32 feature,
);

typedef _dart_obx_has_feature = int Function(
  int feature,
);

typedef _c_obx_supports_bytes_array = ffi.Uint8 Function();

typedef _dart_obx_supports_bytes_array = int Function();

typedef _c_obx_supports_time_series = ffi.Uint8 Function();

typedef _dart_obx_supports_time_series = int Function();

typedef _c_obx_remove_db_files = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> directory,
);

typedef _dart_obx_remove_db_files = int Function(
  ffi.Pointer<ffi.Int8> directory,
);

typedef _c_obx_last_error_pop = ffi.Uint8 Function(
  ffi.Pointer<ffi.Int32> out_error,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> out_message,
);

typedef _dart_obx_last_error_pop = int Function(
  ffi.Pointer<ffi.Int32> out_error,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> out_message,
);

typedef _c_obx_last_error_code = ffi.Int32 Function();

typedef _dart_obx_last_error_code = int Function();

typedef _c_obx_last_error_message = ffi.Pointer<ffi.Int8> Function();

typedef _dart_obx_last_error_message = ffi.Pointer<ffi.Int8> Function();

typedef _c_obx_last_error_secondary = ffi.Int32 Function();

typedef _dart_obx_last_error_secondary = int Function();

typedef _c_obx_last_error_clear = ffi.Void Function();

typedef _dart_obx_last_error_clear = void Function();

typedef _c_obx_last_error_set = ffi.Uint8 Function(
  ffi.Int32 code,
  ffi.Int32 secondary,
  ffi.Pointer<ffi.Int8> message,
);

typedef _dart_obx_last_error_set = int Function(
  int code,
  int secondary,
  ffi.Pointer<ffi.Int8> message,
);

typedef _c_obx_model = ffi.Pointer<OBX_model> Function();

typedef _dart_obx_model = ffi.Pointer<OBX_model> Function();

typedef _c_obx_model_free = ffi.Int32 Function(
  ffi.Pointer<OBX_model> model,
);

typedef _dart_obx_model_free = int Function(
  ffi.Pointer<OBX_model> model,
);

typedef _c_obx_model_error_code = ffi.Int32 Function(
  ffi.Pointer<OBX_model> model,
);

typedef _dart_obx_model_error_code = int Function(
  ffi.Pointer<OBX_model> model,
);

typedef _c_obx_model_error_message = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<OBX_model> model,
);

typedef _dart_obx_model_error_message = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<OBX_model> model,
);

typedef _c_obx_model_entity = ffi.Int32 Function(
  ffi.Pointer<OBX_model> model,
  ffi.Pointer<ffi.Int8> name,
  ffi.Uint32 entity_id,
  ffi.Uint64 entity_uid,
);

typedef _dart_obx_model_entity = int Function(
  ffi.Pointer<OBX_model> model,
  ffi.Pointer<ffi.Int8> name,
  int entity_id,
  int entity_uid,
);

typedef _c_obx_model_entity_flags = ffi.Int32 Function(
  ffi.Pointer<OBX_model> model,
  ffi.Int32 flags,
);

typedef _dart_obx_model_entity_flags = int Function(
  ffi.Pointer<OBX_model> model,
  int flags,
);

typedef _c_obx_model_property = ffi.Int32 Function(
  ffi.Pointer<OBX_model> model,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 type,
  ffi.Uint32 property_id,
  ffi.Uint64 property_uid,
);

typedef _dart_obx_model_property = int Function(
  ffi.Pointer<OBX_model> model,
  ffi.Pointer<ffi.Int8> name,
  int type,
  int property_id,
  int property_uid,
);

typedef _c_obx_model_property_flags = ffi.Int32 Function(
  ffi.Pointer<OBX_model> model,
  ffi.Int32 flags,
);

typedef _dart_obx_model_property_flags = int Function(
  ffi.Pointer<OBX_model> model,
  int flags,
);

typedef _c_obx_model_property_relation = ffi.Int32 Function(
  ffi.Pointer<OBX_model> model,
  ffi.Pointer<ffi.Int8> target_entity,
  ffi.Uint32 index_id,
  ffi.Uint64 index_uid,
);

typedef _dart_obx_model_property_relation = int Function(
  ffi.Pointer<OBX_model> model,
  ffi.Pointer<ffi.Int8> target_entity,
  int index_id,
  int index_uid,
);

typedef _c_obx_model_property_index_id = ffi.Int32 Function(
  ffi.Pointer<OBX_model> model,
  ffi.Uint32 index_id,
  ffi.Uint64 index_uid,
);

typedef _dart_obx_model_property_index_id = int Function(
  ffi.Pointer<OBX_model> model,
  int index_id,
  int index_uid,
);

typedef _c_obx_model_relation = ffi.Int32 Function(
  ffi.Pointer<OBX_model> model,
  ffi.Uint32 relation_id,
  ffi.Uint64 relation_uid,
  ffi.Uint32 target_id,
  ffi.Uint64 target_uid,
);

typedef _dart_obx_model_relation = int Function(
  ffi.Pointer<OBX_model> model,
  int relation_id,
  int relation_uid,
  int target_id,
  int target_uid,
);

typedef _c_obx_model_last_entity_id = ffi.Void Function(
  ffi.Pointer<OBX_model> arg0,
  ffi.Uint32 entity_id,
  ffi.Uint64 entity_uid,
);

typedef _dart_obx_model_last_entity_id = void Function(
  ffi.Pointer<OBX_model> arg0,
  int entity_id,
  int entity_uid,
);

typedef _c_obx_model_last_index_id = ffi.Void Function(
  ffi.Pointer<OBX_model> model,
  ffi.Uint32 index_id,
  ffi.Uint64 index_uid,
);

typedef _dart_obx_model_last_index_id = void Function(
  ffi.Pointer<OBX_model> model,
  int index_id,
  int index_uid,
);

typedef _c_obx_model_last_relation_id = ffi.Void Function(
  ffi.Pointer<OBX_model> model,
  ffi.Uint32 relation_id,
  ffi.Uint64 relation_uid,
);

typedef _dart_obx_model_last_relation_id = void Function(
  ffi.Pointer<OBX_model> model,
  int relation_id,
  int relation_uid,
);

typedef _c_obx_model_entity_last_property_id = ffi.Int32 Function(
  ffi.Pointer<OBX_model> model,
  ffi.Uint32 property_id,
  ffi.Uint64 property_uid,
);

typedef _dart_obx_model_entity_last_property_id = int Function(
  ffi.Pointer<OBX_model> model,
  int property_id,
  int property_uid,
);

typedef _c_obx_opt = ffi.Pointer<OBX_store_options> Function();

typedef _dart_obx_opt = ffi.Pointer<OBX_store_options> Function();

typedef _c_obx_opt_directory = ffi.Int32 Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Pointer<ffi.Int8> dir,
);

typedef _dart_obx_opt_directory = int Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Pointer<ffi.Int8> dir,
);

typedef _c_obx_opt_max_db_size_in_kb = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.IntPtr size_in_kb,
);

typedef _dart_obx_opt_max_db_size_in_kb = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int size_in_kb,
);

typedef _c_obx_opt_file_mode = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Uint32 file_mode,
);

typedef _dart_obx_opt_file_mode = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int file_mode,
);

typedef _c_obx_opt_max_readers = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Uint32 max_readers,
);

typedef _dart_obx_opt_max_readers = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int max_readers,
);

typedef _c_obx_opt_model = ffi.Int32 Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Pointer<OBX_model> model,
);

typedef _dart_obx_opt_model = int Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Pointer<OBX_model> model,
);

typedef _c_obx_opt_model_bytes = ffi.Int32 Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Pointer<ffi.Void> bytes,
  ffi.IntPtr size,
);

typedef _dart_obx_opt_model_bytes = int Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Pointer<ffi.Void> bytes,
  int size,
);

typedef _c_obx_opt_model_bytes_direct = ffi.Int32 Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Pointer<ffi.Void> bytes,
  ffi.IntPtr size,
);

typedef _dart_obx_opt_model_bytes_direct = int Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Pointer<ffi.Void> bytes,
  int size,
);

typedef _c_obx_opt_validate_on_open = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.IntPtr page_limit,
  ffi.Uint8 leaf_level,
);

typedef _dart_obx_opt_validate_on_open = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int page_limit,
  int leaf_level,
);

typedef _c_obx_opt_put_padding_mode = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Int32 mode,
);

typedef _dart_obx_opt_put_padding_mode = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int mode,
);

typedef _c_obx_opt_read_schema = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Uint8 value,
);

typedef _dart_obx_opt_read_schema = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int value,
);

typedef _c_obx_opt_use_previous_commit = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Uint8 value,
);

typedef _dart_obx_opt_use_previous_commit = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int value,
);

typedef _c_obx_opt_read_only = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Uint8 value,
);

typedef _dart_obx_opt_read_only = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int value,
);

typedef _c_obx_opt_debug_flags = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Int32 flags,
);

typedef _dart_obx_opt_debug_flags = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int flags,
);

typedef _c_obx_opt_async_max_queue_length = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.IntPtr value,
);

typedef _dart_obx_opt_async_max_queue_length = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int value,
);

typedef _c_obx_opt_async_throttle_at_queue_length = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.IntPtr value,
);

typedef _dart_obx_opt_async_throttle_at_queue_length = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int value,
);

typedef _c_obx_opt_async_throttle_micros = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Uint32 value,
);

typedef _dart_obx_opt_async_throttle_micros = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int value,
);

typedef _c_obx_opt_async_max_in_tx_duration = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Uint32 micros,
);

typedef _dart_obx_opt_async_max_in_tx_duration = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int micros,
);

typedef _c_obx_opt_async_max_in_tx_operations = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Uint32 value,
);

typedef _dart_obx_opt_async_max_in_tx_operations = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int value,
);

typedef _c_obx_opt_async_pre_txn_delay = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Uint32 delay_micros,
);

typedef _dart_obx_opt_async_pre_txn_delay = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int delay_micros,
);

typedef _c_obx_opt_async_pre_txn_delay4 = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Uint32 delay_micros,
  ffi.Uint32 delay2_micros,
  ffi.IntPtr min_queue_length_for_delay2,
);

typedef _dart_obx_opt_async_pre_txn_delay4 = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int delay_micros,
  int delay2_micros,
  int min_queue_length_for_delay2,
);

typedef _c_obx_opt_async_post_txn_delay = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Uint32 delay_micros,
);

typedef _dart_obx_opt_async_post_txn_delay = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int delay_micros,
);

typedef _c_obx_opt_async_post_txn_delay4 = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Uint32 delay_micros,
  ffi.Uint32 delay2_micros,
  ffi.IntPtr min_queue_length_for_delay2,
);

typedef _dart_obx_opt_async_post_txn_delay4 = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int delay_micros,
  int delay2_micros,
  int min_queue_length_for_delay2,
);

typedef _c_obx_opt_async_minor_refill_threshold = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.IntPtr queue_length,
);

typedef _dart_obx_opt_async_minor_refill_threshold = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int queue_length,
);

typedef _c_obx_opt_async_minor_refill_max_count = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Uint32 value,
);

typedef _dart_obx_opt_async_minor_refill_max_count = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int value,
);

typedef _c_obx_opt_async_max_tx_pool_size = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.IntPtr value,
);

typedef _dart_obx_opt_async_max_tx_pool_size = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int value,
);

typedef _c_obx_opt_async_object_bytes_max_cache_size = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Uint64 value,
);

typedef _dart_obx_opt_async_object_bytes_max_cache_size = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int value,
);

typedef _c_obx_opt_async_object_bytes_max_size_to_cache = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
  ffi.Uint64 value,
);

typedef _dart_obx_opt_async_object_bytes_max_size_to_cache = void Function(
  ffi.Pointer<OBX_store_options> opt,
  int value,
);

typedef _c_obx_opt_free = ffi.Void Function(
  ffi.Pointer<OBX_store_options> opt,
);

typedef _dart_obx_opt_free = void Function(
  ffi.Pointer<OBX_store_options> opt,
);

typedef _c_obx_store_open = ffi.Pointer<OBX_store> Function(
  ffi.Pointer<OBX_store_options> opt,
);

typedef _dart_obx_store_open = ffi.Pointer<OBX_store> Function(
  ffi.Pointer<OBX_store_options> opt,
);

typedef _c_obx_store_wrap = ffi.Pointer<OBX_store> Function(
  ffi.Pointer<ffi.Void> core_store,
);

typedef _dart_obx_store_wrap = ffi.Pointer<OBX_store> Function(
  ffi.Pointer<ffi.Void> core_store,
);

typedef _c_obx_store_entity_id = ffi.Uint32 Function(
  ffi.Pointer<OBX_store> store,
  ffi.Pointer<ffi.Int8> entity_name,
);

typedef _dart_obx_store_entity_id = int Function(
  ffi.Pointer<OBX_store> store,
  ffi.Pointer<ffi.Int8> entity_name,
);

typedef _c_obx_store_entity_property_id = ffi.Uint32 Function(
  ffi.Pointer<OBX_store> store,
  ffi.Uint32 entity_id,
  ffi.Pointer<ffi.Int8> property_name,
);

typedef _dart_obx_store_entity_property_id = int Function(
  ffi.Pointer<OBX_store> store,
  int entity_id,
  ffi.Pointer<ffi.Int8> property_name,
);

typedef _c_obx_store_await_async_completion = ffi.Uint8 Function(
  ffi.Pointer<OBX_store> store,
);

typedef _dart_obx_store_await_async_completion = int Function(
  ffi.Pointer<OBX_store> store,
);

typedef _c_obx_store_await_async_submitted = ffi.Uint8 Function(
  ffi.Pointer<OBX_store> store,
);

typedef _dart_obx_store_await_async_submitted = int Function(
  ffi.Pointer<OBX_store> store,
);

typedef _c_obx_store_debug_flags = ffi.Int32 Function(
  ffi.Pointer<OBX_store> store,
  ffi.Int32 flags,
);

typedef _dart_obx_store_debug_flags = int Function(
  ffi.Pointer<OBX_store> store,
  int flags,
);

typedef _c_obx_store_opened_with_previous_commit = ffi.Uint8 Function(
  ffi.Pointer<OBX_store> store,
);

typedef _dart_obx_store_opened_with_previous_commit = int Function(
  ffi.Pointer<OBX_store> store,
);

typedef _c_obx_store_close = ffi.Int32 Function(
  ffi.Pointer<OBX_store> store,
);

typedef _dart_obx_store_close = int Function(
  ffi.Pointer<OBX_store> store,
);

typedef _c_obx_txn_write = ffi.Pointer<OBX_txn> Function(
  ffi.Pointer<OBX_store> store,
);

typedef _dart_obx_txn_write = ffi.Pointer<OBX_txn> Function(
  ffi.Pointer<OBX_store> store,
);

typedef _c_obx_txn_read = ffi.Pointer<OBX_txn> Function(
  ffi.Pointer<OBX_store> store,
);

typedef _dart_obx_txn_read = ffi.Pointer<OBX_txn> Function(
  ffi.Pointer<OBX_store> store,
);

typedef _c_obx_txn_success = ffi.Int32 Function(
  ffi.Pointer<OBX_txn> txn,
);

typedef _dart_obx_txn_success = int Function(
  ffi.Pointer<OBX_txn> txn,
);

typedef _c_obx_txn_close = ffi.Int32 Function(
  ffi.Pointer<OBX_txn> txn,
);

typedef _dart_obx_txn_close = int Function(
  ffi.Pointer<OBX_txn> txn,
);

typedef _c_obx_txn_abort = ffi.Int32 Function(
  ffi.Pointer<OBX_txn> txn,
);

typedef _dart_obx_txn_abort = int Function(
  ffi.Pointer<OBX_txn> txn,
);

typedef _c_obx_txn_mark_success = ffi.Int32 Function(
  ffi.Pointer<OBX_txn> txn,
  ffi.Uint8 wasSuccessful,
);

typedef _dart_obx_txn_mark_success = int Function(
  ffi.Pointer<OBX_txn> txn,
  int wasSuccessful,
);

typedef _c_obx_cursor = ffi.Pointer<OBX_cursor> Function(
  ffi.Pointer<OBX_txn> txn,
  ffi.Uint32 entity_id,
);

typedef _dart_obx_cursor = ffi.Pointer<OBX_cursor> Function(
  ffi.Pointer<OBX_txn> txn,
  int entity_id,
);

typedef _c_obx_cursor_close = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
);

typedef _dart_obx_cursor_close = int Function(
  ffi.Pointer<OBX_cursor> cursor,
);

typedef _c_obx_cursor_id_for_put = ffi.Uint64 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Uint64 id_or_zero,
);

typedef _dart_obx_cursor_id_for_put = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  int id_or_zero,
);

typedef _c_obx_cursor_put = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Uint64 id,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
);

typedef _dart_obx_cursor_put = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  int id,
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_obx_cursor_put4 = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Uint64 id,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
  ffi.Int32 mode,
);

typedef _dart_obx_cursor_put4 = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  int id,
  ffi.Pointer<ffi.Void> data,
  int size,
  int mode,
);

typedef _c_obx_cursor_put_new = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Uint64 id,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
);

typedef _dart_obx_cursor_put_new = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  int id,
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_obx_cursor_insert = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Uint64 id,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
);

typedef _dart_obx_cursor_insert = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  int id,
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_obx_cursor_update = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Uint64 id,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
);

typedef _dart_obx_cursor_update = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  int id,
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_obx_cursor_put_object = ffi.Uint64 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
);

typedef _dart_obx_cursor_put_object = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_obx_cursor_put_object4 = ffi.Uint64 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
  ffi.Int32 mode,
);

typedef _dart_obx_cursor_put_object4 = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Void> data,
  int size,
  int mode,
);

typedef _c_obx_cursor_get = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Uint64 id,
  ffi.Pointer<ffi.Pointer<ffi.Void>> data,
  ffi.Pointer<ffi.IntPtr> size,
);

typedef _dart_obx_cursor_get = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  int id,
  ffi.Pointer<ffi.Pointer<ffi.Void>> data,
  ffi.Pointer<ffi.IntPtr> size,
);

typedef _c_obx_cursor_get_all = ffi.Pointer<OBX_bytes_array> Function(
  ffi.Pointer<OBX_cursor> cursor,
);

typedef _dart_obx_cursor_get_all = ffi.Pointer<OBX_bytes_array> Function(
  ffi.Pointer<OBX_cursor> cursor,
);

typedef _c_obx_cursor_first = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> data,
  ffi.Pointer<ffi.IntPtr> size,
);

typedef _dart_obx_cursor_first = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> data,
  ffi.Pointer<ffi.IntPtr> size,
);

typedef _c_obx_cursor_next = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> data,
  ffi.Pointer<ffi.IntPtr> size,
);

typedef _dart_obx_cursor_next = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> data,
  ffi.Pointer<ffi.IntPtr> size,
);

typedef _c_obx_cursor_seek = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Uint64 id,
);

typedef _dart_obx_cursor_seek = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  int id,
);

typedef _c_obx_cursor_current = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> data,
  ffi.Pointer<ffi.IntPtr> size,
);

typedef _dart_obx_cursor_current = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Pointer<ffi.Void>> data,
  ffi.Pointer<ffi.IntPtr> size,
);

typedef _c_obx_cursor_remove = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Uint64 id,
);

typedef _dart_obx_cursor_remove = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  int id,
);

typedef _c_obx_cursor_remove_all = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
);

typedef _dart_obx_cursor_remove_all = int Function(
  ffi.Pointer<OBX_cursor> cursor,
);

typedef _c_obx_cursor_count = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Uint64> count,
);

typedef _dart_obx_cursor_count = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Uint64> count,
);

typedef _c_obx_cursor_count_max = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Uint64 max_count,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _dart_obx_cursor_count_max = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  int max_count,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _c_obx_cursor_is_empty = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Uint8> out_is_empty,
);

typedef _dart_obx_cursor_is_empty = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Uint8> out_is_empty,
);

typedef _c_obx_cursor_backlinks = ffi.Pointer<OBX_bytes_array> Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Uint32 entity_id,
  ffi.Uint32 property_id,
  ffi.Uint64 id,
);

typedef _dart_obx_cursor_backlinks = ffi.Pointer<OBX_bytes_array> Function(
  ffi.Pointer<OBX_cursor> cursor,
  int entity_id,
  int property_id,
  int id,
);

typedef _c_obx_cursor_backlink_ids = ffi.Pointer<OBX_id_array> Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Uint32 entity_id,
  ffi.Uint32 property_id,
  ffi.Uint64 id,
);

typedef _dart_obx_cursor_backlink_ids = ffi.Pointer<OBX_id_array> Function(
  ffi.Pointer<OBX_cursor> cursor,
  int entity_id,
  int property_id,
  int id,
);

typedef _c_obx_cursor_rel_put = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Uint32 relation_id,
  ffi.Uint64 source_id,
  ffi.Uint64 target_id,
);

typedef _dart_obx_cursor_rel_put = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  int relation_id,
  int source_id,
  int target_id,
);

typedef _c_obx_cursor_rel_remove = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Uint32 relation_id,
  ffi.Uint64 source_id,
  ffi.Uint64 target_id,
);

typedef _dart_obx_cursor_rel_remove = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  int relation_id,
  int source_id,
  int target_id,
);

typedef _c_obx_cursor_rel_ids = ffi.Pointer<OBX_id_array> Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Uint32 relation_id,
  ffi.Uint64 source_id,
);

typedef _dart_obx_cursor_rel_ids = ffi.Pointer<OBX_id_array> Function(
  ffi.Pointer<OBX_cursor> cursor,
  int relation_id,
  int source_id,
);

typedef _c_obx_cursor_ts_min_max = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Uint64> out_min_id,
  ffi.Pointer<ffi.Int64> out_min_value,
  ffi.Pointer<ffi.Uint64> out_max_id,
  ffi.Pointer<ffi.Int64> out_max_value,
);

typedef _dart_obx_cursor_ts_min_max = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Uint64> out_min_id,
  ffi.Pointer<ffi.Int64> out_min_value,
  ffi.Pointer<ffi.Uint64> out_max_id,
  ffi.Pointer<ffi.Int64> out_max_value,
);

typedef _c_obx_cursor_ts_min_max_range = ffi.Int32 Function(
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Int64 range_begin,
  ffi.Int64 range_end,
  ffi.Pointer<ffi.Uint64> out_min_id,
  ffi.Pointer<ffi.Int64> out_min_value,
  ffi.Pointer<ffi.Uint64> out_max_id,
  ffi.Pointer<ffi.Int64> out_max_value,
);

typedef _dart_obx_cursor_ts_min_max_range = int Function(
  ffi.Pointer<OBX_cursor> cursor,
  int range_begin,
  int range_end,
  ffi.Pointer<ffi.Uint64> out_min_id,
  ffi.Pointer<ffi.Int64> out_min_value,
  ffi.Pointer<ffi.Uint64> out_max_id,
  ffi.Pointer<ffi.Int64> out_max_value,
);

typedef _c_obx_box = ffi.Pointer<OBX_box> Function(
  ffi.Pointer<OBX_store> store,
  ffi.Uint32 entity_id,
);

typedef _dart_obx_box = ffi.Pointer<OBX_box> Function(
  ffi.Pointer<OBX_store> store,
  int entity_id,
);

typedef _c_obx_box_store = ffi.Pointer<OBX_store> Function(
  ffi.Pointer<OBX_box> box,
);

typedef _dart_obx_box_store = ffi.Pointer<OBX_store> Function(
  ffi.Pointer<OBX_box> box,
);

typedef _c_obx_box_contains = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Uint64 id,
  ffi.Pointer<ffi.Uint8> out_contains,
);

typedef _dart_obx_box_contains = int Function(
  ffi.Pointer<OBX_box> box,
  int id,
  ffi.Pointer<ffi.Uint8> out_contains,
);

typedef _c_obx_box_contains_many = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<OBX_id_array> ids,
  ffi.Pointer<ffi.Uint8> out_contains,
);

typedef _dart_obx_box_contains_many = int Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<OBX_id_array> ids,
  ffi.Pointer<ffi.Uint8> out_contains,
);

typedef _c_obx_box_get = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Uint64 id,
  ffi.Pointer<ffi.Pointer<ffi.Void>> data,
  ffi.Pointer<ffi.IntPtr> size,
);

typedef _dart_obx_box_get = int Function(
  ffi.Pointer<OBX_box> box,
  int id,
  ffi.Pointer<ffi.Pointer<ffi.Void>> data,
  ffi.Pointer<ffi.IntPtr> size,
);

typedef _c_obx_box_get_many = ffi.Pointer<OBX_bytes_array> Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<OBX_id_array> ids,
);

typedef _dart_obx_box_get_many = ffi.Pointer<OBX_bytes_array> Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<OBX_id_array> ids,
);

typedef _c_obx_box_get_all = ffi.Pointer<OBX_bytes_array> Function(
  ffi.Pointer<OBX_box> box,
);

typedef _dart_obx_box_get_all = ffi.Pointer<OBX_bytes_array> Function(
  ffi.Pointer<OBX_box> box,
);

typedef obx_data_visitor = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.IntPtr,
);

typedef _c_obx_box_visit_many = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<OBX_id_array> ids,
  ffi.Pointer<ffi.NativeFunction<obx_data_visitor>> visitor,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _dart_obx_box_visit_many = int Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<OBX_id_array> ids,
  ffi.Pointer<ffi.NativeFunction<obx_data_visitor>> visitor,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _c_obx_box_visit_all = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<ffi.NativeFunction<obx_data_visitor>> visitor,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _dart_obx_box_visit_all = int Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<ffi.NativeFunction<obx_data_visitor>> visitor,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _c_obx_box_id_for_put = ffi.Uint64 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Uint64 id_or_zero,
);

typedef _dart_obx_box_id_for_put = int Function(
  ffi.Pointer<OBX_box> box,
  int id_or_zero,
);

typedef _c_obx_box_ids_for_put = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Uint64 count,
  ffi.Pointer<ffi.Uint64> out_first_id,
);

typedef _dart_obx_box_ids_for_put = int Function(
  ffi.Pointer<OBX_box> box,
  int count,
  ffi.Pointer<ffi.Uint64> out_first_id,
);

typedef _c_obx_box_put = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Uint64 id,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
);

typedef _dart_obx_box_put = int Function(
  ffi.Pointer<OBX_box> box,
  int id,
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_obx_box_insert = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Uint64 id,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
);

typedef _dart_obx_box_insert = int Function(
  ffi.Pointer<OBX_box> box,
  int id,
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_obx_box_update = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Uint64 id,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
);

typedef _dart_obx_box_update = int Function(
  ffi.Pointer<OBX_box> box,
  int id,
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_obx_box_put5 = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Uint64 id,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
  ffi.Int32 mode,
);

typedef _dart_obx_box_put5 = int Function(
  ffi.Pointer<OBX_box> box,
  int id,
  ffi.Pointer<ffi.Void> data,
  int size,
  int mode,
);

typedef _c_obx_box_put_object = ffi.Uint64 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
);

typedef _dart_obx_box_put_object = int Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_obx_box_put_object4 = ffi.Uint64 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
  ffi.Int32 mode,
);

typedef _dart_obx_box_put_object4 = int Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<ffi.Void> data,
  int size,
  int mode,
);

typedef _c_obx_box_put_many = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<OBX_bytes_array> objects,
  ffi.Pointer<ffi.Uint64> ids,
  ffi.Int32 mode,
);

typedef _dart_obx_box_put_many = int Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<OBX_bytes_array> objects,
  ffi.Pointer<ffi.Uint64> ids,
  int mode,
);

typedef _c_obx_box_put_many5 = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<OBX_bytes_array> objects,
  ffi.Pointer<ffi.Uint64> ids,
  ffi.Int32 mode,
  ffi.Uint8 fail_on_id_failure,
);

typedef _dart_obx_box_put_many5 = int Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<OBX_bytes_array> objects,
  ffi.Pointer<ffi.Uint64> ids,
  int mode,
  int fail_on_id_failure,
);

typedef _c_obx_box_remove = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Uint64 id,
);

typedef _dart_obx_box_remove = int Function(
  ffi.Pointer<OBX_box> box,
  int id,
);

typedef _c_obx_box_remove_many = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<OBX_id_array> ids,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _dart_obx_box_remove_many = int Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<OBX_id_array> ids,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _c_obx_box_remove_all = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _dart_obx_box_remove_all = int Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _c_obx_box_is_empty = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<ffi.Uint8> out_is_empty,
);

typedef _dart_obx_box_is_empty = int Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<ffi.Uint8> out_is_empty,
);

typedef _c_obx_box_count = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Uint64 limit,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _dart_obx_box_count = int Function(
  ffi.Pointer<OBX_box> box,
  int limit,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _c_obx_box_get_backlink_ids = ffi.Pointer<OBX_id_array> Function(
  ffi.Pointer<OBX_box> box,
  ffi.Uint32 property_id,
  ffi.Uint64 id,
);

typedef _dart_obx_box_get_backlink_ids = ffi.Pointer<OBX_id_array> Function(
  ffi.Pointer<OBX_box> box,
  int property_id,
  int id,
);

typedef _c_obx_box_rel_put = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Uint32 relation_id,
  ffi.Uint64 source_id,
  ffi.Uint64 target_id,
);

typedef _dart_obx_box_rel_put = int Function(
  ffi.Pointer<OBX_box> box,
  int relation_id,
  int source_id,
  int target_id,
);

typedef _c_obx_box_rel_remove = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Uint32 relation_id,
  ffi.Uint64 source_id,
  ffi.Uint64 target_id,
);

typedef _dart_obx_box_rel_remove = int Function(
  ffi.Pointer<OBX_box> box,
  int relation_id,
  int source_id,
  int target_id,
);

typedef _c_obx_box_rel_get_ids = ffi.Pointer<OBX_id_array> Function(
  ffi.Pointer<OBX_box> box,
  ffi.Uint32 relation_id,
  ffi.Uint64 id,
);

typedef _dart_obx_box_rel_get_ids = ffi.Pointer<OBX_id_array> Function(
  ffi.Pointer<OBX_box> box,
  int relation_id,
  int id,
);

typedef _c_obx_box_rel_get_backlink_ids = ffi.Pointer<OBX_id_array> Function(
  ffi.Pointer<OBX_box> box,
  ffi.Uint32 relation_id,
  ffi.Uint64 id,
);

typedef _dart_obx_box_rel_get_backlink_ids = ffi.Pointer<OBX_id_array> Function(
  ffi.Pointer<OBX_box> box,
  int relation_id,
  int id,
);

typedef _c_obx_box_ts_min_max = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<ffi.Uint64> out_min_id,
  ffi.Pointer<ffi.Int64> out_min_value,
  ffi.Pointer<ffi.Uint64> out_max_id,
  ffi.Pointer<ffi.Int64> out_max_value,
);

typedef _dart_obx_box_ts_min_max = int Function(
  ffi.Pointer<OBX_box> box,
  ffi.Pointer<ffi.Uint64> out_min_id,
  ffi.Pointer<ffi.Int64> out_min_value,
  ffi.Pointer<ffi.Uint64> out_max_id,
  ffi.Pointer<ffi.Int64> out_max_value,
);

typedef _c_obx_box_ts_min_max_range = ffi.Int32 Function(
  ffi.Pointer<OBX_box> box,
  ffi.Int64 range_begin,
  ffi.Int64 range_end,
  ffi.Pointer<ffi.Uint64> out_min_id,
  ffi.Pointer<ffi.Int64> out_min_value,
  ffi.Pointer<ffi.Uint64> out_max_id,
  ffi.Pointer<ffi.Int64> out_max_value,
);

typedef _dart_obx_box_ts_min_max_range = int Function(
  ffi.Pointer<OBX_box> box,
  int range_begin,
  int range_end,
  ffi.Pointer<ffi.Uint64> out_min_id,
  ffi.Pointer<ffi.Int64> out_min_value,
  ffi.Pointer<ffi.Uint64> out_max_id,
  ffi.Pointer<ffi.Int64> out_max_value,
);

typedef _c_obx_async = ffi.Pointer<OBX_async> Function(
  ffi.Pointer<OBX_box> box,
);

typedef _dart_obx_async = ffi.Pointer<OBX_async> Function(
  ffi.Pointer<OBX_box> box,
);

typedef _c_obx_async_put = ffi.Int32 Function(
  ffi.Pointer<OBX_async> async_1,
  ffi.Uint64 id,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
);

typedef _dart_obx_async_put = int Function(
  ffi.Pointer<OBX_async> async_1,
  int id,
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_obx_async_put5 = ffi.Int32 Function(
  ffi.Pointer<OBX_async> async_1,
  ffi.Uint64 id,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
  ffi.Int32 mode,
);

typedef _dart_obx_async_put5 = int Function(
  ffi.Pointer<OBX_async> async_1,
  int id,
  ffi.Pointer<ffi.Void> data,
  int size,
  int mode,
);

typedef _c_obx_async_insert = ffi.Int32 Function(
  ffi.Pointer<OBX_async> async_1,
  ffi.Uint64 id,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
);

typedef _dart_obx_async_insert = int Function(
  ffi.Pointer<OBX_async> async_1,
  int id,
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_obx_async_update = ffi.Int32 Function(
  ffi.Pointer<OBX_async> async_1,
  ffi.Uint64 id,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
);

typedef _dart_obx_async_update = int Function(
  ffi.Pointer<OBX_async> async_1,
  int id,
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_obx_async_put_object = ffi.Uint64 Function(
  ffi.Pointer<OBX_async> async_1,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
);

typedef _dart_obx_async_put_object = int Function(
  ffi.Pointer<OBX_async> async_1,
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_obx_async_insert_object = ffi.Uint64 Function(
  ffi.Pointer<OBX_async> async_1,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
);

typedef _dart_obx_async_insert_object = int Function(
  ffi.Pointer<OBX_async> async_1,
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_obx_async_remove = ffi.Int32 Function(
  ffi.Pointer<OBX_async> async_1,
  ffi.Uint64 id,
);

typedef _dart_obx_async_remove = int Function(
  ffi.Pointer<OBX_async> async_1,
  int id,
);

typedef _c_obx_async_create = ffi.Pointer<OBX_async> Function(
  ffi.Pointer<OBX_box> box,
  ffi.Uint64 enqueue_timeout_millis,
);

typedef _dart_obx_async_create = ffi.Pointer<OBX_async> Function(
  ffi.Pointer<OBX_box> box,
  int enqueue_timeout_millis,
);

typedef _c_obx_async_close = ffi.Int32 Function(
  ffi.Pointer<OBX_async> async_1,
);

typedef _dart_obx_async_close = int Function(
  ffi.Pointer<OBX_async> async_1,
);

typedef _c_obx_query_builder = ffi.Pointer<OBX_query_builder> Function(
  ffi.Pointer<OBX_store> store,
  ffi.Uint32 entity_id,
);

typedef _dart_obx_query_builder = ffi.Pointer<OBX_query_builder> Function(
  ffi.Pointer<OBX_store> store,
  int entity_id,
);

typedef _c_obx_qb_close = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
);

typedef _dart_obx_qb_close = int Function(
  ffi.Pointer<OBX_query_builder> builder,
);

typedef _c_obx_qb_error_code = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
);

typedef _dart_obx_qb_error_code = int Function(
  ffi.Pointer<OBX_query_builder> builder,
);

typedef _c_obx_qb_error_message = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<OBX_query_builder> builder,
);

typedef _dart_obx_qb_error_message = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<OBX_query_builder> builder,
);

typedef _c_obx_qb_null = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
);

typedef _dart_obx_qb_null = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
);

typedef _c_obx_qb_not_null = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
);

typedef _dart_obx_qb_not_null = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
);

typedef _c_obx_qb_equals_string = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
);

typedef _dart_obx_qb_equals_string = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
);

typedef _c_obx_qb_not_equals_string = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
);

typedef _dart_obx_qb_not_equals_string = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
);

typedef _c_obx_qb_contains_string = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
);

typedef _dart_obx_qb_contains_string = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
);

typedef _c_obx_qb_starts_with_string = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
);

typedef _dart_obx_qb_starts_with_string = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
);

typedef _c_obx_qb_ends_with_string = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
);

typedef _dart_obx_qb_ends_with_string = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
);

typedef _c_obx_qb_greater_than_string = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
);

typedef _dart_obx_qb_greater_than_string = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
);

typedef _c_obx_qb_greater_or_equal_string = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
);

typedef _dart_obx_qb_greater_or_equal_string = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
);

typedef _c_obx_qb_less_than_string = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
);

typedef _dart_obx_qb_less_than_string = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
);

typedef _c_obx_qb_less_or_equal_string = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
);

typedef _dart_obx_qb_less_or_equal_string = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
);

typedef _c_obx_qb_in_strings = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> values,
  ffi.IntPtr count,
  ffi.Uint8 case_sensitive,
);

typedef _dart_obx_qb_in_strings = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> values,
  int count,
  int case_sensitive,
);

typedef _c_obx_qb_any_equals_string = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Int8> value,
  ffi.Uint8 case_sensitive,
);

typedef _dart_obx_qb_any_equals_string = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Int8> value,
  int case_sensitive,
);

typedef _c_obx_qb_equals_int = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Int64 value,
);

typedef _dart_obx_qb_equals_int = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  int value,
);

typedef _c_obx_qb_not_equals_int = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Int64 value,
);

typedef _dart_obx_qb_not_equals_int = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  int value,
);

typedef _c_obx_qb_greater_than_int = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Int64 value,
);

typedef _dart_obx_qb_greater_than_int = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  int value,
);

typedef _c_obx_qb_greater_or_equal_int = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Int64 value,
);

typedef _dart_obx_qb_greater_or_equal_int = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  int value,
);

typedef _c_obx_qb_less_than_int = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Int64 value,
);

typedef _dart_obx_qb_less_than_int = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  int value,
);

typedef _c_obx_qb_less_or_equal_int = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Int64 value,
);

typedef _dart_obx_qb_less_or_equal_int = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  int value,
);

typedef _c_obx_qb_between_2ints = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Int64 value_a,
  ffi.Int64 value_b,
);

typedef _dart_obx_qb_between_2ints = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  int value_a,
  int value_b,
);

typedef _c_obx_qb_in_int64s = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Int64> values,
  ffi.IntPtr count,
);

typedef _dart_obx_qb_in_int64s = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Int64> values,
  int count,
);

typedef _c_obx_qb_not_in_int64s = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Int64> values,
  ffi.IntPtr count,
);

typedef _dart_obx_qb_not_in_int64s = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Int64> values,
  int count,
);

typedef _c_obx_qb_in_int32s = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Int32> values,
  ffi.IntPtr count,
);

typedef _dart_obx_qb_in_int32s = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Int32> values,
  int count,
);

typedef _c_obx_qb_not_in_int32s = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Int32> values,
  ffi.IntPtr count,
);

typedef _dart_obx_qb_not_in_int32s = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Int32> values,
  int count,
);

typedef _c_obx_qb_greater_than_double = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Double value,
);

typedef _dart_obx_qb_greater_than_double = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  double value,
);

typedef _c_obx_qb_greater_or_equal_double = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Double value,
);

typedef _dart_obx_qb_greater_or_equal_double = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  double value,
);

typedef _c_obx_qb_less_than_double = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Double value,
);

typedef _dart_obx_qb_less_than_double = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  double value,
);

typedef _c_obx_qb_less_or_equal_double = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Double value,
);

typedef _dart_obx_qb_less_or_equal_double = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  double value,
);

typedef _c_obx_qb_between_2doubles = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Double value_a,
  ffi.Double value_b,
);

typedef _dart_obx_qb_between_2doubles = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  double value_a,
  double value_b,
);

typedef _c_obx_qb_equals_bytes = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Void> value,
  ffi.IntPtr size,
);

typedef _dart_obx_qb_equals_bytes = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Void> value,
  int size,
);

typedef _c_obx_qb_greater_than_bytes = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Void> value,
  ffi.IntPtr size,
);

typedef _dart_obx_qb_greater_than_bytes = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Void> value,
  int size,
);

typedef _c_obx_qb_greater_or_equal_bytes = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Void> value,
  ffi.IntPtr size,
);

typedef _dart_obx_qb_greater_or_equal_bytes = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Void> value,
  int size,
);

typedef _c_obx_qb_less_than_bytes = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Void> value,
  ffi.IntPtr size,
);

typedef _dart_obx_qb_less_than_bytes = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Void> value,
  int size,
);

typedef _c_obx_qb_less_or_equal_bytes = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Void> value,
  ffi.IntPtr size,
);

typedef _dart_obx_qb_less_or_equal_bytes = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  ffi.Pointer<ffi.Void> value,
  int size,
);

typedef _c_obx_qb_all = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Pointer<ffi.Int32> conditions,
  ffi.IntPtr count,
);

typedef _dart_obx_qb_all = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Pointer<ffi.Int32> conditions,
  int count,
);

typedef _c_obx_qb_any = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Pointer<ffi.Int32> conditions,
  ffi.IntPtr count,
);

typedef _dart_obx_qb_any = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Pointer<ffi.Int32> conditions,
  int count,
);

typedef _c_obx_qb_param_alias = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Pointer<ffi.Int8> alias,
);

typedef _dart_obx_qb_param_alias = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Pointer<ffi.Int8> alias,
);

typedef _c_obx_qb_order = ffi.Int32 Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
  ffi.Int32 flags,
);

typedef _dart_obx_qb_order = int Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
  int flags,
);

typedef _c_obx_qb_link_property = ffi.Pointer<OBX_query_builder> Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 property_id,
);

typedef _dart_obx_qb_link_property = ffi.Pointer<OBX_query_builder> Function(
  ffi.Pointer<OBX_query_builder> builder,
  int property_id,
);

typedef _c_obx_qb_backlink_property = ffi.Pointer<OBX_query_builder> Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 source_entity_id,
  ffi.Uint32 source_property_id,
);

typedef _dart_obx_qb_backlink_property = ffi.Pointer<OBX_query_builder>
    Function(
  ffi.Pointer<OBX_query_builder> builder,
  int source_entity_id,
  int source_property_id,
);

typedef _c_obx_qb_link_standalone = ffi.Pointer<OBX_query_builder> Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 relation_id,
);

typedef _dart_obx_qb_link_standalone = ffi.Pointer<OBX_query_builder> Function(
  ffi.Pointer<OBX_query_builder> builder,
  int relation_id,
);

typedef _c_obx_qb_backlink_standalone = ffi.Pointer<OBX_query_builder> Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 relation_id,
);

typedef _dart_obx_qb_backlink_standalone = ffi.Pointer<OBX_query_builder>
    Function(
  ffi.Pointer<OBX_query_builder> builder,
  int relation_id,
);

typedef _c_obx_qb_link_time = ffi.Pointer<OBX_query_builder> Function(
  ffi.Pointer<OBX_query_builder> builder,
  ffi.Uint32 linked_entity_id,
  ffi.Uint32 begin_property_id,
  ffi.Uint32 end_property_id,
);

typedef _dart_obx_qb_link_time = ffi.Pointer<OBX_query_builder> Function(
  ffi.Pointer<OBX_query_builder> builder,
  int linked_entity_id,
  int begin_property_id,
  int end_property_id,
);

typedef _c_obx_query = ffi.Pointer<OBX_query> Function(
  ffi.Pointer<OBX_query_builder> builder,
);

typedef _dart_obx_query = ffi.Pointer<OBX_query> Function(
  ffi.Pointer<OBX_query_builder> builder,
);

typedef _c_obx_query_close = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
);

typedef _dart_obx_query_close = int Function(
  ffi.Pointer<OBX_query> query,
);

typedef _c_obx_query_clone = ffi.Pointer<OBX_query> Function(
  ffi.Pointer<OBX_query> query,
);

typedef _dart_obx_query_clone = ffi.Pointer<OBX_query> Function(
  ffi.Pointer<OBX_query> query,
);

typedef _c_obx_query_offset = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Uint64 offset,
);

typedef _dart_obx_query_offset = int Function(
  ffi.Pointer<OBX_query> query,
  int offset,
);

typedef _c_obx_query_offset_limit = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Uint64 offset,
  ffi.Uint64 limit,
);

typedef _dart_obx_query_offset_limit = int Function(
  ffi.Pointer<OBX_query> query,
  int offset,
  int limit,
);

typedef _c_obx_query_limit = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Uint64 limit,
);

typedef _dart_obx_query_limit = int Function(
  ffi.Pointer<OBX_query> query,
  int limit,
);

typedef _c_obx_query_find = ffi.Pointer<OBX_bytes_array> Function(
  ffi.Pointer<OBX_query> query,
);

typedef _dart_obx_query_find = ffi.Pointer<OBX_bytes_array> Function(
  ffi.Pointer<OBX_query> query,
);

typedef _c_obx_query_visit = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.NativeFunction<obx_data_visitor>> visitor,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _dart_obx_query_visit = int Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.NativeFunction<obx_data_visitor>> visitor,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _c_obx_query_find_ids = ffi.Pointer<OBX_id_array> Function(
  ffi.Pointer<OBX_query> query,
);

typedef _dart_obx_query_find_ids = ffi.Pointer<OBX_id_array> Function(
  ffi.Pointer<OBX_query> query,
);

typedef _c_obx_query_count = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _dart_obx_query_count = int Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _c_obx_query_remove = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _dart_obx_query_remove = int Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _c_obx_query_describe = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<OBX_query> query,
);

typedef _dart_obx_query_describe = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<OBX_query> query,
);

typedef _c_obx_query_describe_params = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<OBX_query> query,
);

typedef _dart_obx_query_describe_params = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<OBX_query> query,
);

typedef _c_obx_query_cursor_visit = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.NativeFunction<obx_data_visitor>> visitor,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _dart_obx_query_cursor_visit = int Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.NativeFunction<obx_data_visitor>> visitor,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _c_obx_query_cursor_find = ffi.Pointer<OBX_bytes_array> Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<OBX_cursor> cursor,
);

typedef _dart_obx_query_cursor_find = ffi.Pointer<OBX_bytes_array> Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<OBX_cursor> cursor,
);

typedef _c_obx_query_cursor_find_ids = ffi.Pointer<OBX_id_array> Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<OBX_cursor> cursor,
);

typedef _dart_obx_query_cursor_find_ids = ffi.Pointer<OBX_id_array> Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<OBX_cursor> cursor,
);

typedef _c_obx_query_cursor_count = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _dart_obx_query_cursor_count = int Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _c_obx_query_cursor_remove = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _dart_obx_query_cursor_remove = int Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<OBX_cursor> cursor,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _c_obx_query_param_string = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Uint32 entity_id,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Int8> value,
);

typedef _dart_obx_query_param_string = int Function(
  ffi.Pointer<OBX_query> query,
  int entity_id,
  int property_id,
  ffi.Pointer<ffi.Int8> value,
);

typedef _c_obx_query_param_strings = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Uint32 entity_id,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> values,
  ffi.IntPtr count,
);

typedef _dart_obx_query_param_strings = int Function(
  ffi.Pointer<OBX_query> query,
  int entity_id,
  int property_id,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> values,
  int count,
);

typedef _c_obx_query_param_int = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Uint32 entity_id,
  ffi.Uint32 property_id,
  ffi.Int64 value,
);

typedef _dart_obx_query_param_int = int Function(
  ffi.Pointer<OBX_query> query,
  int entity_id,
  int property_id,
  int value,
);

typedef _c_obx_query_param_2ints = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Uint32 entity_id,
  ffi.Uint32 property_id,
  ffi.Int64 value_a,
  ffi.Int64 value_b,
);

typedef _dart_obx_query_param_2ints = int Function(
  ffi.Pointer<OBX_query> query,
  int entity_id,
  int property_id,
  int value_a,
  int value_b,
);

typedef _c_obx_query_param_int64s = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Uint32 entity_id,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Int64> values,
  ffi.IntPtr count,
);

typedef _dart_obx_query_param_int64s = int Function(
  ffi.Pointer<OBX_query> query,
  int entity_id,
  int property_id,
  ffi.Pointer<ffi.Int64> values,
  int count,
);

typedef _c_obx_query_param_int32s = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Uint32 entity_id,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Int32> values,
  ffi.IntPtr count,
);

typedef _dart_obx_query_param_int32s = int Function(
  ffi.Pointer<OBX_query> query,
  int entity_id,
  int property_id,
  ffi.Pointer<ffi.Int32> values,
  int count,
);

typedef _c_obx_query_param_double = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Uint32 entity_id,
  ffi.Uint32 property_id,
  ffi.Double value,
);

typedef _dart_obx_query_param_double = int Function(
  ffi.Pointer<OBX_query> query,
  int entity_id,
  int property_id,
  double value,
);

typedef _c_obx_query_param_2doubles = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Uint32 entity_id,
  ffi.Uint32 property_id,
  ffi.Double value_a,
  ffi.Double value_b,
);

typedef _dart_obx_query_param_2doubles = int Function(
  ffi.Pointer<OBX_query> query,
  int entity_id,
  int property_id,
  double value_a,
  double value_b,
);

typedef _c_obx_query_param_bytes = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Uint32 entity_id,
  ffi.Uint32 property_id,
  ffi.Pointer<ffi.Void> value,
  ffi.IntPtr size,
);

typedef _dart_obx_query_param_bytes = int Function(
  ffi.Pointer<OBX_query> query,
  int entity_id,
  int property_id,
  ffi.Pointer<ffi.Void> value,
  int size,
);

typedef _c_obx_query_param_alias_string = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Int8> alias,
  ffi.Pointer<ffi.Int8> value,
);

typedef _dart_obx_query_param_alias_string = int Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Int8> alias,
  ffi.Pointer<ffi.Int8> value,
);

typedef _c_obx_query_param_alias_strings = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Int8> alias,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> values,
  ffi.IntPtr count,
);

typedef _dart_obx_query_param_alias_strings = int Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Int8> alias,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> values,
  int count,
);

typedef _c_obx_query_param_alias_int = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Int8> alias,
  ffi.Int64 value,
);

typedef _dart_obx_query_param_alias_int = int Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Int8> alias,
  int value,
);

typedef _c_obx_query_param_alias_2ints = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Int8> alias,
  ffi.Int64 value_a,
  ffi.Int64 value_b,
);

typedef _dart_obx_query_param_alias_2ints = int Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Int8> alias,
  int value_a,
  int value_b,
);

typedef _c_obx_query_param_alias_int64s = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Int8> alias,
  ffi.Pointer<ffi.Int64> values,
  ffi.IntPtr count,
);

typedef _dart_obx_query_param_alias_int64s = int Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Int8> alias,
  ffi.Pointer<ffi.Int64> values,
  int count,
);

typedef _c_obx_query_param_alias_int32s = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Int8> alias,
  ffi.Pointer<ffi.Int32> values,
  ffi.IntPtr count,
);

typedef _dart_obx_query_param_alias_int32s = int Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Int8> alias,
  ffi.Pointer<ffi.Int32> values,
  int count,
);

typedef _c_obx_query_param_alias_double = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Int8> alias,
  ffi.Double value,
);

typedef _dart_obx_query_param_alias_double = int Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Int8> alias,
  double value,
);

typedef _c_obx_query_param_alias_2doubles = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Int8> alias,
  ffi.Double value_a,
  ffi.Double value_b,
);

typedef _dart_obx_query_param_alias_2doubles = int Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Int8> alias,
  double value_a,
  double value_b,
);

typedef _c_obx_query_param_alias_bytes = ffi.Int32 Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Int8> alias,
  ffi.Pointer<ffi.Void> value,
  ffi.IntPtr size,
);

typedef _dart_obx_query_param_alias_bytes = int Function(
  ffi.Pointer<OBX_query> query,
  ffi.Pointer<ffi.Int8> alias,
  ffi.Pointer<ffi.Void> value,
  int size,
);

typedef _c_obx_query_prop = ffi.Pointer<OBX_query_prop> Function(
  ffi.Pointer<OBX_query> query,
  ffi.Uint32 property_id,
);

typedef _dart_obx_query_prop = ffi.Pointer<OBX_query_prop> Function(
  ffi.Pointer<OBX_query> query,
  int property_id,
);

typedef _c_obx_query_prop_close = ffi.Int32 Function(
  ffi.Pointer<OBX_query_prop> query,
);

typedef _dart_obx_query_prop_close = int Function(
  ffi.Pointer<OBX_query_prop> query,
);

typedef _c_obx_query_prop_distinct = ffi.Int32 Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Uint8 distinct,
);

typedef _dart_obx_query_prop_distinct = int Function(
  ffi.Pointer<OBX_query_prop> query,
  int distinct,
);

typedef _c_obx_query_prop_distinct_case = ffi.Int32 Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Uint8 distinct,
  ffi.Uint8 case_sensitive,
);

typedef _dart_obx_query_prop_distinct_case = int Function(
  ffi.Pointer<OBX_query_prop> query,
  int distinct,
  int case_sensitive,
);

typedef _c_obx_query_prop_count = ffi.Int32 Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _dart_obx_query_prop_count = int Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _c_obx_query_prop_avg = ffi.Int32 Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Double> out_average,
  ffi.Pointer<ffi.Int64> out_count,
);

typedef _dart_obx_query_prop_avg = int Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Double> out_average,
  ffi.Pointer<ffi.Int64> out_count,
);

typedef _c_obx_query_prop_avg_int = ffi.Int32 Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Int64> out_average,
  ffi.Pointer<ffi.Int64> out_count,
);

typedef _dart_obx_query_prop_avg_int = int Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Int64> out_average,
  ffi.Pointer<ffi.Int64> out_count,
);

typedef _c_obx_query_prop_min = ffi.Int32 Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Double> out_minimum,
  ffi.Pointer<ffi.Int64> out_count,
);

typedef _dart_obx_query_prop_min = int Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Double> out_minimum,
  ffi.Pointer<ffi.Int64> out_count,
);

typedef _c_obx_query_prop_max = ffi.Int32 Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Double> out_maximum,
  ffi.Pointer<ffi.Int64> out_count,
);

typedef _dart_obx_query_prop_max = int Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Double> out_maximum,
  ffi.Pointer<ffi.Int64> out_count,
);

typedef _c_obx_query_prop_sum = ffi.Int32 Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Double> out_sum,
  ffi.Pointer<ffi.Int64> out_count,
);

typedef _dart_obx_query_prop_sum = int Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Double> out_sum,
  ffi.Pointer<ffi.Int64> out_count,
);

typedef _c_obx_query_prop_min_int = ffi.Int32 Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Int64> out_minimum,
  ffi.Pointer<ffi.Int64> out_count,
);

typedef _dart_obx_query_prop_min_int = int Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Int64> out_minimum,
  ffi.Pointer<ffi.Int64> out_count,
);

typedef _c_obx_query_prop_max_int = ffi.Int32 Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Int64> out_maximum,
  ffi.Pointer<ffi.Int64> out_count,
);

typedef _dart_obx_query_prop_max_int = int Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Int64> out_maximum,
  ffi.Pointer<ffi.Int64> out_count,
);

typedef _c_obx_query_prop_sum_int = ffi.Int32 Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Int64> out_sum,
  ffi.Pointer<ffi.Int64> out_count,
);

typedef _dart_obx_query_prop_sum_int = int Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Int64> out_sum,
  ffi.Pointer<ffi.Int64> out_count,
);

typedef _c_obx_query_prop_find_strings = ffi.Pointer<OBX_string_array> Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Int8> value_if_null,
);

typedef _dart_obx_query_prop_find_strings = ffi.Pointer<OBX_string_array>
    Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Int8> value_if_null,
);

typedef _c_obx_query_prop_find_int64s = ffi.Pointer<OBX_int64_array> Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Int64> value_if_null,
);

typedef _dart_obx_query_prop_find_int64s = ffi.Pointer<OBX_int64_array>
    Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Int64> value_if_null,
);

typedef _c_obx_query_prop_find_int32s = ffi.Pointer<OBX_int32_array> Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Int32> value_if_null,
);

typedef _dart_obx_query_prop_find_int32s = ffi.Pointer<OBX_int32_array>
    Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Int32> value_if_null,
);

typedef _c_obx_query_prop_find_int16s = ffi.Pointer<OBX_int16_array> Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Int16> value_if_null,
);

typedef _dart_obx_query_prop_find_int16s = ffi.Pointer<OBX_int16_array>
    Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Int16> value_if_null,
);

typedef _c_obx_query_prop_find_int8s = ffi.Pointer<OBX_int8_array> Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Int8> value_if_null,
);

typedef _dart_obx_query_prop_find_int8s = ffi.Pointer<OBX_int8_array> Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Int8> value_if_null,
);

typedef _c_obx_query_prop_find_doubles = ffi.Pointer<OBX_double_array> Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Double> value_if_null,
);

typedef _dart_obx_query_prop_find_doubles = ffi.Pointer<OBX_double_array>
    Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Double> value_if_null,
);

typedef _c_obx_query_prop_find_floats = ffi.Pointer<OBX_float_array> Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Float> value_if_null,
);

typedef _dart_obx_query_prop_find_floats = ffi.Pointer<OBX_float_array>
    Function(
  ffi.Pointer<OBX_query_prop> query,
  ffi.Pointer<ffi.Float> value_if_null,
);

typedef obx_observer = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Uint32>,
  ffi.IntPtr,
);

typedef _c_obx_observe = ffi.Pointer<OBX_observer> Function(
  ffi.Pointer<OBX_store> store,
  ffi.Pointer<ffi.NativeFunction<obx_observer>> callback,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _dart_obx_observe = ffi.Pointer<OBX_observer> Function(
  ffi.Pointer<OBX_store> store,
  ffi.Pointer<ffi.NativeFunction<obx_observer>> callback,
  ffi.Pointer<ffi.Void> user_data,
);

typedef obx_observer_single_type = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_obx_observe_single_type = ffi.Pointer<OBX_observer> Function(
  ffi.Pointer<OBX_store> store,
  ffi.Uint32 type_id,
  ffi.Pointer<ffi.NativeFunction<obx_observer_single_type>> callback,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _dart_obx_observe_single_type = ffi.Pointer<OBX_observer> Function(
  ffi.Pointer<OBX_store> store,
  int type_id,
  ffi.Pointer<ffi.NativeFunction<obx_observer_single_type>> callback,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _c_obx_observer_close = ffi.Int32 Function(
  ffi.Pointer<OBX_observer> observer,
);

typedef _dart_obx_observer_close = int Function(
  ffi.Pointer<OBX_observer> observer,
);

typedef _c_obx_bytes_free = ffi.Void Function(
  ffi.Pointer<OBX_bytes> bytes,
);

typedef _dart_obx_bytes_free = void Function(
  ffi.Pointer<OBX_bytes> bytes,
);

typedef _c_obx_bytes_array = ffi.Pointer<OBX_bytes_array> Function(
  ffi.IntPtr count,
);

typedef _dart_obx_bytes_array = ffi.Pointer<OBX_bytes_array> Function(
  int count,
);

typedef _c_obx_bytes_array_set = ffi.Int32 Function(
  ffi.Pointer<OBX_bytes_array> array,
  ffi.IntPtr index,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
);

typedef _dart_obx_bytes_array_set = int Function(
  ffi.Pointer<OBX_bytes_array> array,
  int index,
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_obx_bytes_array_free = ffi.Void Function(
  ffi.Pointer<OBX_bytes_array> array,
);

typedef _dart_obx_bytes_array_free = void Function(
  ffi.Pointer<OBX_bytes_array> array,
);

typedef _c_obx_id_array = ffi.Pointer<OBX_id_array> Function(
  ffi.Pointer<ffi.Uint64> ids,
  ffi.IntPtr count,
);

typedef _dart_obx_id_array = ffi.Pointer<OBX_id_array> Function(
  ffi.Pointer<ffi.Uint64> ids,
  int count,
);

typedef _c_obx_id_array_free = ffi.Void Function(
  ffi.Pointer<OBX_id_array> array,
);

typedef _dart_obx_id_array_free = void Function(
  ffi.Pointer<OBX_id_array> array,
);

typedef _c_obx_string_array_free = ffi.Void Function(
  ffi.Pointer<OBX_string_array> array,
);

typedef _dart_obx_string_array_free = void Function(
  ffi.Pointer<OBX_string_array> array,
);

typedef _c_obx_int64_array_free = ffi.Void Function(
  ffi.Pointer<OBX_int64_array> array,
);

typedef _dart_obx_int64_array_free = void Function(
  ffi.Pointer<OBX_int64_array> array,
);

typedef _c_obx_int32_array_free = ffi.Void Function(
  ffi.Pointer<OBX_int32_array> array,
);

typedef _dart_obx_int32_array_free = void Function(
  ffi.Pointer<OBX_int32_array> array,
);

typedef _c_obx_int16_array_free = ffi.Void Function(
  ffi.Pointer<OBX_int16_array> array,
);

typedef _dart_obx_int16_array_free = void Function(
  ffi.Pointer<OBX_int16_array> array,
);

typedef _c_obx_int8_array_free = ffi.Void Function(
  ffi.Pointer<OBX_int8_array> array,
);

typedef _dart_obx_int8_array_free = void Function(
  ffi.Pointer<OBX_int8_array> array,
);

typedef _c_obx_double_array_free = ffi.Void Function(
  ffi.Pointer<OBX_double_array> array,
);

typedef _dart_obx_double_array_free = void Function(
  ffi.Pointer<OBX_double_array> array,
);

typedef _c_obx_float_array_free = ffi.Void Function(
  ffi.Pointer<OBX_float_array> array,
);

typedef _dart_obx_float_array_free = void Function(
  ffi.Pointer<OBX_float_array> array,
);

typedef _c_obx_posix_sem_prefix_set = ffi.Void Function(
  ffi.Pointer<ffi.Int8> prefix,
);

typedef _dart_obx_posix_sem_prefix_set = void Function(
  ffi.Pointer<ffi.Int8> prefix,
);

typedef _c_obx_sync_available = ffi.Uint8 Function();

typedef _dart_obx_sync_available = int Function();

typedef _c_obx_sync = ffi.Pointer<OBX_sync> Function(
  ffi.Pointer<OBX_store> store,
  ffi.Pointer<ffi.Int8> server_uri,
);

typedef _dart_obx_sync = ffi.Pointer<OBX_sync> Function(
  ffi.Pointer<OBX_store> store,
  ffi.Pointer<ffi.Int8> server_uri,
);

typedef _c_obx_sync_close = ffi.Int32 Function(
  ffi.Pointer<OBX_sync> sync_1,
);

typedef _dart_obx_sync_close = int Function(
  ffi.Pointer<OBX_sync> sync_1,
);

typedef _c_obx_sync_credentials = ffi.Int32 Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Int32 type,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
);

typedef _dart_obx_sync_credentials = int Function(
  ffi.Pointer<OBX_sync> sync_1,
  int type,
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_obx_sync_max_messages_in_flight = ffi.Int32 Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Int32 value,
);

typedef _dart_obx_sync_max_messages_in_flight = int Function(
  ffi.Pointer<OBX_sync> sync_1,
  int value,
);

typedef _c_obx_sync_request_updates_mode = ffi.Int32 Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Int32 mode,
);

typedef _dart_obx_sync_request_updates_mode = int Function(
  ffi.Pointer<OBX_sync> sync_1,
  int mode,
);

typedef _c_obx_sync_start = ffi.Int32 Function(
  ffi.Pointer<OBX_sync> sync_1,
);

typedef _dart_obx_sync_start = int Function(
  ffi.Pointer<OBX_sync> sync_1,
);

typedef _c_obx_sync_stop = ffi.Int32 Function(
  ffi.Pointer<OBX_sync> sync_1,
);

typedef _dart_obx_sync_stop = int Function(
  ffi.Pointer<OBX_sync> sync_1,
);

typedef _c_obx_sync_state = ffi.Int32 Function(
  ffi.Pointer<OBX_sync> sync_1,
);

typedef _dart_obx_sync_state = int Function(
  ffi.Pointer<OBX_sync> sync_1,
);

typedef _c_obx_sync_wait_for_logged_in_state = ffi.Int32 Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Uint64 timeout_millis,
);

typedef _dart_obx_sync_wait_for_logged_in_state = int Function(
  ffi.Pointer<OBX_sync> sync_1,
  int timeout_millis,
);

typedef _c_obx_sync_updates_request = ffi.Int32 Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Uint8 subscribe_for_pushes,
);

typedef _dart_obx_sync_updates_request = int Function(
  ffi.Pointer<OBX_sync> sync_1,
  int subscribe_for_pushes,
);

typedef _c_obx_sync_updates_cancel = ffi.Int32 Function(
  ffi.Pointer<OBX_sync> sync_1,
);

typedef _dart_obx_sync_updates_cancel = int Function(
  ffi.Pointer<OBX_sync> sync_1,
);

typedef _c_obx_sync_outgoing_message_count = ffi.Int32 Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Uint64 limit,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _dart_obx_sync_outgoing_message_count = int Function(
  ffi.Pointer<OBX_sync> sync_1,
  int limit,
  ffi.Pointer<ffi.Uint64> out_count,
);

typedef _c_obx_sync_full = ffi.Int32 Function(
  ffi.Pointer<OBX_sync> sync_1,
);

typedef _dart_obx_sync_full = int Function(
  ffi.Pointer<OBX_sync> sync_1,
);

typedef OBX_sync_listener_connect = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_obx_sync_listener_connect = ffi.Void Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Pointer<ffi.NativeFunction<OBX_sync_listener_connect>> listener,
  ffi.Pointer<ffi.Void> listener_arg,
);

typedef _dart_obx_sync_listener_connect = void Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Pointer<ffi.NativeFunction<OBX_sync_listener_connect>> listener,
  ffi.Pointer<ffi.Void> listener_arg,
);

typedef OBX_sync_listener_disconnect = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_obx_sync_listener_disconnect = ffi.Void Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Pointer<ffi.NativeFunction<OBX_sync_listener_disconnect>> listener,
  ffi.Pointer<ffi.Void> listener_arg,
);

typedef _dart_obx_sync_listener_disconnect = void Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Pointer<ffi.NativeFunction<OBX_sync_listener_disconnect>> listener,
  ffi.Pointer<ffi.Void> listener_arg,
);

typedef OBX_sync_listener_login = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_obx_sync_listener_login = ffi.Void Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Pointer<ffi.NativeFunction<OBX_sync_listener_login>> listener,
  ffi.Pointer<ffi.Void> listener_arg,
);

typedef _dart_obx_sync_listener_login = void Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Pointer<ffi.NativeFunction<OBX_sync_listener_login>> listener,
  ffi.Pointer<ffi.Void> listener_arg,
);

typedef OBX_sync_listener_login_failure = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _c_obx_sync_listener_login_failure = ffi.Void Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Pointer<ffi.NativeFunction<OBX_sync_listener_login_failure>> listener,
  ffi.Pointer<ffi.Void> listener_arg,
);

typedef _dart_obx_sync_listener_login_failure = void Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Pointer<ffi.NativeFunction<OBX_sync_listener_login_failure>> listener,
  ffi.Pointer<ffi.Void> listener_arg,
);

typedef OBX_sync_listener_complete = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_obx_sync_listener_complete = ffi.Void Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Pointer<ffi.NativeFunction<OBX_sync_listener_complete>> listener,
  ffi.Pointer<ffi.Void> listener_arg,
);

typedef _dart_obx_sync_listener_complete = void Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Pointer<ffi.NativeFunction<OBX_sync_listener_complete>> listener,
  ffi.Pointer<ffi.Void> listener_arg,
);

typedef OBX_sync_listener_change = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<OBX_sync_change_array>,
);

typedef _c_obx_sync_listener_change = ffi.Void Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Pointer<ffi.NativeFunction<OBX_sync_listener_change>> listener,
  ffi.Pointer<ffi.Void> listener_arg,
);

typedef _dart_obx_sync_listener_change = void Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Pointer<ffi.NativeFunction<OBX_sync_listener_change>> listener,
  ffi.Pointer<ffi.Void> listener_arg,
);

typedef _c_obx_dart_init_api = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_obx_dart_init_api = int Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_obx_dart_observe = ffi.Pointer<OBX_observer> Function(
  ffi.Pointer<OBX_store> store,
  ffi.Int64 native_port,
);

typedef _dart_obx_dart_observe = ffi.Pointer<OBX_observer> Function(
  ffi.Pointer<OBX_store> store,
  int native_port,
);

typedef _c_obx_dart_observe_single_type = ffi.Pointer<OBX_observer> Function(
  ffi.Pointer<OBX_store> store,
  ffi.Uint32 type_id,
  ffi.Int64 native_port,
);

typedef _dart_obx_dart_observe_single_type = ffi.Pointer<OBX_observer> Function(
  ffi.Pointer<OBX_store> store,
  int type_id,
  int native_port,
);

typedef _c_OBX_dart_sync_listener_close = ffi.Int32 Function(
  ffi.Pointer<OBX_dart_sync_listener> listener,
);

typedef _dart_OBX_dart_sync_listener_close = int Function(
  ffi.Pointer<OBX_dart_sync_listener> listener,
);

typedef _c_obx_dart_sync_listener_connect = ffi.Pointer<OBX_dart_sync_listener>
    Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Int64 native_port,
);

typedef _dart_obx_dart_sync_listener_connect
    = ffi.Pointer<OBX_dart_sync_listener> Function(
  ffi.Pointer<OBX_sync> sync_1,
  int native_port,
);

typedef _c_obx_dart_sync_listener_disconnect
    = ffi.Pointer<OBX_dart_sync_listener> Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Int64 native_port,
);

typedef _dart_obx_dart_sync_listener_disconnect
    = ffi.Pointer<OBX_dart_sync_listener> Function(
  ffi.Pointer<OBX_sync> sync_1,
  int native_port,
);

typedef _c_obx_dart_sync_listener_login = ffi.Pointer<OBX_dart_sync_listener>
    Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Int64 native_port,
);

typedef _dart_obx_dart_sync_listener_login = ffi.Pointer<OBX_dart_sync_listener>
    Function(
  ffi.Pointer<OBX_sync> sync_1,
  int native_port,
);

typedef _c_obx_dart_sync_listener_login_failure
    = ffi.Pointer<OBX_dart_sync_listener> Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Int64 native_port,
);

typedef _dart_obx_dart_sync_listener_login_failure
    = ffi.Pointer<OBX_dart_sync_listener> Function(
  ffi.Pointer<OBX_sync> sync_1,
  int native_port,
);

typedef _c_obx_dart_sync_listener_complete = ffi.Pointer<OBX_dart_sync_listener>
    Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Int64 native_port,
);

typedef _dart_obx_dart_sync_listener_complete
    = ffi.Pointer<OBX_dart_sync_listener> Function(
  ffi.Pointer<OBX_sync> sync_1,
  int native_port,
);

typedef _c_obx_dart_sync_listener_change = ffi.Pointer<OBX_dart_sync_listener>
    Function(
  ffi.Pointer<OBX_sync> sync_1,
  ffi.Int64 native_port,
);

typedef _dart_obx_dart_sync_listener_change
    = ffi.Pointer<OBX_dart_sync_listener> Function(
  ffi.Pointer<OBX_sync> sync_1,
  int native_port,
);
